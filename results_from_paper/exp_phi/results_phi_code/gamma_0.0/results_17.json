[
    {
        "epoch": 1,
        "loss": 1.1058584451675415,
        "best_loss": 1.1058584451675415,
        "best_kl": 14.438313484191895,
        "best_std": 0.47594785690307617,
        "cur_kl": 14.438313484191895,
        "cur_std": 0.47594785690307617,
        "prompt": "\"Write a Java program to implement the merge sort algorithm on an arrayprint",
        "nll_prompt": -3.1361141204833984
    },
    {
        "epoch": 2,
        "loss": 1.0081840753555298,
        "best_loss": 1.0081840753555298,
        "best_kl": 14.438313484191895,
        "best_std": 0.47594785690307617,
        "cur_kl": 15.751420974731445,
        "cur_std": 0.5009937763214112,
        "prompt": "\"Write a Java program to implement the merge sort algorithm on gentle arrayprint",
        "nll_prompt": -4.550578594207764
    },
    {
        "epoch": 3,
        "loss": 0.9522732496261597,
        "best_loss": 0.9522732496261597,
        "best_kl": 12.654170036315918,
        "best_std": 0.4741981983184814,
        "cur_kl": 12.654170036315918,
        "cur_std": 0.4741981983184814,
        "prompt": "_Write a Java program to implement the merge sort algorithm on gentle arrayprint",
        "nll_prompt": -5.332512855529785
    },
    {
        "epoch": 4,
        "loss": 0.8762894868850708,
        "best_loss": 0.8762894868850708,
        "best_kl": 7.279505252838135,
        "best_std": 0.3440661907196045,
        "cur_kl": 7.279505252838135,
        "cur_std": 0.3440661907196045,
        "prompt": "_Write a Java program to implement the merge sort algorithm on gentle array.",
        "nll_prompt": -4.520012855529785
    },
    {
        "epoch": 5,
        "loss": 0.8706033229827881,
        "best_loss": 0.8706033229827881,
        "best_kl": 5.630125999450684,
        "best_std": 0.30198895931243896,
        "cur_kl": 5.630125999450684,
        "cur_std": 0.30198895931243896,
        "prompt": " TheoryWrite a Java program to implement the merge sort algorithm on gentle array.",
        "nll_prompt": -4.676828384399414
    },
    {
        "epoch": 6,
        "loss": 0.8253103494644165,
        "best_loss": 0.8253103494644165,
        "best_kl": 5.630125999450684,
        "best_std": 0.30198895931243896,
        "cur_kl": 5.670437335968018,
        "cur_std": 0.34288511276245115,
        "prompt": " TheoryWrite a Java program to implement the merge sort algorithm on gentle features.",
        "nll_prompt": -5.140613079071045
    },
    {
        "epoch": 7,
        "loss": 0.8068771362304688,
        "best_loss": 0.8068771362304688,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 5.156880855560303,
        "cur_std": 0.28243091106414797,
        "prompt": " TheoryWrite a Java program to implement the merge sort algorithm on gentle web.",
        "nll_prompt": -5.454216957092285
    },
    {
        "epoch": 8,
        "loss": 0.8228720426559448,
        "best_loss": 0.8068771362304688,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 5.363399505615234,
        "cur_std": 0.32742948532104493,
        "prompt": " TheoryWrite a Java program to implement the merge sort algorithm on gentle conditions.",
        "nll_prompt": -5.196255207061768
    },
    {
        "epoch": 9,
        "loss": 0.8076284527778625,
        "best_loss": 0.8068771362304688,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.162964344024658,
        "cur_std": 0.3605498313903809,
        "prompt": " Theory Drug a Java program to implement the merge sort algorithm on gentle conditions.",
        "nll_prompt": -5.8969292640686035
    },
    {
        "epoch": 10,
        "loss": 0.8744313716888428,
        "best_loss": 0.8068771362304688,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.118664264678955,
        "cur_std": 0.44492306709289553,
        "prompt": " Theory Drug a Java technique to implement the merge sort algorithm on gentle conditions.",
        "nll_prompt": -6.380038738250732
    },
    {
        "epoch": 11,
        "loss": 0.8008399605751038,
        "best_loss": 0.8008399605751038,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.009890556335449,
        "cur_std": 0.4396543025970459,
        "prompt": " Theory Drug a Java technique to implement the merge sort algorithm on gentle problem.",
        "nll_prompt": -6.34474515914917
    },
    {
        "epoch": 12,
        "loss": 0.761296272277832,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.151289939880371,
        "cur_std": 0.4175820827484131,
        "prompt": " Theory Drug a Java technique to implement the merge sort algorithm on time problem.",
        "nll_prompt": -6.10191011428833
    },
    {
        "epoch": 13,
        "loss": 0.8627831339836121,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 5.800501346588135,
        "cur_std": 0.4198754787445068,
        "prompt": " Invest Drug a Java technique to implement the merge sort algorithm on time problem.",
        "nll_prompt": -6.352138519287109
    },
    {
        "epoch": 14,
        "loss": 0.8620443344116211,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.327221393585205,
        "cur_std": 0.39299211502075193,
        "prompt": " Invest Drug a Java extension to implement the merge sort algorithm on time problem.",
        "nll_prompt": -6.35085391998291
    },
    {
        "epoch": 15,
        "loss": 0.8766869306564331,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 5.480198860168457,
        "cur_std": 0.4014563083648682,
        "prompt": " Invest D a Java extension to implement the merge sort algorithm on time problem.",
        "nll_prompt": -5.934116840362549
    },
    {
        "epoch": 16,
        "loss": 0.8845450282096863,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.199072360992432,
        "cur_std": 0.37471344470977785,
        "prompt": "ient D a Java extension to implement the merge sort algorithm on time problem.",
        "nll_prompt": -5.926874160766602
    },
    {
        "epoch": 17,
        "loss": 0.8986268639564514,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 5.83656120300293,
        "cur_std": 0.4236198902130127,
        "prompt": " Work D a Java extension to implement the merge sort algorithm on time problem.",
        "nll_prompt": -6.017325401306152
    },
    {
        "epoch": 18,
        "loss": 0.8645296096801758,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.6630730628967285,
        "cur_std": 0.4833399772644043,
        "prompt": " Work D a Java extension to implement the merge sort algorithm lake time problem.",
        "nll_prompt": -6.8309502601623535
    },
    {
        "epoch": 19,
        "loss": 0.8613755702972412,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.575862407684326,
        "cur_std": 0.4380675792694092,
        "prompt": " Work D a Java programming to implement the merge sort algorithm lake time problem.",
        "nll_prompt": -6.789186954498291
    },
    {
        "epoch": 20,
        "loss": 0.8897285461425781,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.156496047973633,
        "cur_std": 0.44867734909057616,
        "prompt": " shift D a Java programming to implement the merge sort algorithm lake time problem.",
        "nll_prompt": -6.532347679138184
    },
    {
        "epoch": 21,
        "loss": 0.8968422412872314,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.71977424621582,
        "cur_std": 0.4249119281768799,
        "prompt": " shift D a Java programming to implement the merge sort algorithm lake tense problem.",
        "nll_prompt": -6.9312334060668945
    },
    {
        "epoch": 22,
        "loss": 0.9031859636306763,
        "best_loss": 0.761296272277832,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.709656715393066,
        "cur_std": 0.4119023323059082,
        "prompt": " endpoint D a Java programming to implement the merge sort algorithm lake tense problem.",
        "nll_prompt": -6.82484769821167
    },
    {
        "epoch": 23,
        "loss": 0.7585716247558594,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.289968013763428,
        "cur_std": 0.3828767776489258,
        "prompt": " endpoint D a Java programming to implement the merge sort algorithm instant tense problem.",
        "nll_prompt": -6.626824378967285
    },
    {
        "epoch": 24,
        "loss": 0.8915943503379822,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.847333908081055,
        "cur_std": 0.4332181453704834,
        "prompt": " endpoint D a Java programming to implement the merge sortNetflix instant tense problem.",
        "nll_prompt": -7.710707664489746
    },
    {
        "epoch": 25,
        "loss": 0.8465416431427002,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.703888893127441,
        "cur_std": 0.431013298034668,
        "prompt": " endpoint D a Java programming to implement the merge sortNetflix future tense problem.",
        "nll_prompt": -7.361279010772705
    },
    {
        "epoch": 26,
        "loss": 0.9520222544670105,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.385329246520996,
        "cur_std": 0.4317138671875,
        "prompt": " endpoint D a Java programming to implement the merge sortNetflixize tense problem.",
        "nll_prompt": -7.982085227966309
    },
    {
        "epoch": 27,
        "loss": 0.9039973020553589,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.13427734375,
        "cur_std": 0.4403549671173096,
        "prompt": " endpoint D a Java programming to implement the merge sort mainize tense problem.",
        "nll_prompt": -7.117035388946533
    },
    {
        "epoch": 28,
        "loss": 0.8961960673332214,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.588418006896973,
        "cur_std": 0.44308905601501464,
        "prompt": " endpoint D a Java programming to implement the merge sort mainizeaith problem.",
        "nll_prompt": -7.479642868041992
    },
    {
        "epoch": 29,
        "loss": 0.8926988840103149,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.81237268447876,
        "cur_std": 0.40592236518859864,
        "prompt": "ize D a Java programming to implement the merge sort mainizeaith problem.",
        "nll_prompt": -7.331816673278809
    },
    {
        "epoch": 30,
        "loss": 0.8771343231201172,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.362667083740234,
        "cur_std": 0.37717580795288086,
        "prompt": "izer a Java programming to implement the merge sort mainizeaith problem.",
        "nll_prompt": -7.6571478843688965
    },
    {
        "epoch": 31,
        "loss": 0.8406345248222351,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.132213592529297,
        "cur_std": 0.4420041084289551,
        "prompt": "izer a Java programming to implement the merge sortableizeaith problem.",
        "nll_prompt": -7.70723819732666
    },
    {
        "epoch": 32,
        "loss": 0.8165211081504822,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.0992255210876465,
        "cur_std": 0.39389517307281496,
        "prompt": "izer a Java programming to implement the merge sort memoryizeaith problem.",
        "nll_prompt": -8.012218475341797
    },
    {
        "epoch": 33,
        "loss": 0.8477959036827087,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 6.743273735046387,
        "cur_std": 0.4597303867340088,
        "prompt": "izer a Java programming to implement the merge sort expressionizeaith problem.",
        "nll_prompt": -7.7417731285095215
    },
    {
        "epoch": 34,
        "loss": 0.862395167350769,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.608174800872803,
        "cur_std": 0.44192843437194823,
        "prompt": "izer a Java programming to implement the merge sort expressionize calc problem.",
        "nll_prompt": -7.4316325187683105
    },
    {
        "epoch": 35,
        "loss": 0.8813132047653198,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.299991607666016,
        "cur_std": 0.47672576904296876,
        "prompt": "ize two a Java programming to implement the merge sort expressionize calc problem.",
        "nll_prompt": -7.660463809967041
    },
    {
        "epoch": 36,
        "loss": 0.9217873811721802,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.584247589111328,
        "cur_std": 0.44443278312683104,
        "prompt": "ize two a Java programming to implement the merge sort Ellize calc problem.",
        "nll_prompt": -7.800897121429443
    },
    {
        "epoch": 37,
        "loss": 0.8651660084724426,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.439785957336426,
        "cur_std": 0.4533498764038086,
        "prompt": "ize two a Java programming to implement the merge sortcolorize calc problem.",
        "nll_prompt": -7.346325397491455
    },
    {
        "epoch": 38,
        "loss": 0.8999530076980591,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.648011207580566,
        "cur_std": 0.49640617370605467,
        "prompt": "ize two a Java programming to model the merge sortcolorize calc problem.",
        "nll_prompt": -7.8822455406188965
    },
    {
        "epoch": 39,
        "loss": 0.8601498007774353,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 10.424560546875,
        "cur_std": 0.4684544563293457,
        "prompt": "ize two a Java programming to model the merge sort heize calc problem.",
        "nll_prompt": -7.443033695220947
    },
    {
        "epoch": 40,
        "loss": 0.9267791509628296,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 10.584771156311035,
        "cur_std": 0.5081518650054931,
        "prompt": "ize two a Java programming to model the merge sort he geometric calc problem.",
        "nll_prompt": -7.63007116317749
    },
    {
        "epoch": 41,
        "loss": 0.9623274803161621,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 10.052687644958496,
        "cur_std": 0.4902684688568115,
        "prompt": "izeUser a Java programming to model the merge sort he geometric calc problem.",
        "nll_prompt": -8.174233436584473
    },
    {
        "epoch": 42,
        "loss": 0.9350976347923279,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.351861953735352,
        "cur_std": 0.49612274169921877,
        "prompt": "izeUser a Java programming to model the merge sort he geometricCal problem.",
        "nll_prompt": -8.901752471923828
    },
    {
        "epoch": 43,
        "loss": 0.8963989019393921,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.72647762298584,
        "cur_std": 0.4633720874786377,
        "prompt": "izeUser a Java programming to model the merge sort heMetCal problem.",
        "nll_prompt": -8.741786003112793
    },
    {
        "epoch": 44,
        "loss": 0.8298952579498291,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.451746940612793,
        "cur_std": 0.4725333213806152,
        "prompt": "izeUser a Java programming to model the merge sort heMet X problem.",
        "nll_prompt": -8.88205337524414
    },
    {
        "epoch": 45,
        "loss": 0.9496875405311584,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.29131031036377,
        "cur_std": 0.4498276710510254,
        "prompt": "izeUser a Java programming to model the merge sortallaMet X problem.",
        "nll_prompt": -9.302471160888672
    },
    {
        "epoch": 46,
        "loss": 0.9101781249046326,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.201606273651123,
        "cur_std": 0.39284980297088623,
        "prompt": "izeUser a Java programming to test the merge sortallaMet X problem.",
        "nll_prompt": -9.12143325805664
    },
    {
        "epoch": 47,
        "loss": 0.8513323068618774,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.103215217590332,
        "cur_std": 0.446201753616333,
        "prompt": "izeUser a Java programming // test the merge sortallaMet X problem.",
        "nll_prompt": -10.174297332763672
    },
    {
        "epoch": 48,
        "loss": 0.9116934537887573,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.626053810119629,
        "cur_std": 0.46587252616882324,
        "prompt": "izeUser a Java programming // test the merge sortallaMet kitchen problem.",
        "nll_prompt": -10.2435302734375
    },
    {
        "epoch": 49,
        "loss": 0.950255274772644,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.82705020904541,
        "cur_std": 0.43674297332763673,
        "prompt": "izeUser a Java programming // test the merge sortallaMet42 problem.",
        "nll_prompt": -10.202472686767578
    },
    {
        "epoch": 50,
        "loss": 0.9414962530136108,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.926779747009277,
        "cur_std": 0.4529445171356201,
        "prompt": " PhilosUser a Java programming // test the merge sortallaMet42 problem.",
        "nll_prompt": -10.637815475463867
    },
    {
        "epoch": 51,
        "loss": 0.8795928955078125,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.846500396728516,
        "cur_std": 0.43074941635131836,
        "prompt": " PhilosUser a Java programming // test the merge sortalla unauthorized42 problem.",
        "nll_prompt": -10.76994514465332
    },
    {
        "epoch": 52,
        "loss": 0.8875451683998108,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.850625991821289,
        "cur_std": 0.44262042045593264,
        "prompt": "caleUser a Java programming // test the merge sortalla unauthorized42 problem.",
        "nll_prompt": -10.602593421936035
    },
    {
        "epoch": 53,
        "loss": 0.8126833438873291,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.63437271118164,
        "cur_std": 0.45443110466003417,
        "prompt": "caleUser a Java programming // test the merge sortallaage42 problem.",
        "nll_prompt": -10.19265079498291
    },
    {
        "epoch": 54,
        "loss": 0.9095278978347778,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.292914390563965,
        "cur_std": 0.4766911506652832,
        "prompt": "caleUser a Java programming // test the merge sortalla Go42 problem.",
        "nll_prompt": -10.020673751831055
    },
    {
        "epoch": 55,
        "loss": 0.8367032408714294,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.067139625549316,
        "cur_std": 0.46724281311035154,
        "prompt": "caleUser a Java programming // test the merge sortallaimage42 problem.",
        "nll_prompt": -10.262843132019043
    },
    {
        "epoch": 56,
        "loss": 0.8649390935897827,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.185352325439453,
        "cur_std": 0.44785194396972655,
        "prompt": "caleUser a Java programming // test the merge sortallaites42 problem.",
        "nll_prompt": -10.467822074890137
    },
    {
        "epoch": 57,
        "loss": 0.8575551509857178,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.806434631347656,
        "cur_std": 0.4607438564300537,
        "prompt": "caleUser a Java programming // test the merge sortallaitesas problem.",
        "nll_prompt": -10.356657028198242
    },
    {
        "epoch": 58,
        "loss": 0.915741503238678,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.271917343139648,
        "cur_std": 0.45903563499450684,
        "prompt": "cale in a Java programming // test the merge sortallaitesas problem.",
        "nll_prompt": -9.051971435546875
    },
    {
        "epoch": 59,
        "loss": 0.8057597875595093,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.101899147033691,
        "cur_std": 0.46132583618164064,
        "prompt": "cale in a Java programming // test the merge sortalla Secas problem.",
        "nll_prompt": -8.844823837280273
    },
    {
        "epoch": 60,
        "loss": 0.8779020309448242,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.605929851531982,
        "cur_std": 0.5106334686279297,
        "prompt": "cale in a Java method // test the merge sortalla Secas problem.",
        "nll_prompt": -8.27932071685791
    },
    {
        "epoch": 61,
        "loss": 0.8915261626243591,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 7.795921325683594,
        "cur_std": 0.5624502658843994,
        "prompt": "Alice in a Java method // test the merge sortalla Secas problem.",
        "nll_prompt": -8.25103759765625
    },
    {
        "epoch": 62,
        "loss": 0.8719592094421387,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 10.802313804626465,
        "cur_std": 0.5072266101837158,
        "prompt": " drib in a Java method // test the merge sortalla Secas problem.",
        "nll_prompt": -8.72708797454834
    },
    {
        "epoch": 63,
        "loss": 0.8703913688659668,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.237292289733887,
        "cur_std": 0.5018190383911133,
        "prompt": " drib in a Java method // test the merge sorteda Secas problem.",
        "nll_prompt": -8.412200927734375
    },
    {
        "epoch": 64,
        "loss": 0.9605644941329956,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.964871406555176,
        "cur_std": 0.5115706920623779,
        "prompt": " drib in a Java method // test the merge sorteda campaignas problem.",
        "nll_prompt": -8.349390029907227
    },
    {
        "epoch": 65,
        "loss": 0.8696422576904297,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 8.409793853759766,
        "cur_std": 0.5516368865966796,
        "prompt": " Lisa in a Java method // test the merge sorteda campaignas problem.",
        "nll_prompt": -8.13668155670166
    },
    {
        "epoch": 66,
        "loss": 0.945041835308075,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 10.072928428649902,
        "cur_std": 0.4904317378997803,
        "prompt": " Lisa in a integer method // test the merge sorteda campaignas problem.",
        "nll_prompt": -8.556774139404297
    },
    {
        "epoch": 67,
        "loss": 1.0436275005340576,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 12.43698787689209,
        "cur_std": 0.5344367980957031,
        "prompt": " Lisa in a integer method // test the merge sort Hamilton campaignas problem.",
        "nll_prompt": -8.246394157409668
    },
    {
        "epoch": 68,
        "loss": 1.0197352170944214,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 11.49849796295166,
        "cur_std": 0.5231938838958741,
        "prompt": " Lisa in a integer method // test the merge sort Hamilton internationallyas problem.",
        "nll_prompt": -8.662449836730957
    },
    {
        "epoch": 69,
        "loss": 1.0098820924758911,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 9.652130126953125,
        "cur_std": 0.5195311546325684,
        "prompt": " Lisa in a integer method // test the merge sort wooden internationallyas problem.",
        "nll_prompt": -8.676660537719727
    },
    {
        "epoch": 70,
        "loss": 0.959319531917572,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 11.013726234436035,
        "cur_std": 0.528996467590332,
        "prompt": " Lisa in a integer method // test the merge sort wooden internationally influential problem.",
        "nll_prompt": -8.46763801574707
    },
    {
        "epoch": 71,
        "loss": 0.9994834661483765,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 12.586074829101562,
        "cur_std": 0.5676877498626709,
        "prompt": " paragraph in a integer method // test the merge sort wooden internationally influential problem.",
        "nll_prompt": -8.170283317565918
    },
    {
        "epoch": 72,
        "loss": 1.0440200567245483,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 13.74814224243164,
        "cur_std": 0.5687386512756347,
        "prompt": " paragraph in a integer four // test the merge sort wooden internationally influential problem.",
        "nll_prompt": -8.38885498046875
    },
    {
        "epoch": 73,
        "loss": 0.9513728022575378,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 12.750762939453125,
        "cur_std": 0.5118465423583984,
        "prompt": " paragraph in a integer four // test the merge sort wooden internationally samples problem.",
        "nll_prompt": -8.52737045288086
    },
    {
        "epoch": 74,
        "loss": 1.0857806205749512,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 13.2688570022583,
        "cur_std": 0.5329285621643066,
        "prompt": " paragraph in a integer four // test the merge sort wooden internationally UK problem.",
        "nll_prompt": -8.43709659576416
    },
    {
        "epoch": 75,
        "loss": 1.017649531364441,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 12.92606258392334,
        "cur_std": 0.5321091651916504,
        "prompt": " paragraph in a integer four // test the merge sort wooden internationally romance problem.",
        "nll_prompt": -8.590167999267578
    },
    {
        "epoch": 76,
        "loss": 0.9346836805343628,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 13.779680252075195,
        "cur_std": 0.4995772361755371,
        "prompt": " paragraph in a integer four // test the merge sort wooden challenges romance problem.",
        "nll_prompt": -8.610486030578613
    },
    {
        "epoch": 77,
        "loss": 0.9768639802932739,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 12.214438438415527,
        "cur_std": 0.5288021087646484,
        "prompt": " paragraph in a integer four // test the merge sort woodenid romance problem.",
        "nll_prompt": -8.53950309753418
    },
    {
        "epoch": 78,
        "loss": 0.9005349278450012,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 12.654189109802246,
        "cur_std": 0.46852836608886717,
        "prompt": " paragraph in a Four four // test the merge sort woodenid romance problem.",
        "nll_prompt": -8.691906929016113
    },
    {
        "epoch": 79,
        "loss": 0.8767973184585571,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 14.244979858398438,
        "cur_std": 0.48891363143920896,
        "prompt": " paragraph in a Four four // test the merge sort woodenid CNN problem.",
        "nll_prompt": -8.835474014282227
    },
    {
        "epoch": 80,
        "loss": 1.0235328674316406,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 13.280427932739258,
        "cur_std": 0.4857921600341797,
        "prompt": " paragraph in a Fourulet // test the merge sort woodenid CNN problem.",
        "nll_prompt": -9.563332557678223
    },
    {
        "epoch": 81,
        "loss": 1.0421597957611084,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 14.524970054626465,
        "cur_std": 0.4909553050994873,
        "prompt": " roared in a Fourulet // test the merge sort woodenid CNN problem.",
        "nll_prompt": -10.247489929199219
    },
    {
        "epoch": 82,
        "loss": 1.086427092552185,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.506319046020508,
        "cur_std": 0.5083362102508545,
        "prompt": " roared in a Foureria // test the merge sort woodenid CNN problem.",
        "nll_prompt": -9.644048690795898
    },
    {
        "epoch": 83,
        "loss": 1.1111198663711548,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.415336608886719,
        "cur_std": 0.5025859832763672,
        "prompt": " roared in a Foureria // test the merge sort wooden tournament CNN problem.",
        "nll_prompt": -9.660246849060059
    },
    {
        "epoch": 84,
        "loss": 1.0941014289855957,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.64167594909668,
        "cur_std": 0.49384636878967286,
        "prompt": " roared in a Foureria // test the merge sortros tournament CNN problem.",
        "nll_prompt": -9.874931335449219
    },
    {
        "epoch": 85,
        "loss": 1.120829701423645,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 16.56612205505371,
        "cur_std": 0.4963394641876221,
        "prompt": " roaredsid a Foureria // test the merge sortros tournament CNN problem.",
        "nll_prompt": -10.657915115356445
    },
    {
        "epoch": 86,
        "loss": 1.0842376947402954,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.91425895690918,
        "cur_std": 0.45920472145080565,
        "prompt": " roaredsid aCaneria // test the merge sortros tournament CNN problem.",
        "nll_prompt": -10.196455001831055
    },
    {
        "epoch": 87,
        "loss": 1.0637714862823486,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.772186279296875,
        "cur_std": 0.48967437744140624,
        "prompt": " roaredsid aCaneria // test the merge sort grip tournament CNN problem.",
        "nll_prompt": -10.08823013305664
    },
    {
        "epoch": 88,
        "loss": 1.0753209590911865,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 17.02962875366211,
        "cur_std": 0.5147876739501953,
        "prompt": " roaredsid aCan inevitable // test the merge sort grip tournament CNN problem.",
        "nll_prompt": -10.717137336730957
    },
    {
        "epoch": 89,
        "loss": 1.1498712301254272,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 19.34111785888672,
        "cur_std": 0.5643162250518798,
        "prompt": " roaredsid aCan inevitable // test the merge sort grip tournament CNN used.",
        "nll_prompt": -10.60019588470459
    },
    {
        "epoch": 90,
        "loss": 1.1510498523712158,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 19.243988037109375,
        "cur_std": 0.5784200191497803,
        "prompt": " roaredsid aCan inevitable // test the merge sort grip tournament norms used.",
        "nll_prompt": -10.452113151550293
    },
    {
        "epoch": 91,
        "loss": 1.1775621175765991,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 19.802663803100586,
        "cur_std": 0.5719751358032227,
        "prompt": " roaredsid aCan water // test the merge sort grip tournament norms used.",
        "nll_prompt": -10.145991325378418
    },
    {
        "epoch": 92,
        "loss": 1.1772104501724243,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 18.062715530395508,
        "cur_std": 0.5632182121276855,
        "prompt": " roaredsid aCan water // test the merge sort grip tournament frameworks used.",
        "nll_prompt": -10.16719913482666
    },
    {
        "epoch": 93,
        "loss": 1.190963625907898,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 17.76419448852539,
        "cur_std": 0.5350302696228028,
        "prompt": " roaredael aCan water // test the merge sort grip tournament frameworks used.",
        "nll_prompt": -10.30313777923584
    },
    {
        "epoch": 94,
        "loss": 1.1235332489013672,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 16.866743087768555,
        "cur_std": 0.5069916248321533,
        "prompt": " roaredael aCan He // test the merge sort grip tournament frameworks used.",
        "nll_prompt": -10.036993026733398
    },
    {
        "epoch": 95,
        "loss": 1.054112195968628,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.036713600158691,
        "cur_std": 0.48823013305664065,
        "prompt": " roaredael aCan He // test the merge sort grip tournament frameworks functionality.",
        "nll_prompt": -10.014357566833496
    },
    {
        "epoch": 96,
        "loss": 1.0464247465133667,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.154630661010742,
        "cur_std": 0.48563265800476074,
        "prompt": " roaredael aCan He // test the merge sort � tournament frameworks functionality.",
        "nll_prompt": -10.36497688293457
    },
    {
        "epoch": 97,
        "loss": 1.098038911819458,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.5963716506958,
        "cur_std": 0.5026791572570801,
        "prompt": " roaredael a Matrix He // test the merge sort � tournament frameworks functionality.",
        "nll_prompt": -10.334564208984375
    },
    {
        "epoch": 98,
        "loss": 1.1032434701919556,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 16.15810203552246,
        "cur_std": 0.4764272689819336,
        "prompt": " roaredael < Matrix He // test the merge sort � tournament frameworks functionality.",
        "nll_prompt": -10.79091739654541
    },
    {
        "epoch": 99,
        "loss": 1.1254236698150635,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 16.095304489135742,
        "cur_std": 0.5017869472503662,
        "prompt": " roared feud < Matrix He // test the merge sort � tournament frameworks functionality.",
        "nll_prompt": -11.02896785736084
    },
    {
        "epoch": 100,
        "loss": 1.0782876014709473,
        "best_loss": 0.7585716247558594,
        "best_kl": 5.156880855560303,
        "best_std": 0.28243091106414797,
        "cur_kl": 15.98954963684082,
        "cur_std": 0.481721830368042,
        "prompt": "ling feud < Matrix He // test the merge sort � tournament frameworks functionality.",
        "nll_prompt": -10.42568302154541
    }
]