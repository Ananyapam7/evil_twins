[
    {
        "epoch": 1,
        "loss": 2.061227560043335,
        "best_loss": 2.061227560043335,
        "best_kl": 21.030057907104492,
        "best_std": 0.9748371124267579,
        "cur_kl": 21.030057907104492,
        "cur_std": 0.9748371124267579,
        "prompt": "Prompt: Write a Python function that takes a string as an argument'.\"",
        "nll_prompt": -3.0310680866241455
    },
    {
        "epoch": 2,
        "loss": 1.7475101947784424,
        "best_loss": 1.7475101947784424,
        "best_kl": 21.030057907104492,
        "best_std": 0.9748371124267579,
        "cur_kl": 21.30667495727539,
        "cur_std": 1.0257725715637207,
        "prompt": " Ekpt: Write a Python function that takes a string as an argument'.\"",
        "nll_prompt": -4.277414321899414
    },
    {
        "epoch": 3,
        "loss": 1.8991366624832153,
        "best_loss": 1.7475101947784424,
        "best_kl": 20.283849716186523,
        "best_std": 0.9980017662048339,
        "cur_kl": 20.283849716186523,
        "cur_std": 0.9980017662048339,
        "prompt": " Sentpt: Write a Python function that takes a string as an argument'.\"",
        "nll_prompt": -4.468954563140869
    },
    {
        "epoch": 4,
        "loss": 1.799882411956787,
        "best_loss": 1.7475101947784424,
        "best_kl": 20.169063568115234,
        "best_std": 1.0102171897888184,
        "cur_kl": 20.169063568115234,
        "cur_std": 1.0102171897888184,
        "prompt": " Sentpt� Write a Python function that takes a string as an argument'.\"",
        "nll_prompt": -6.099769592285156
    },
    {
        "epoch": 5,
        "loss": 1.8887696266174316,
        "best_loss": 1.7475101947784424,
        "best_kl": 20.169063568115234,
        "best_std": 1.0102171897888184,
        "cur_kl": 20.384145736694336,
        "cur_std": 0.9960185050964355,
        "prompt": " Registrationpt� Write a Python function that takes a string as an argument'.\"",
        "nll_prompt": -5.945254802703857
    },
    {
        "epoch": 6,
        "loss": 1.914948582649231,
        "best_loss": 1.7475101947784424,
        "best_kl": 18.195703506469727,
        "best_std": 0.9159715652465821,
        "cur_kl": 18.195703506469727,
        "cur_std": 0.9159715652465821,
        "prompt": " Registrationpt� Write a Python function that takes a string as an argumentze",
        "nll_prompt": -5.849830627441406
    },
    {
        "epoch": 7,
        "loss": 1.5289024114608765,
        "best_loss": 1.5289024114608765,
        "best_kl": 18.10767364501953,
        "best_std": 0.8896416664123535,
        "cur_kl": 18.10767364501953,
        "cur_std": 0.8896416664123535,
        "prompt": " Registrationptip Write a Python function that takes a string as an argumentze",
        "nll_prompt": -5.198171138763428
    },
    {
        "epoch": 8,
        "loss": 1.5122061967849731,
        "best_loss": 1.5122061967849731,
        "best_kl": 18.10767364501953,
        "best_std": 0.8896416664123535,
        "cur_kl": 19.621118545532227,
        "cur_std": 0.9880680084228516,
        "prompt": " Registrationptip Write a Python function that takes a string as an argument Ralph",
        "nll_prompt": -5.099399089813232
    },
    {
        "epoch": 9,
        "loss": 1.6506339311599731,
        "best_loss": 1.5122061967849731,
        "best_kl": 18.10767364501953,
        "best_std": 0.8896416664123535,
        "cur_kl": 19.513866424560547,
        "cur_std": 0.9592281341552734,
        "prompt": " Registrationlandip Write a Python function that takes a string as an argument Ralph",
        "nll_prompt": -5.529842853546143
    },
    {
        "epoch": 10,
        "loss": 1.8885256052017212,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.971221923828125,
        "best_std": 0.8752734184265136,
        "cur_kl": 17.971221923828125,
        "cur_std": 0.8752734184265136,
        "prompt": " Registrationlandip Write a Python function that takes a string as an argumentdn",
        "nll_prompt": -5.555511951446533
    },
    {
        "epoch": 11,
        "loss": 1.9043633937835693,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.069866180419922,
        "cur_std": 0.8761662483215332,
        "prompt": " Registration Kimmelip Write a Python function that takes a string as an argumentdn",
        "nll_prompt": -6.052892208099365
    },
    {
        "epoch": 12,
        "loss": 1.7573574781417847,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.092105865478516,
        "cur_std": 0.9073935508728027,
        "prompt": " explains Kimmelip Write a Python function that takes a string as an argumentdn",
        "nll_prompt": -6.481477737426758
    },
    {
        "epoch": 13,
        "loss": 1.858852505683899,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.91562271118164,
        "cur_std": 0.9183951377868652,
        "prompt": " explainswbip Write a Python function that takes a string as an argumentdn",
        "nll_prompt": -5.457558631896973
    },
    {
        "epoch": 14,
        "loss": 1.868526816368103,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.151945114135742,
        "cur_std": 0.8709260940551757,
        "prompt": " keenwbip Write a Python function that takes a string as an argumentdn",
        "nll_prompt": -5.5689873695373535
    },
    {
        "epoch": 15,
        "loss": 1.7859100103378296,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 18.426198959350586,
        "cur_std": 0.8766079902648926,
        "prompt": " keenwb only Write a Python function that takes a string as an argumentdn",
        "nll_prompt": -5.803678512573242
    },
    {
        "epoch": 16,
        "loss": 1.9066598415374756,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 20.794261932373047,
        "cur_std": 0.9118194580078125,
        "prompt": " keenwb only Write a Python function that takes a string as an Althoughdn",
        "nll_prompt": -6.758095741271973
    },
    {
        "epoch": 17,
        "loss": 1.891856074333191,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 20.570465087890625,
        "cur_std": 0.9200271606445313,
        "prompt": " keenwb impact Write a Python function that takes a string as an Althoughdn",
        "nll_prompt": -7.010983943939209
    },
    {
        "epoch": 18,
        "loss": 1.8487859964370728,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 18.426576614379883,
        "cur_std": 0.9097225189208984,
        "prompt": " keen their impact Write a Python function that takes a string as an Althoughdn",
        "nll_prompt": -6.44411563873291
    },
    {
        "epoch": 19,
        "loss": 1.944796085357666,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 19.7559814453125,
        "cur_std": 0.9323521614074707,
        "prompt": " keen their impact No a Python function that takes a string as an Althoughdn",
        "nll_prompt": -7.4213175773620605
    },
    {
        "epoch": 20,
        "loss": 1.7489060163497925,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.692224502563477,
        "cur_std": 0.9289022445678711,
        "prompt": " explain their impact No a Python function that takes a string as an Althoughdn",
        "nll_prompt": -6.40961217880249
    },
    {
        "epoch": 21,
        "loss": 1.8374502658843994,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.954139709472656,
        "cur_std": 0.8973658561706543,
        "prompt": " explain their impact Of a Python function that takes a string as an Althoughdn",
        "nll_prompt": -6.76418399810791
    },
    {
        "epoch": 22,
        "loss": 1.945308804512024,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 19.120004653930664,
        "cur_std": 0.8814678192138672,
        "prompt": " explain their impact Of a Python function that takes a string launched an Althoughdn",
        "nll_prompt": -7.878601551055908
    },
    {
        "epoch": 23,
        "loss": 2.0692670345306396,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 20.85902976989746,
        "cur_std": 0.9325991630554199,
        "prompt": " explain their impact Of a Python function that takes a string launched an Although topic",
        "nll_prompt": -7.421014308929443
    },
    {
        "epoch": 24,
        "loss": 1.8390908241271973,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 20.877470016479492,
        "cur_std": 0.9331565856933594,
        "prompt": " explain their impact Of a Python function that takes a stringian an Although topic",
        "nll_prompt": -7.570374011993408
    },
    {
        "epoch": 25,
        "loss": 1.8084102869033813,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 20.12738037109375,
        "cur_std": 0.8949492454528809,
        "prompt": " explain their impact Of a Python function that takes a stringian an Althoughet",
        "nll_prompt": -7.856089115142822
    },
    {
        "epoch": 26,
        "loss": 1.6979323625564575,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 19.649860382080078,
        "cur_std": 0.9093017578125,
        "prompt": " Samsung their impact Of a Python function that takes a stringian an Althoughet",
        "nll_prompt": -8.296789169311523
    },
    {
        "epoch": 27,
        "loss": 1.8977570533752441,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 18.392436981201172,
        "cur_std": 0.9111516952514649,
        "prompt": " Samsung their impact Of a Python function that takes a stringian anFaret",
        "nll_prompt": -8.142276763916016
    },
    {
        "epoch": 28,
        "loss": 1.8189562559127808,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 18.38970947265625,
        "cur_std": 0.8530830383300781,
        "prompt": " Samsung 40 impact Of a Python function that takes a stringian anFaret",
        "nll_prompt": -8.20040225982666
    },
    {
        "epoch": 29,
        "loss": 1.779430627822876,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 19.139846801757812,
        "cur_std": 0.9275381088256835,
        "prompt": " Samsung 40 impact She a Python function that takes a stringian anFaret",
        "nll_prompt": -8.647356986999512
    },
    {
        "epoch": 30,
        "loss": 1.796724557876587,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 18.124296188354492,
        "cur_std": 0.8360768318176269,
        "prompt": " Samsung 40 impact She a Python function that takes a stringianUPFaret",
        "nll_prompt": -9.059552192687988
    },
    {
        "epoch": 31,
        "loss": 1.7294964790344238,
        "best_loss": 1.5122061967849731,
        "best_kl": 17.069866180419922,
        "best_std": 0.8761662483215332,
        "cur_kl": 17.360105514526367,
        "cur_std": 0.8186369895935058,
        "prompt": " Samsung 40 impact She a Python function that takes a string�UPFaret",
        "nll_prompt": -9.284412384033203
    },
    {
        "epoch": 32,
        "loss": 1.9613386392593384,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 16.94472885131836,
        "cur_std": 0.7938109874725342,
        "prompt": " Samsung 40 impact She how Python function that takes a string�UPFaret",
        "nll_prompt": -10.037036895751953
    },
    {
        "epoch": 33,
        "loss": 1.7891868352890015,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 17.397573471069336,
        "cur_std": 0.8270077705383301,
        "prompt": " Samsungath impact She how Python function that takes a string�UPFaret",
        "nll_prompt": -10.301292419433594
    },
    {
        "epoch": 34,
        "loss": 1.8659261465072632,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.249921798706055,
        "cur_std": 0.8410041809082032,
        "prompt": " Samsungath impact She how Python function that takes a string�UP printet",
        "nll_prompt": -9.914474487304688
    },
    {
        "epoch": 35,
        "loss": 1.872550129890442,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.97157096862793,
        "cur_std": 0.8758338928222656,
        "prompt": " Samsungath impact value how Python function that takes a string�UP printet",
        "nll_prompt": -9.87410831451416
    },
    {
        "epoch": 36,
        "loss": 2.0529942512512207,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.78404426574707,
        "cur_std": 0.9055194854736328,
        "prompt": " Samsungath Mig value how Python function that takes a string�UP printet",
        "nll_prompt": -9.400341987609863
    },
    {
        "epoch": 37,
        "loss": 2.008025884628296,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.24873924255371,
        "cur_std": 0.9083970069885254,
        "prompt": " Samsung Plato Mig value how Python function that takes a string�UP printet",
        "nll_prompt": -9.872302055358887
    },
    {
        "epoch": 38,
        "loss": 2.0359272956848145,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.59481430053711,
        "cur_std": 0.9296242713928222,
        "prompt": " Samsung Plato Mig value NAFTA Python function that takes a string�UP printet",
        "nll_prompt": -10.967442512512207
    },
    {
        "epoch": 39,
        "loss": 1.9630998373031616,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.666208267211914,
        "cur_std": 0.8940582275390625,
        "prompt": " Samsung Plato Migl NAFTA Python function that takes a string�UP printet",
        "nll_prompt": -10.232970237731934
    },
    {
        "epoch": 40,
        "loss": 1.8284891843795776,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.628664016723633,
        "cur_std": 0.9069112777709961,
        "prompt": " Samsung Plato MigBL NAFTA Python function that takes a string�UP printet",
        "nll_prompt": -11.146998405456543
    },
    {
        "epoch": 41,
        "loss": 1.9763308763504028,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.62911033630371,
        "cur_std": 0.8856387138366699,
        "prompt": " Samsung Plato MartBL NAFTA Python function that takes a string�UP printet",
        "nll_prompt": -10.789441108703613
    },
    {
        "epoch": 42,
        "loss": 1.9309577941894531,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.779937744140625,
        "cur_std": 0.8946452140808105,
        "prompt": " Samsung Plato MartBL x Python function that takes a string�UP printet",
        "nll_prompt": -10.041637420654297
    },
    {
        "epoch": 43,
        "loss": 1.9432843923568726,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.406789779663086,
        "cur_std": 0.8829171180725097,
        "prompt": " Samsung Plato Martees x Python function that takes a string�UP printet",
        "nll_prompt": -9.420209884643555
    },
    {
        "epoch": 44,
        "loss": 1.9194549322128296,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.93172836303711,
        "cur_std": 0.8581542015075684,
        "prompt": " Samsung Plato Martees x Python function that takes aac�UP printet",
        "nll_prompt": -10.689213752746582
    },
    {
        "epoch": 45,
        "loss": 1.7895046472549438,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.330934524536133,
        "cur_std": 0.8709794998168945,
        "prompt": " brackets Plato Martees x Python function that takes aac�UP printet",
        "nll_prompt": -11.10330867767334
    },
    {
        "epoch": 46,
        "loss": 1.913684606552124,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.722639083862305,
        "cur_std": 0.8527297019958496,
        "prompt": " brackets Plato Martees Use Python function that takes aac�UP printet",
        "nll_prompt": -10.686163902282715
    },
    {
        "epoch": 47,
        "loss": 1.8869446516036987,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.126745223999023,
        "cur_std": 0.8961026191711425,
        "prompt": " brackets Plato Martees Use Python function that takes aac�z printet",
        "nll_prompt": -10.133173942565918
    },
    {
        "epoch": 48,
        "loss": 1.9493316411972046,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.070758819580078,
        "cur_std": 0.9226555824279785,
        "prompt": " brackets Plato Martees Use Python function that takes aacedz printet",
        "nll_prompt": -9.80562686920166
    },
    {
        "epoch": 49,
        "loss": 1.8483110666275024,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.255956649780273,
        "cur_std": 0.9214529991149902,
        "prompt": " brackets Plato Mart forwards Use Python function that takes aacedz printet",
        "nll_prompt": -10.396668434143066
    },
    {
        "epoch": 50,
        "loss": 1.9768742322921753,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.04473304748535,
        "cur_std": 0.9005252838134765,
        "prompt": " brackets likes Mart forwards Use Python function that takes aacedz printet",
        "nll_prompt": -10.355738639831543
    },
    {
        "epoch": 51,
        "loss": 1.760096549987793,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.183456420898438,
        "cur_std": 0.8883095741271972,
        "prompt": " bracketsging Mart forwards Use Python function that takes aacedz printet",
        "nll_prompt": -10.723454475402832
    },
    {
        "epoch": 52,
        "loss": 1.9483451843261719,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.906450271606445,
        "cur_std": 0.8835927963256835,
        "prompt": " bracketsging recovery forwards Use Python function that takes aacedz printet",
        "nll_prompt": -10.414640426635742
    },
    {
        "epoch": 53,
        "loss": 1.9574391841888428,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.13768196105957,
        "cur_std": 0.8770330429077149,
        "prompt": " bracketsging ear forwards Use Python function that takes aacedz printet",
        "nll_prompt": -10.453526496887207
    },
    {
        "epoch": 54,
        "loss": 1.7138704061508179,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.11727523803711,
        "cur_std": 0.885129165649414,
        "prompt": " bracketsging ear forwards Use Python function that takes aacedz printnee",
        "nll_prompt": -10.846662521362305
    },
    {
        "epoch": 55,
        "loss": 1.69569730758667,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.285661697387695,
        "cur_std": 0.9014057159423828,
        "prompt": " brging ear forwards Use Python function that takes aacedz printnee",
        "nll_prompt": -10.05692195892334
    },
    {
        "epoch": 56,
        "loss": 1.7962548732757568,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.008710861206055,
        "cur_std": 0.874299430847168,
        "prompt": " brging ear forwards Use Python function that takes aacnz printnee",
        "nll_prompt": -9.427202224731445
    },
    {
        "epoch": 57,
        "loss": 1.72810697555542,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.38824462890625,
        "cur_std": 0.8958505630493164,
        "prompt": " brging ear forwardsC Python function that takes aacnz printnee",
        "nll_prompt": -9.309274673461914
    },
    {
        "epoch": 58,
        "loss": 1.9269458055496216,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.67635154724121,
        "cur_std": 0.9124652862548828,
        "prompt": " brging ear forwardsC Python function that takes autationsnz printnee",
        "nll_prompt": -9.72635555267334
    },
    {
        "epoch": 59,
        "loss": 1.772308349609375,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.10462760925293,
        "cur_std": 0.9154780387878418,
        "prompt": " br You ear forwardsC Python function that takes autationsnz printnee",
        "nll_prompt": -9.987611770629883
    },
    {
        "epoch": 60,
        "loss": 2.0533509254455566,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.425395965576172,
        "cur_std": 0.9140115737915039,
        "prompt": " br You ear forwardsC Python function that takes autationsnymes printnee",
        "nll_prompt": -10.331024169921875
    },
    {
        "epoch": 61,
        "loss": 1.6023859977722168,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.164342880249023,
        "cur_std": 0.8973803520202637,
        "prompt": " br You Jacques forwardsC Python function that takes autationsnymes printnee",
        "nll_prompt": -10.953869819641113
    },
    {
        "epoch": 62,
        "loss": 1.8989958763122559,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.964717864990234,
        "cur_std": 0.8941139221191406,
        "prompt": "supported You Jacques forwardsC Python function that takes autationsnymes printnee",
        "nll_prompt": -10.919172286987305
    },
    {
        "epoch": 63,
        "loss": 1.7432307004928589,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.087228775024414,
        "cur_std": 0.9029328346252441,
        "prompt": "supported You Jacques forwards4 Python function that takes autationsnymes printnee",
        "nll_prompt": -10.387787818908691
    },
    {
        "epoch": 64,
        "loss": 1.8472251892089844,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.162700653076172,
        "cur_std": 0.8781689643859864,
        "prompt": "supported You endpoint forwards4 Python function that takes autationsnymes printnee",
        "nll_prompt": -9.911269187927246
    },
    {
        "epoch": 65,
        "loss": 1.8328179121017456,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.516550064086914,
        "cur_std": 0.9166622161865234,
        "prompt": "supported You endpoint forwards4 Python function that takes autationsnymes print Maria",
        "nll_prompt": -9.929686546325684
    },
    {
        "epoch": 66,
        "loss": 1.8506619930267334,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.68227195739746,
        "cur_std": 0.9164873123168945,
        "prompt": "supported You endpoint forwards4 Python function about takes autationsnymes print Maria",
        "nll_prompt": -10.826909065246582
    },
    {
        "epoch": 67,
        "loss": 1.6512964963912964,
        "best_loss": 1.5122061967849731,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.86070442199707,
        "cur_std": 0.9107881546020508,
        "prompt": " Express You endpoint forwards4 Python function about takes autationsnymes print Maria",
        "nll_prompt": -11.252345085144043
    },
    {
        "epoch": 68,
        "loss": 1.486077904701233,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.62551498413086,
        "cur_std": 0.8979669570922851,
        "prompt": " Express You endpoint forwards4 Python function aboutating autationsnymes print Maria",
        "nll_prompt": -11.645475387573242
    },
    {
        "epoch": 69,
        "loss": 1.8790035247802734,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.755096435546875,
        "cur_std": 0.8589544296264648,
        "prompt": " Express You endpoint forwards4 Python function aboutating autationsnymes print make",
        "nll_prompt": -11.29923152923584
    },
    {
        "epoch": 70,
        "loss": 1.657600998878479,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.12325096130371,
        "cur_std": 0.8394171714782714,
        "prompt": " Express You endpoint forwards4 Python function aboutating autationsnymesch make",
        "nll_prompt": -11.438929557800293
    },
    {
        "epoch": 71,
        "loss": 1.773693561553955,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.855487823486328,
        "cur_std": 0.847350788116455,
        "prompt": " Express You endpoint forwards4 Python function aboutating autationsn elegantch make",
        "nll_prompt": -11.037005424499512
    },
    {
        "epoch": 72,
        "loss": 1.7934277057647705,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.44917869567871,
        "cur_std": 0.9035078048706054,
        "prompt": " creativity You endpoint forwards4 Python function aboutating autationsn elegantch make",
        "nll_prompt": -11.210533142089844
    },
    {
        "epoch": 73,
        "loss": 1.6424367427825928,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.637617111206055,
        "cur_std": 0.9320585250854492,
        "prompt": " creativity You endpoint forwards4 Python function aboutating autationslets elegantch make",
        "nll_prompt": -11.871397018432617
    },
    {
        "epoch": 74,
        "loss": 1.7359445095062256,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 21.32941436767578,
        "cur_std": 0.9487756729125977,
        "prompt": " creativity You endpoint wireless4 Python function aboutating autationslets elegantch make",
        "nll_prompt": -11.798795700073242
    },
    {
        "epoch": 75,
        "loss": 1.800721287727356,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.779081344604492,
        "cur_std": 0.9530472755432129,
        "prompt": " creativity You endpoint wireless negative Python function aboutating autationslets elegantch make",
        "nll_prompt": -11.496729850769043
    },
    {
        "epoch": 76,
        "loss": 1.930113434791565,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.742319107055664,
        "cur_std": 0.9552966117858886,
        "prompt": " creativity You endpoint Nile negative Python function aboutating autationslets elegantch make",
        "nll_prompt": -11.542926788330078
    },
    {
        "epoch": 77,
        "loss": 1.932037115097046,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.48808479309082,
        "cur_std": 0.9433176040649414,
        "prompt": " creativity You endpoint Nile negative Python function aboutating autationslets elegantchsmith",
        "nll_prompt": -11.461454391479492
    },
    {
        "epoch": 78,
        "loss": 1.9131346940994263,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.63947296142578,
        "cur_std": 0.9293486595153808,
        "prompt": " creativity You endpoint Nileadv Python function aboutating autationslets elegantchsmith",
        "nll_prompt": -11.83204174041748
    },
    {
        "epoch": 79,
        "loss": 1.7383860349655151,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.548656463623047,
        "cur_std": 0.931089973449707,
        "prompt": " creativity You endpoint Nileadv Python function aboutating aasklets elegantchsmith",
        "nll_prompt": -11.728611946105957
    },
    {
        "epoch": 80,
        "loss": 1.8581860065460205,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.641464233398438,
        "cur_std": 0.9304245948791504,
        "prompt": " creativity You endpoint Nileadv Python function catsating aasklets elegantchsmith",
        "nll_prompt": -11.799408912658691
    },
    {
        "epoch": 81,
        "loss": 1.8747539520263672,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.19896125793457,
        "cur_std": 0.9217078208923339,
        "prompt": " creativity You endpoint Nileadv Python function catsating aclets elegantchsmith",
        "nll_prompt": -11.448875427246094
    },
    {
        "epoch": 82,
        "loss": 2.0051045417785645,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.245851516723633,
        "cur_std": 0.9470989227294921,
        "prompt": " creativity You endpoint Nileadv Python function catsating a mufflets elegantchsmith",
        "nll_prompt": -11.68378734588623
    },
    {
        "epoch": 83,
        "loss": 1.8851330280303955,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.37553596496582,
        "cur_std": 0.9100545883178711,
        "prompt": " creativity You endpoint Nileadv Python function catsating a muff; elegantchsmith",
        "nll_prompt": -11.728971481323242
    },
    {
        "epoch": 84,
        "loss": 1.6686211824417114,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.558923721313477,
        "cur_std": 0.8913962364196777,
        "prompt": " creativity You endpoint Nileadv Python function Dueating a muff; elegantchsmith",
        "nll_prompt": -11.91218376159668
    },
    {
        "epoch": 85,
        "loss": 1.8930050134658813,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 18.99396514892578,
        "cur_std": 0.8938053131103516,
        "prompt": " creativity You sort Nileadv Python function Dueating a muff; elegantchsmith",
        "nll_prompt": -12.112483978271484
    },
    {
        "epoch": 86,
        "loss": 1.8667218685150146,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.35209846496582,
        "cur_std": 0.9464540481567383,
        "prompt": " creativity You sortfeatureadv Python function Dueating a muff; elegantchsmith",
        "nll_prompt": -11.951390266418457
    },
    {
        "epoch": 87,
        "loss": 1.9389631748199463,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.51706886291504,
        "cur_std": 0.9258747100830078,
        "prompt": " boat You sortfeatureadv Python function Dueating a muff; elegantchsmith",
        "nll_prompt": -11.43193244934082
    },
    {
        "epoch": 88,
        "loss": 1.893880844116211,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.491619110107422,
        "cur_std": 0.9443013191223144,
        "prompt": " boat You sortfeatureadv Python function Dueating a muffah elegantchsmith",
        "nll_prompt": -11.408573150634766
    },
    {
        "epoch": 89,
        "loss": 1.859631896018982,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.043621063232422,
        "cur_std": 0.9280919075012207,
        "prompt": " boat You sortfeatureadv Python function Dueating a muffah elegantrsmith",
        "nll_prompt": -11.392949104309082
    },
    {
        "epoch": 90,
        "loss": 1.999549388885498,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.725902557373047,
        "cur_std": 0.9188849449157714,
        "prompt": " boat You sortfeatureadv Python function Dueating a muffah elegant rssmith",
        "nll_prompt": -11.877826690673828
    },
    {
        "epoch": 91,
        "loss": 1.8592077493667603,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.673656463623047,
        "cur_std": 0.97462158203125,
        "prompt": " boat You sortfeatureadv Python function Dueating quick muffah elegant rssmith",
        "nll_prompt": -12.509034156799316
    },
    {
        "epoch": 92,
        "loss": 1.8494826555252075,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 21.20863914489746,
        "cur_std": 0.9952897071838379,
        "prompt": " boat You sortfeature     Python function Dueating quick muffah elegant rssmith",
        "nll_prompt": -12.348442077636719
    },
    {
        "epoch": 93,
        "loss": 1.9824820756912231,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.039997100830078,
        "cur_std": 0.9253120422363281,
        "prompt": " boat You sortfeature     Python function Dueating Your muffah elegant rssmith",
        "nll_prompt": -12.264240264892578
    },
    {
        "epoch": 94,
        "loss": 1.9417405128479004,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.032840728759766,
        "cur_std": 0.928254222869873,
        "prompt": " boat You sortfeature     Python function Dueating Your muff care elegant rssmith",
        "nll_prompt": -12.333592414855957
    },
    {
        "epoch": 95,
        "loss": 2.0010223388671875,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.020288467407227,
        "cur_std": 0.9069543838500976,
        "prompt": " boat You sortfeature     Python function Dueating Your Pierre care elegant rssmith",
        "nll_prompt": -12.420018196105957
    },
    {
        "epoch": 96,
        "loss": 1.9510656595230103,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.5332088470459,
        "cur_std": 0.9115137100219727,
        "prompt": " boat You Insidefeature     Python function Dueating Your Pierre care elegant rssmith",
        "nll_prompt": -12.784676551818848
    },
    {
        "epoch": 97,
        "loss": 1.8903141021728516,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 19.8117618560791,
        "cur_std": 0.9296916007995606,
        "prompt": " boat You Insidefeature     Python function Dueating Your purse care elegant rssmith",
        "nll_prompt": -12.295429229736328
    },
    {
        "epoch": 98,
        "loss": 1.8321950435638428,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.624711990356445,
        "cur_std": 0.9495138168334961,
        "prompt": " boat You Insidefeature     Python function Dueating Your purse unless elegant rssmith",
        "nll_prompt": -12.415971755981445
    },
    {
        "epoch": 99,
        "loss": 1.8995755910873413,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 21.490131378173828,
        "cur_std": 0.9565088272094726,
        "prompt": " boat You Insidefeature of Python function Dueating Your purse unless elegant rssmith",
        "nll_prompt": -11.705015182495117
    },
    {
        "epoch": 100,
        "loss": 1.8204686641693115,
        "best_loss": 1.486077904701233,
        "best_kl": 16.94472885131836,
        "best_std": 0.7938109874725342,
        "cur_kl": 20.39814567565918,
        "cur_std": 0.9447111129760742,
        "prompt": " boat You Insidefeature Bott Python function Dueating Your purse unless elegant rssmith",
        "nll_prompt": -12.314191818237305
    }
]