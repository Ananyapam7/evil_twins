[
    {
        "epoch": 1,
        "loss": 2.649705410003662,
        "best_loss": 2.649705410003662,
        "best_kl": 27.12506866455078,
        "best_std": 0.8997071266174317,
        "cur_kl": 27.12506866455078,
        "cur_std": 0.8997071266174317,
        "prompt": "\"Write a Python function that takes a string as an argument and returns\t\t\t\t\t",
        "nll_prompt": -2.8982677459716797
    },
    {
        "epoch": 2,
        "loss": 2.4530446529388428,
        "best_loss": 2.4530446529388428,
        "best_kl": 23.26827621459961,
        "best_std": 0.9249114990234375,
        "cur_kl": 23.26827621459961,
        "cur_std": 0.9249114990234375,
        "prompt": "\"Write a Python function that takes a string as an argument and returnsWith",
        "nll_prompt": -2.9789042472839355
    },
    {
        "epoch": 3,
        "loss": 2.3647313117980957,
        "best_loss": 2.3647313117980957,
        "best_kl": 20.120275497436523,
        "best_std": 0.8834758758544922,
        "cur_kl": 20.120275497436523,
        "cur_std": 0.8834758758544922,
        "prompt": "\"Write a Python function that takes a string as an argument and returnsky",
        "nll_prompt": -2.9027323722839355
    },
    {
        "epoch": 4,
        "loss": 2.5074806213378906,
        "best_loss": 2.3647313117980957,
        "best_kl": 19.94318962097168,
        "best_std": 0.8635570526123046,
        "cur_kl": 19.94318962097168,
        "cur_std": 0.8635570526123046,
        "prompt": "\"Write a Python function that takes a string as an argument Not returnsky",
        "nll_prompt": -4.7375054359436035
    },
    {
        "epoch": 5,
        "loss": 2.5868539810180664,
        "best_loss": 2.3647313117980957,
        "best_kl": 19.94318962097168,
        "best_std": 0.8635570526123046,
        "cur_kl": 20.412118911743164,
        "cur_std": 0.8780292510986328,
        "prompt": "\"Write a Python function that takes a string as an argumentmatically returnsky",
        "nll_prompt": -4.813253402709961
    },
    {
        "epoch": 6,
        "loss": 2.5308024883270264,
        "best_loss": 2.3647313117980957,
        "best_kl": 18.910137176513672,
        "best_std": 0.9143978118896484,
        "cur_kl": 18.910137176513672,
        "cur_std": 0.9143978118896484,
        "prompt": "\"Write a Python function that takes a string as an argumentumeric returnsky",
        "nll_prompt": -4.906993865966797
    },
    {
        "epoch": 7,
        "loss": 2.206057548522949,
        "best_loss": 2.206057548522949,
        "best_kl": 18.910137176513672,
        "best_std": 0.9143978118896484,
        "cur_kl": 19.318035125732422,
        "cur_std": 0.9142315864562989,
        "prompt": "\"Write a Python function that takes a string as an argumentumeric returnsize",
        "nll_prompt": -4.605654716491699
    },
    {
        "epoch": 8,
        "loss": 2.3070716857910156,
        "best_loss": 2.206057548522949,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 18.52537727355957,
        "cur_std": 0.8626511573791504,
        "prompt": " CSWrite a Python function that takes a string as an argumentumeric returnsize",
        "nll_prompt": -5.529318809509277
    },
    {
        "epoch": 9,
        "loss": 2.3944520950317383,
        "best_loss": 2.206057548522949,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.18838882446289,
        "cur_std": 0.87710599899292,
        "prompt": " CSWrite a Python function that takes a string curious an argumentumeric returnsize",
        "nll_prompt": -7.340358734130859
    },
    {
        "epoch": 10,
        "loss": 2.3945980072021484,
        "best_loss": 2.206057548522949,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.21690559387207,
        "cur_std": 1.0348998069763184,
        "prompt": " CSWrite a Python function that takes a string curious an argumentumeric returns–",
        "nll_prompt": -7.382769584655762
    },
    {
        "epoch": 11,
        "loss": 2.4336280822753906,
        "best_loss": 2.206057548522949,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.86295509338379,
        "cur_std": 1.035027027130127,
        "prompt": " CSWrite One Python function that takes a string curious an argumentumeric returns–",
        "nll_prompt": -8.516890525817871
    },
    {
        "epoch": 12,
        "loss": 2.344013214111328,
        "best_loss": 2.206057548522949,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.7153263092041,
        "cur_std": 1.0281935691833497,
        "prompt": " CSWrite One Python function that market a string curious an argumentumeric returns–",
        "nll_prompt": -9.647979736328125
    },
    {
        "epoch": 13,
        "loss": 2.194695472717285,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.272714614868164,
        "cur_std": 1.0484455108642579,
        "prompt": " CSWrite One Python function that cruiser a string curious an argumentumeric returns–",
        "nll_prompt": -9.807501792907715
    },
    {
        "epoch": 14,
        "loss": 2.2877135276794434,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.349002838134766,
        "cur_std": 0.9846059799194335,
        "prompt": " CSWrite One Python function that cruiser a string curious an argumentumeric returnsance",
        "nll_prompt": -9.933618545532227
    },
    {
        "epoch": 15,
        "loss": 2.4519619941711426,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.491743087768555,
        "cur_std": 1.0043027877807618,
        "prompt": "20Write One Python function that cruiser a string curious an argumentumeric returnsance",
        "nll_prompt": -9.50435733795166
    },
    {
        "epoch": 16,
        "loss": 2.426042079925537,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 21.063579559326172,
        "cur_std": 0.9939613342285156,
        "prompt": "20Write One Python function that cruiser a string curioustha argumentumeric returnsance",
        "nll_prompt": -10.345487594604492
    },
    {
        "epoch": 17,
        "loss": 2.3194737434387207,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.399648666381836,
        "cur_std": 0.962861442565918,
        "prompt": "20Write One Python function that cruiser health string curioustha argumentumeric returnsance",
        "nll_prompt": -11.409961700439453
    },
    {
        "epoch": 18,
        "loss": 2.452241897583008,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.1238956451416,
        "cur_std": 0.9858001708984375,
        "prompt": "20Write One Python function that cruiser health string shtha argumentumeric returnsance",
        "nll_prompt": -11.087531089782715
    },
    {
        "epoch": 19,
        "loss": 2.35502290725708,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.232160568237305,
        "cur_std": 0.9903788566589355,
        "prompt": "20Write One Python function that cruiser device string shtha argumentumeric returnsance",
        "nll_prompt": -10.734197616577148
    },
    {
        "epoch": 20,
        "loss": 2.2358052730560303,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.559242248535156,
        "cur_std": 0.9987534523010254,
        "prompt": "20 name One Python function that cruiser device string shtha argumentumeric returnsance",
        "nll_prompt": -11.124608039855957
    },
    {
        "epoch": 21,
        "loss": 2.2977044582366943,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 19.82576560974121,
        "cur_std": 0.9326957702636719,
        "prompt": "20 name One Python function that cruiser device string shtha argumentumeric returnsProgram",
        "nll_prompt": -11.273045539855957
    },
    {
        "epoch": 22,
        "loss": 2.3466618061065674,
        "best_loss": 2.194695472717285,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 19.75728988647461,
        "cur_std": 0.9031000137329102,
        "prompt": "20 name One Python function that cruiser device string sh QU argumentumeric returnsProgram",
        "nll_prompt": -11.343165397644043
    },
    {
        "epoch": 23,
        "loss": 2.12150502204895,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.371925354003906,
        "cur_std": 0.8892627716064453,
        "prompt": "20 name One Python function that cruiserone string sh QU argumentumeric returnsProgram",
        "nll_prompt": -11.417460441589355
    },
    {
        "epoch": 24,
        "loss": 2.392263650894165,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 21.825319290161133,
        "cur_std": 0.8859769821166992,
        "prompt": " Action name One Python function that cruiserone string sh QU argumentumeric returnsProgram",
        "nll_prompt": -10.70908260345459
    },
    {
        "epoch": 25,
        "loss": 2.3786985874176025,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 21.863983154296875,
        "cur_std": 0.907986068725586,
        "prompt": " Action name One Python function that cruiserone string sh QU argumentumeric ZProgram",
        "nll_prompt": -10.73347282409668
    },
    {
        "epoch": 26,
        "loss": 2.398329734802246,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.545490264892578,
        "cur_std": 0.916349220275879,
        "prompt": " Action name One Python function that cruiserone string sh QU argumentumeric Zam",
        "nll_prompt": -10.508026123046875
    },
    {
        "epoch": 27,
        "loss": 2.566135883331299,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.39150619506836,
        "cur_std": 0.9316516876220703,
        "prompt": " need name One Python function that cruiserone string sh QU argumentumeric Zam",
        "nll_prompt": -10.876336097717285
    },
    {
        "epoch": 28,
        "loss": 2.531717538833618,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.61560821533203,
        "cur_std": 0.9198119163513183,
        "prompt": " need name One Python function that cruiserone Con sh QU argumentumeric Zam",
        "nll_prompt": -11.508197784423828
    },
    {
        "epoch": 29,
        "loss": 2.357923746109009,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 23.17820930480957,
        "cur_std": 0.9456588745117187,
        "prompt": " need name One Python function that cruiserOpen Con sh QU argumentumeric Zam",
        "nll_prompt": -11.790873527526855
    },
    {
        "epoch": 30,
        "loss": 2.4092321395874023,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 22.625244140625,
        "cur_std": 0.9266460418701172,
        "prompt": " need *** One Python function that cruiserOpen Con sh QU argumentumeric Zam",
        "nll_prompt": -11.777759552001953
    },
    {
        "epoch": 31,
        "loss": 2.539741039276123,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.071990966796875,
        "cur_std": 0.9000930786132812,
        "prompt": " need *** One Python function that cruiserOpen Con sh QU argumentumeric ZATION",
        "nll_prompt": -11.643834114074707
    },
    {
        "epoch": 32,
        "loss": 2.489424467086792,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 20.8447208404541,
        "cur_std": 0.9124630928039551,
        "prompt": " need *** One Python function that cruiser Psych Con sh QU argumentumeric ZATION",
        "nll_prompt": -12.236790657043457
    },
    {
        "epoch": 33,
        "loss": 2.4231367111206055,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 19.636003494262695,
        "cur_std": 0.8940585136413575,
        "prompt": " need *** One Python function that cruiser Serial Con sh QU argumentumeric ZATION",
        "nll_prompt": -11.165772438049316
    },
    {
        "epoch": 34,
        "loss": 2.4026083946228027,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 19.499099731445312,
        "cur_std": 0.8988847732543945,
        "prompt": " need *** One Python function that cruiser Serial � sh QU argumentumeric ZATION",
        "nll_prompt": -11.56503963470459
    },
    {
        "epoch": 35,
        "loss": 2.28696608543396,
        "best_loss": 2.12150502204895,
        "best_kl": 18.52537727355957,
        "best_std": 0.8626511573791504,
        "cur_kl": 18.791015625,
        "cur_std": 0.8887609481811524,
        "prompt": " need *** One Python function that cruiser Serial � sh\\ argumentumeric ZATION",
        "nll_prompt": -11.199357986450195
    },
    {
        "epoch": 36,
        "loss": 2.124500274658203,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 17.608348846435547,
        "cur_std": 0.8758825302124024,
        "prompt": " need *** One Python function that checking Serial � sh\\ argumentumeric ZATION",
        "nll_prompt": -10.953754425048828
    },
    {
        "epoch": 37,
        "loss": 2.1920368671417236,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.29636001586914,
        "cur_std": 0.896847152709961,
        "prompt": " need Daisy One Python function that checking Serial � sh\\ argumentumeric ZATION",
        "nll_prompt": -11.90554141998291
    },
    {
        "epoch": 38,
        "loss": 2.175372362136841,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.974262237548828,
        "cur_std": 0.9071768760681153,
        "prompt": " need Daisy One Python function that checking Serial � sh meeting argumentumeric ZATION",
        "nll_prompt": -12.214618682861328
    },
    {
        "epoch": 39,
        "loss": 2.457993268966675,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 19.119747161865234,
        "cur_std": 0.9146111488342286,
        "prompt": " need Daisy set Python function that checking Serial � sh meeting argumentumeric ZATION",
        "nll_prompt": -11.949580192565918
    },
    {
        "epoch": 40,
        "loss": 2.3850271701812744,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 19.226221084594727,
        "cur_std": 0.9085176467895508,
        "prompt": " need Daisy set Python function that checking application � sh meeting argumentumeric ZATION",
        "nll_prompt": -11.621012687683105
    },
    {
        "epoch": 41,
        "loss": 2.4458229541778564,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 19.497821807861328,
        "cur_std": 0.9134355545043945,
        "prompt": " need Daisy errors Python function that checking application � sh meeting argumentumeric ZATION",
        "nll_prompt": -11.795228004455566
    },
    {
        "epoch": 42,
        "loss": 2.4163174629211426,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.768129348754883,
        "cur_std": 0.894953727722168,
        "prompt": " need Daisy errors Python function that checking Mal � sh meeting argumentumeric ZATION",
        "nll_prompt": -11.91443920135498
    },
    {
        "epoch": 43,
        "loss": 2.3084614276885986,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.84130096435547,
        "cur_std": 0.8840864181518555,
        "prompt": " need Daisy errors Python function that checking Mal � sh Isaac argumentumeric ZATION",
        "nll_prompt": -11.876652717590332
    },
    {
        "epoch": 44,
        "loss": 2.3259024620056152,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.374555587768555,
        "cur_std": 0.8757378578186035,
        "prompt": " need DaisyContinue Python function that checking Mal � sh Isaac argumentumeric ZATION",
        "nll_prompt": -11.825404167175293
    },
    {
        "epoch": 45,
        "loss": 2.2944791316986084,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.946027755737305,
        "cur_std": 0.8659967422485352,
        "prompt": " need DaisyContinue Python function that checking Mal underscores sh Isaac argumentumeric ZATION",
        "nll_prompt": -11.785510063171387
    },
    {
        "epoch": 46,
        "loss": 2.1288304328918457,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.761066436767578,
        "cur_std": 0.8496509552001953,
        "prompt": " Mary DaisyContinue Python function that checking Mal underscores sh Isaac argumentumeric ZATION",
        "nll_prompt": -11.877869606018066
    },
    {
        "epoch": 47,
        "loss": 2.369333028793335,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 19.043621063232422,
        "cur_std": 0.8534209251403808,
        "prompt": " Mary DaisyContinue Python function that checking Mal underscoresW Isaac argumentumeric ZATION",
        "nll_prompt": -11.743775367736816
    },
    {
        "epoch": 48,
        "loss": 2.2580411434173584,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 18.385005950927734,
        "cur_std": 0.8406210899353027,
        "prompt": " Mary)Continue Python function that checking Mal underscoresW Isaac argumentumeric ZATION",
        "nll_prompt": -12.090747833251953
    },
    {
        "epoch": 49,
        "loss": 2.2442920207977295,
        "best_loss": 2.12150502204895,
        "best_kl": 17.608348846435547,
        "best_std": 0.8758825302124024,
        "cur_kl": 17.964982986450195,
        "cur_std": 0.8404371261596679,
        "prompt": " Mary)Continue Python function that checking Mal BASW Isaac argumentumeric ZATION",
        "nll_prompt": -11.580463409423828
    },
    {
        "epoch": 50,
        "loss": 2.198178768157959,
        "best_loss": 2.12150502204895,
        "best_kl": 17.294708251953125,
        "best_std": 0.8446282386779785,
        "cur_kl": 17.294708251953125,
        "cur_std": 0.8446282386779785,
        "prompt": " Mary)Continue Python function that checking Mal BASW Isaac argumentumeric._ATION",
        "nll_prompt": -12.02238655090332
    },
    {
        "epoch": 51,
        "loss": 2.247271776199341,
        "best_loss": 2.12150502204895,
        "best_kl": 17.294708251953125,
        "best_std": 0.8446282386779785,
        "cur_kl": 18.14276123046875,
        "cur_std": 0.8704100608825683,
        "prompt": " Mary)Continue Python function that checking provide BASW Isaac argumentumeric._ATION",
        "nll_prompt": -11.735026359558105
    },
    {
        "epoch": 52,
        "loss": 2.4658203125,
        "best_loss": 2.12150502204895,
        "best_kl": 17.294708251953125,
        "best_std": 0.8446282386779785,
        "cur_kl": 18.284250259399414,
        "cur_std": 0.8882250785827637,
        "prompt": " Mary)Continue Python function that checking provide guW Isaac argumentumeric._ATION",
        "nll_prompt": -11.97385311126709
    },
    {
        "epoch": 53,
        "loss": 2.2598490715026855,
        "best_loss": 2.12150502204895,
        "best_kl": 17.276758193969727,
        "best_std": 0.8577140808105469,
        "cur_kl": 17.276758193969727,
        "cur_std": 0.8577140808105469,
        "prompt": " Mary)Continue Python function that checkingats guW Isaac argumentumeric._ATION",
        "nll_prompt": -12.81174373626709
    },
    {
        "epoch": 54,
        "loss": 2.1113927364349365,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.967042922973633,
        "best_std": 0.8431804656982422,
        "cur_kl": 16.967042922973633,
        "cur_std": 0.8431804656982422,
        "prompt": " Mary)Continue Python function that checkingats guW Isaac argumentumeric###ATION",
        "nll_prompt": -12.687488555908203
    },
    {
        "epoch": 55,
        "loss": 2.474677085876465,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.967042922973633,
        "best_std": 0.8431804656982422,
        "cur_kl": 17.44218635559082,
        "cur_std": 0.8492833137512207,
        "prompt": " Mary)Continue Python function that checking syntax guW Isaac argumentumeric###ATION",
        "nll_prompt": -12.09160041809082
    },
    {
        "epoch": 56,
        "loss": 2.382051467895508,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.967042922973633,
        "best_std": 0.8431804656982422,
        "cur_kl": 17.519495010375977,
        "cur_std": 0.8513517379760742,
        "prompt": " Mary)Continue Python function that checking syntax HierW Isaac argumentumeric###ATION",
        "nll_prompt": -12.091087341308594
    },
    {
        "epoch": 57,
        "loss": 2.301562547683716,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.967042922973633,
        "best_std": 0.8431804656982422,
        "cur_kl": 17.432687759399414,
        "cur_std": 0.8396135330200195,
        "prompt": " Mary)Continue Python function that checking learned HierW Isaac argumentumeric###ATION",
        "nll_prompt": -12.072882652282715
    },
    {
        "epoch": 58,
        "loss": 2.254652261734009,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.967042922973633,
        "best_std": 0.8431804656982422,
        "cur_kl": 17.788414001464844,
        "cur_std": 0.8418993949890137,
        "prompt": " Mary)Continue Python function that checking learned Hieraine Isaac argumentumeric###ATION",
        "nll_prompt": -11.959559440612793
    },
    {
        "epoch": 59,
        "loss": 2.19059419631958,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 16.892786026000977,
        "cur_std": 0.7961965084075928,
        "prompt": " Mary)Continue Python function that checking learned Hieraineformat argumentumeric###ATION",
        "nll_prompt": -12.054722785949707
    },
    {
        "epoch": 60,
        "loss": 2.280430793762207,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.984350204467773,
        "cur_std": 0.802984619140625,
        "prompt": " Mary)Continue Python function that checking learned Hieraineformat Santumeric###ATION",
        "nll_prompt": -12.22385311126709
    },
    {
        "epoch": 61,
        "loss": 2.387906074523926,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.30097198486328,
        "cur_std": 0.8128613471984864,
        "prompt": " You)Continue Python function that checking learned Hieraineformat Santumeric###ATION",
        "nll_prompt": -11.928632736206055
    },
    {
        "epoch": 62,
        "loss": 2.13012957572937,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.74363899230957,
        "cur_std": 0.8063373565673828,
        "prompt": " You)Continue Python function that checking learned Hieraineformat Charumeric###ATION",
        "nll_prompt": -11.672927856445312
    },
    {
        "epoch": 63,
        "loss": 2.300312042236328,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.985868453979492,
        "cur_std": 0.8030386924743652,
        "prompt": " You)Continue Python function that checking learned Hieraineformat logicumeric###ATION",
        "nll_prompt": -11.816590309143066
    },
    {
        "epoch": 64,
        "loss": 2.190078020095825,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.66521453857422,
        "cur_std": 0.7652016162872315,
        "prompt": " You)Continue Python function that checking learned Hieraineformat logicumeric],ATION",
        "nll_prompt": -12.232897758483887
    },
    {
        "epoch": 65,
        "loss": 2.3813583850860596,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.376018524169922,
        "cur_std": 0.7923524379730225,
        "prompt": " You)Continue Python function that checkingelines Hieraineformat logicumeric],ATION",
        "nll_prompt": -12.686161041259766
    },
    {
        "epoch": 66,
        "loss": 2.1438841819763184,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.725893020629883,
        "cur_std": 0.7793404579162597,
        "prompt": " You)Continue Python function that checkingelines Hieraineformatwsumeric],ATION",
        "nll_prompt": -12.854423522949219
    },
    {
        "epoch": 67,
        "loss": 2.2319912910461426,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.159046173095703,
        "cur_std": 0.7538310527801514,
        "prompt": " You)Continue Python function that checkingelines Hier Mentalformatwsumeric],ATION",
        "nll_prompt": -13.133760452270508
    },
    {
        "epoch": 68,
        "loss": 2.2233073711395264,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.132244110107422,
        "cur_std": 0.8001887321472168,
        "prompt": " You)Continue Python function that checkingelines Hier Mentalewitnesswsumeric],ATION",
        "nll_prompt": -13.84153938293457
    },
    {
        "epoch": 69,
        "loss": 2.3050827980041504,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 19.32131004333496,
        "cur_std": 0.8718462944030761,
        "prompt": " You)Continue Python function that checkingelines Hier MentalewitnesswsumericicATION",
        "nll_prompt": -13.097254753112793
    },
    {
        "epoch": 70,
        "loss": 2.2865400314331055,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.681501388549805,
        "cur_std": 0.8723379135131836,
        "prompt": " You spContinue Python function that checkingelines Hier MentalewitnesswsumericicATION",
        "nll_prompt": -13.181156158447266
    },
    {
        "epoch": 71,
        "loss": 2.218458652496338,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 19.155982971191406,
        "cur_std": 0.8574021339416504,
        "prompt": " You spContinue Python function that checkingelines Hier insertewitnesswsumericicATION",
        "nll_prompt": -13.16688060760498
    },
    {
        "epoch": 72,
        "loss": 2.357501983642578,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.305164337158203,
        "cur_std": 0.8394241333007812,
        "prompt": " You spContinue Python function that checkingelines Hier insertewitnesswsumericWPATION",
        "nll_prompt": -13.51140022277832
    },
    {
        "epoch": 73,
        "loss": 2.200035572052002,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.9439640045166,
        "cur_std": 0.8156922340393067,
        "prompt": " You spContinue Python function that checkingelines prett insertewitnesswsumericWPATION",
        "nll_prompt": -13.011357307434082
    },
    {
        "epoch": 74,
        "loss": 2.238837242126465,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.190166473388672,
        "cur_std": 0.8331555366516114,
        "prompt": " You spContinue Python function that checkingelines prett1ewitnesswsumericWPATION",
        "nll_prompt": -12.65912914276123
    },
    {
        "epoch": 75,
        "loss": 2.3952126502990723,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.735647201538086,
        "cur_std": 0.8491512298583984,
        "prompt": " You spContinue Python function that checkingelines prett1ewitnesswsumeric establishedATION",
        "nll_prompt": -12.863818168640137
    },
    {
        "epoch": 76,
        "loss": 2.1617660522460938,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.854387283325195,
        "cur_std": 0.8374460220336915,
        "prompt": ")? spContinue Python function that checkingelines prett1ewitnesswsumeric establishedATION",
        "nll_prompt": -12.589351654052734
    },
    {
        "epoch": 77,
        "loss": 2.1838417053222656,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.922094345092773,
        "cur_std": 0.8331598281860352,
        "prompt": ")? spContinue Python function that checkingelines prett equallyewitnesswsumeric establishedATION",
        "nll_prompt": -13.049802780151367
    },
    {
        "epoch": 78,
        "loss": 2.2924704551696777,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.4249210357666,
        "cur_std": 0.8313863754272461,
        "prompt": ")? spContinue Python function that checkingtmp prett equallyewitnesswsumeric establishedATION",
        "nll_prompt": -12.981279373168945
    },
    {
        "epoch": 79,
        "loss": 2.3802437782287598,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.398401260375977,
        "cur_std": 0.8319815635681153,
        "prompt": ")? spContinue Python function that checking come prett equallyewitnesswsumeric establishedATION",
        "nll_prompt": -12.692505836486816
    },
    {
        "epoch": 80,
        "loss": 2.240931749343872,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.91743278503418,
        "cur_std": 0.8592685699462891,
        "prompt": " Data spContinue Python function that checking come prett equallyewitnesswsumeric establishedATION",
        "nll_prompt": -12.33091926574707
    },
    {
        "epoch": 81,
        "loss": 2.242074489593506,
        "best_loss": 2.1113927364349365,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 17.715330123901367,
        "cur_std": 0.8669229507446289,
        "prompt": " Data spContinue Python function that checking come just equallyewitnesswsumeric establishedATION",
        "nll_prompt": -12.001770973205566
    },
    {
        "epoch": 82,
        "loss": 2.1079742908477783,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 19.175134658813477,
        "cur_std": 0.8634105682373047,
        "prompt": " Data spContinue Python function that checkingCritics just equallyewitnesswsumeric establishedATION",
        "nll_prompt": -12.60615062713623
    },
    {
        "epoch": 83,
        "loss": 2.4286770820617676,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 19.0035343170166,
        "cur_std": 0.8510611534118653,
        "prompt": " Data spContinue Python function that checkingCritics just equally3wsumeric establishedATION",
        "nll_prompt": -12.062122344970703
    },
    {
        "epoch": 84,
        "loss": 2.166517496109009,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.833818435668945,
        "cur_std": 0.86121826171875,
        "prompt": " Data sp Releases Python function that checkingCritics just equally3wsumeric establishedATION",
        "nll_prompt": -12.08158016204834
    },
    {
        "epoch": 85,
        "loss": 2.42513370513916,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.822391510009766,
        "cur_std": 0.8724069595336914,
        "prompt": " Data sp Releases Python function that checking Col just equally3wsumeric establishedATION",
        "nll_prompt": -11.81124210357666
    },
    {
        "epoch": 86,
        "loss": 2.4486443996429443,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.3121395111084,
        "cur_std": 0.8664797782897949,
        "prompt": " Data sp Releases Python function that checking Col just equally3esisumeric establishedATION",
        "nll_prompt": -12.112589836120605
    },
    {
        "epoch": 87,
        "loss": 2.413379192352295,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.892786026000977,
        "best_std": 0.7961965084075928,
        "cur_kl": 18.331762313842773,
        "cur_std": 0.8734006881713867,
        "prompt": " Data sp Releases Python function that checking Col just equally3esisumeric OnATION",
        "nll_prompt": -11.716480255126953
    },
    {
        "epoch": 88,
        "loss": 2.1882567405700684,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.78605842590332,
        "best_std": 0.8393232345581054,
        "cur_kl": 16.78605842590332,
        "cur_std": 0.8393232345581054,
        "prompt": " Data sp Releases Python function that checkingvalue just equally3esisumeric OnATION",
        "nll_prompt": -11.781830787658691
    },
    {
        "epoch": 89,
        "loss": 2.2089622020721436,
        "best_loss": 2.1079742908477783,
        "best_kl": 16.78605842590332,
        "best_std": 0.8393232345581054,
        "cur_kl": 17.117183685302734,
        "cur_std": 0.8725774765014649,
        "prompt": "人 sp Releases Python function that checkingvalue just equally3esisumeric OnATION",
        "nll_prompt": -11.701441764831543
    },
    {
        "epoch": 90,
        "loss": 1.9484047889709473,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.78605842590332,
        "best_std": 0.8393232345581054,
        "cur_kl": 17.385601043701172,
        "cur_std": 0.864463996887207,
        "prompt": "人 sp Releases Python function that checkingvalueifier equally3esisumeric OnATION",
        "nll_prompt": -11.863578796386719
    },
    {
        "epoch": 91,
        "loss": 2.423021078109741,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.78605842590332,
        "best_std": 0.8393232345581054,
        "cur_kl": 17.28423309326172,
        "cur_std": 0.8790634155273438,
        "prompt": "人 week Releases Python function that checkingvalueifier equally3esisumeric OnATION",
        "nll_prompt": -12.306315422058105
    },
    {
        "epoch": 92,
        "loss": 2.3446648120880127,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.421123504638672,
        "best_std": 0.860576057434082,
        "cur_kl": 16.421123504638672,
        "cur_std": 0.860576057434082,
        "prompt": "人 week Releases Python function that checkingvalueifier equally3esisumeric ENDATION",
        "nll_prompt": -12.357121467590332
    },
    {
        "epoch": 93,
        "loss": 2.1161580085754395,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.40412712097168,
        "best_std": 0.8579424858093262,
        "cur_kl": 16.40412712097168,
        "cur_std": 0.8579424858093262,
        "prompt": "人 week Releases Python function that checkingvalueifier see3esisumeric ENDATION",
        "nll_prompt": -12.094096183776855
    },
    {
        "epoch": 94,
        "loss": 2.2433388233184814,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 16.26950454711914,
        "cur_std": 0.8649385452270508,
        "prompt": "人 week Releases Python function that checkingvalueifier seeameresisumeric ENDATION",
        "nll_prompt": -12.07728385925293
    },
    {
        "epoch": 95,
        "loss": 2.350435972213745,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 16.74654769897461,
        "cur_std": 0.8651614189147949,
        "prompt": "人 week Releases Python function that checkingvalue storefront seeameresisumeric ENDATION",
        "nll_prompt": -12.52305793762207
    },
    {
        "epoch": 96,
        "loss": 2.3272030353546143,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 16.42536163330078,
        "cur_std": 0.8870026588439941,
        "prompt": "人 week Releases Python function that checkingvalue Stores seeameresisumeric ENDATION",
        "nll_prompt": -12.19282054901123
    },
    {
        "epoch": 97,
        "loss": 2.3476274013519287,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 16.564746856689453,
        "cur_std": 0.8663958549499512,
        "prompt": "人 week Releases Python function that checkingvalueAndre seeameresisumeric ENDATION",
        "nll_prompt": -12.20762825012207
    },
    {
        "epoch": 98,
        "loss": 2.2873735427856445,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 16.452226638793945,
        "cur_std": 0.8649578094482422,
        "prompt": "人 week Releases Python function that checkingvalueAndreuscameresisumeric ENDATION",
        "nll_prompt": -11.961094856262207
    },
    {
        "epoch": 99,
        "loss": 2.2488865852355957,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 16.81114959716797,
        "cur_std": 0.8675132751464844,
        "prompt": "人 week Releases Python function that checkingvalueAndre endsameresisumeric ENDATION",
        "nll_prompt": -12.373592376708984
    },
    {
        "epoch": 100,
        "loss": 2.3716039657592773,
        "best_loss": 1.9484047889709473,
        "best_kl": 16.26950454711914,
        "best_std": 0.8649385452270508,
        "cur_kl": 17.30877685546875,
        "cur_std": 0.8663168907165527,
        "prompt": "人 kindred Releases Python function that checkingvalueAndre endsameresisumeric ENDATION",
        "nll_prompt": -12.409066200256348
    }
]