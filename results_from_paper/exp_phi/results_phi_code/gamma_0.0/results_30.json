[
    {
        "epoch": 1,
        "loss": 1.7116118669509888,
        "best_loss": 1.7116118669509888,
        "best_kl": 15.73757266998291,
        "best_std": 0.7598107814788818,
        "cur_kl": 15.73757266998291,
        "cur_std": 0.7598107814788818,
        "prompt": "\"Write label Python function that checks if a given number is prime. A",
        "nll_prompt": -3.9306063652038574
    },
    {
        "epoch": 2,
        "loss": 1.8363803625106812,
        "best_loss": 1.7116118669509888,
        "best_kl": 15.73757266998291,
        "best_std": 0.7598107814788818,
        "cur_kl": 15.995623588562012,
        "cur_std": 0.9325649261474609,
        "prompt": " trashWrite label Python function that checks if a given number is prime. A",
        "nll_prompt": -4.465697765350342
    },
    {
        "epoch": 3,
        "loss": 1.6598012447357178,
        "best_loss": 1.6598012447357178,
        "best_kl": 14.237481117248535,
        "best_std": 0.7603813171386719,
        "cur_kl": 14.237481117248535,
        "cur_std": 0.7603813171386719,
        "prompt": " InWrite label Python function that checks if a given number is prime. A",
        "nll_prompt": -4.378903388977051
    },
    {
        "epoch": 4,
        "loss": 1.6769684553146362,
        "best_loss": 1.6598012447357178,
        "best_kl": 14.237481117248535,
        "best_std": 0.7603813171386719,
        "cur_kl": 14.834928512573242,
        "cur_std": 0.7138127326965332,
        "prompt": " InWrite label Python function that checksx a given number is prime. A",
        "nll_prompt": -6.114943504333496
    },
    {
        "epoch": 5,
        "loss": 1.8829233646392822,
        "best_loss": 1.6598012447357178,
        "best_kl": 14.237481117248535,
        "best_std": 0.7603813171386719,
        "cur_kl": 14.460413932800293,
        "cur_std": 0.683915662765503,
        "prompt": " InWrite label Python function that checksx Art given number is prime. A",
        "nll_prompt": -7.7445244789123535
    },
    {
        "epoch": 6,
        "loss": 1.7322142124176025,
        "best_loss": 1.6598012447357178,
        "best_kl": 14.237481117248535,
        "best_std": 0.7603813171386719,
        "cur_kl": 14.748480796813965,
        "cur_std": 0.6879978656768799,
        "prompt": "%-Write label Python function that checksx Art given number is prime. A",
        "nll_prompt": -8.041438102722168
    },
    {
        "epoch": 7,
        "loss": 1.502228021621704,
        "best_loss": 1.502228021621704,
        "best_kl": 11.204293251037598,
        "best_std": 0.6502691268920898,
        "cur_kl": 11.204293251037598,
        "cur_std": 0.6502691268920898,
        "prompt": "%-Write label Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -8.825478553771973
    },
    {
        "epoch": 8,
        "loss": 1.7504823207855225,
        "best_loss": 1.502228021621704,
        "best_kl": 10.388649940490723,
        "best_std": 0.644425344467163,
        "cur_kl": 10.388649940490723,
        "cur_std": 0.644425344467163,
        "prompt": " kgWrite label Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -8.755627632141113
    },
    {
        "epoch": 9,
        "loss": 1.4703576564788818,
        "best_loss": 1.4703576564788818,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.077201843261719,
        "cur_std": 0.6617963790893555,
        "prompt": " kg cafeteria label Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -9.012091636657715
    },
    {
        "epoch": 10,
        "loss": 1.6101415157318115,
        "best_loss": 1.4703576564788818,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.734090805053711,
        "cur_std": 0.7044600486755371,
        "prompt": " kg cafeteria applying Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -8.828078269958496
    },
    {
        "epoch": 11,
        "loss": 1.6265040636062622,
        "best_loss": 1.4703576564788818,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.496430397033691,
        "cur_std": 0.6834948539733887,
        "prompt": " kg prank applying Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -8.557720184326172
    },
    {
        "epoch": 12,
        "loss": 1.7453844547271729,
        "best_loss": 1.4703576564788818,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.921881675720215,
        "cur_std": 0.7001119613647461,
        "prompt": " kg prank hect Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -9.636669158935547
    },
    {
        "epoch": 13,
        "loss": 1.7414335012435913,
        "best_loss": 1.4703576564788818,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.940475463867188,
        "cur_std": 0.6766679286956787,
        "prompt": " Kh prank hect Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -9.474860191345215
    },
    {
        "epoch": 14,
        "loss": 1.8332428932189941,
        "best_loss": 1.4703576564788818,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.473600387573242,
        "cur_std": 0.6761164188385009,
        "prompt": " functional prank hect Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -9.833622932434082
    },
    {
        "epoch": 15,
        "loss": 1.4333572387695312,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.30763053894043,
        "cur_std": 0.6711598396301269,
        "prompt": " functional prank sunglasses Python function that checksx Art given number is prime.WATCH",
        "nll_prompt": -9.266112327575684
    },
    {
        "epoch": 16,
        "loss": 1.608569622039795,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.92538070678711,
        "cur_std": 0.6728004932403564,
        "prompt": " functional prank sunglasses Python function that checksx ArtIC number is prime.WATCH",
        "nll_prompt": -9.72323226928711
    },
    {
        "epoch": 17,
        "loss": 1.6981828212738037,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.798959732055664,
        "cur_std": 0.6466667652130127,
        "prompt": " functional prank debugging Python function that checksx ArtIC number is prime.WATCH",
        "nll_prompt": -9.143041610717773
    },
    {
        "epoch": 18,
        "loss": 1.596874475479126,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 10.773526191711426,
        "cur_std": 0.6816678047180176,
        "prompt": " understanding prank debugging Python function that checksx ArtIC number is prime.WATCH",
        "nll_prompt": -9.711840629577637
    },
    {
        "epoch": 19,
        "loss": 1.665379285812378,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.568771362304688,
        "cur_std": 0.7882980346679688,
        "prompt": " understanding prank debugging Python function that checksx ArtIC number is primezzleWATCH",
        "nll_prompt": -10.74036693572998
    },
    {
        "epoch": 20,
        "loss": 1.6950995922088623,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.694501876831055,
        "cur_std": 0.7997543334960937,
        "prompt": " understanding chair debugging Python function that checksx ArtIC number is primezzleWATCH",
        "nll_prompt": -10.303654670715332
    },
    {
        "epoch": 21,
        "loss": 1.721200942993164,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.960588455200195,
        "cur_std": 0.8388561248779297,
        "prompt": " understanding chair debugging Python function that checksx ArtIC number is prime sneakWATCH",
        "nll_prompt": -10.430426597595215
    },
    {
        "epoch": 22,
        "loss": 1.7906252145767212,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.578388214111328,
        "cur_std": 0.871697998046875,
        "prompt": " understanding chair debugging Python function that checksx Art necessary number is prime sneakWATCH",
        "nll_prompt": -10.862602233886719
    },
    {
        "epoch": 23,
        "loss": 1.6441465616226196,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.382485389709473,
        "cur_std": 0.798231554031372,
        "prompt": " industry chair debugging Python function that checksx Art necessary number is prime sneakWATCH",
        "nll_prompt": -10.412272453308105
    },
    {
        "epoch": 24,
        "loss": 1.5858864784240723,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.17064380645752,
        "cur_std": 0.8181332588195801,
        "prompt": " industry chair debugging Python function that checksx Art necessaryount is prime sneakWATCH",
        "nll_prompt": -11.235356330871582
    },
    {
        "epoch": 25,
        "loss": 1.7090426683425903,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.862980842590332,
        "cur_std": 0.8466585159301758,
        "prompt": " industry chair debugging Python function that checksx Art necessary self is prime sneakWATCH",
        "nll_prompt": -10.895252227783203
    },
    {
        "epoch": 26,
        "loss": 1.7165696620941162,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.453320503234863,
        "cur_std": 0.8019097328186036,
        "prompt": " industry chair debugging Python function that checksx Art necessary self is primeDMWATCH",
        "nll_prompt": -10.636347770690918
    },
    {
        "epoch": 27,
        "loss": 1.757498025894165,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.65837574005127,
        "cur_std": 0.774462890625,
        "prompt": " industry chair debugging Python function that checksx Art necessarygon is primeDMWATCH",
        "nll_prompt": -11.011231422424316
    },
    {
        "epoch": 28,
        "loss": 1.8235458135604858,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.756110191345215,
        "cur_std": 0.7834521293640136,
        "prompt": " industry chair debugging Python function that checksx Art barngon is primeDMWATCH",
        "nll_prompt": -10.684049606323242
    },
    {
        "epoch": 29,
        "loss": 1.633378505706787,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.412370681762695,
        "cur_std": 0.7682621002197265,
        "prompt": " industry ozone debugging Python function that checksx Art barngon is primeDMWATCH",
        "nll_prompt": -11.082817077636719
    },
    {
        "epoch": 30,
        "loss": 1.5801806449890137,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.72260856628418,
        "cur_std": 0.8063480377197265,
        "prompt": " industry ozone debugging Python function that checksx Art namedgon is primeDMWATCH",
        "nll_prompt": -10.841526985168457
    },
    {
        "epoch": 31,
        "loss": 1.6157711744308472,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.97457218170166,
        "cur_std": 0.7963973999023437,
        "prompt": "ify ozone debugging Python function that checksx Art namedgon is primeDMWATCH",
        "nll_prompt": -10.188119888305664
    },
    {
        "epoch": 32,
        "loss": 1.5412758588790894,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.19583511352539,
        "cur_std": 0.7865568637847901,
        "prompt": "ify ozone debugging Python function that checksx Art namedradius is primeDMWATCH",
        "nll_prompt": -10.12685775756836
    },
    {
        "epoch": 33,
        "loss": 1.6227610111236572,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.987366676330566,
        "cur_std": 0.8099343299865722,
        "prompt": " instruction ozone debugging Python function that checksx Art namedradius is primeDMWATCH",
        "nll_prompt": -10.485217094421387
    },
    {
        "epoch": 34,
        "loss": 1.8529784679412842,
        "best_loss": 1.4333572387695312,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.2952241897583,
        "cur_std": 0.8318066596984863,
        "prompt": " instruction ozone rights Python function that checksx Art namedradius is primeDMWATCH",
        "nll_prompt": -11.017796516418457
    },
    {
        "epoch": 35,
        "loss": 1.3462611436843872,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.717524528503418,
        "cur_std": 0.8175064086914062,
        "prompt": " instruction ozone rights Python function that checksx Art namedradius is prime numWATCH",
        "nll_prompt": -10.343351364135742
    },
    {
        "epoch": 36,
        "loss": 1.739816427230835,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.07076358795166,
        "cur_std": 0.8062956809997559,
        "prompt": " instruction ozone Do Python function that checksx Art namedradius is prime numWATCH",
        "nll_prompt": -10.236035346984863
    },
    {
        "epoch": 37,
        "loss": 1.8310743570327759,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.540026664733887,
        "cur_std": 0.7944093227386475,
        "prompt": " instruction 3 Do Python function that checksx Art namedradius is prime numWATCH",
        "nll_prompt": -9.61100959777832
    },
    {
        "epoch": 38,
        "loss": 1.7845075130462646,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.19491195678711,
        "cur_std": 0.8331007957458496,
        "prompt": " instruction 3mer Python function that checksx Art namedradius is prime numWATCH",
        "nll_prompt": -9.886241912841797
    },
    {
        "epoch": 39,
        "loss": 1.5942051410675049,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.232611656188965,
        "cur_std": 0.8323752403259277,
        "prompt": " instruction 3mer Python function that checksleton Art namedradius is prime numWATCH",
        "nll_prompt": -10.325060844421387
    },
    {
        "epoch": 40,
        "loss": 1.7599245309829712,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.954869270324707,
        "cur_std": 0.8474442481994628,
        "prompt": " instruction 3mer Python function that checksleton Art namedpop is prime numWATCH",
        "nll_prompt": -10.38587760925293
    },
    {
        "epoch": 41,
        "loss": 1.7895240783691406,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.46588134765625,
        "cur_std": 0.8409251213073731,
        "prompt": " instruction 3 together Python function that checksleton Art namedpop is prime numWATCH",
        "nll_prompt": -10.049444198608398
    },
    {
        "epoch": 42,
        "loss": 1.6105782985687256,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.806279182434082,
        "cur_std": 0.8349913597106934,
        "prompt": " instruction 3 together Python function that checksleton Art namedarg is prime numWATCH",
        "nll_prompt": -9.919188499450684
    },
    {
        "epoch": 43,
        "loss": 1.6548429727554321,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.710041046142578,
        "cur_std": 0.8205971717834473,
        "prompt": " instruction� together Python function that checksleton Art namedarg is prime numWATCH",
        "nll_prompt": -10.913084030151367
    },
    {
        "epoch": 44,
        "loss": 1.6942799091339111,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.254059791564941,
        "cur_std": 0.8040839195251465,
        "prompt": " instruction > together Python function that checksleton Art namedarg is prime numWATCH",
        "nll_prompt": -9.788039207458496
    },
    {
        "epoch": 45,
        "loss": 1.6722196340560913,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.446015357971191,
        "cur_std": 0.8016520500183105,
        "prompt": " Avengers > together Python function that checksleton Art namedarg is prime numWATCH",
        "nll_prompt": -9.960979461669922
    },
    {
        "epoch": 46,
        "loss": 1.640665054321289,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.515585899353027,
        "cur_std": 0.8363908767700196,
        "prompt": " Avengers > together Python function that checksleton Art named Mech is prime numWATCH",
        "nll_prompt": -9.967308044433594
    },
    {
        "epoch": 47,
        "loss": 1.3773860931396484,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.34201431274414,
        "cur_std": 0.7986362934112549,
        "prompt": " Avengers > together Python function that checksleton Art namedpt is prime numWATCH",
        "nll_prompt": -9.967824935913086
    },
    {
        "epoch": 48,
        "loss": 1.5182851552963257,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.578669548034668,
        "cur_std": 0.8225675582885742,
        "prompt": " Avengers > together Python function that checksleton Art named Mane is prime numWATCH",
        "nll_prompt": -10.13132381439209
    },
    {
        "epoch": 49,
        "loss": 1.6874593496322632,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.484223365783691,
        "cur_std": 0.898892593383789,
        "prompt": " Avengers > together Python function that checks( Art named Mane is prime numWATCH",
        "nll_prompt": -9.97731876373291
    },
    {
        "epoch": 50,
        "loss": 1.717470407485962,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.142365455627441,
        "cur_std": 0.9186076164245606,
        "prompt": " Avengers ocean together Python function that checks( Art named Mane is prime numWATCH",
        "nll_prompt": -10.525835990905762
    },
    {
        "epoch": 51,
        "loss": 1.7544625997543335,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.753458023071289,
        "cur_std": 0.8767189025878906,
        "prompt": " Avengers ocean together Python function that checksn Art named Mane is prime numWATCH",
        "nll_prompt": -10.392265319824219
    },
    {
        "epoch": 52,
        "loss": 1.5801234245300293,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.721447944641113,
        "cur_std": 0.8072895050048828,
        "prompt": "2 ocean together Python function that checksn Art named Mane is prime numWATCH",
        "nll_prompt": -10.162310600280762
    },
    {
        "epoch": 53,
        "loss": 1.6094828844070435,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.301165580749512,
        "cur_std": 0.8214482307434082,
        "prompt": "%, ocean together Python function that checksn Art named Mane is prime numWATCH",
        "nll_prompt": -10.346128463745117
    },
    {
        "epoch": 54,
        "loss": 1.6384611129760742,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.069289207458496,
        "cur_std": 0.8104784965515137,
        "prompt": "%, ocean together Python function that checksn Art� Mane is prime numWATCH",
        "nll_prompt": -11.095884323120117
    },
    {
        "epoch": 55,
        "loss": 1.7036162614822388,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.552787780761719,
        "cur_std": 0.8712917327880859,
        "prompt": "%, ocean<|endoftext|> Python function that checksn Art� Mane is prime numWATCH",
        "nll_prompt": -10.72559642791748
    },
    {
        "epoch": 56,
        "loss": 1.6571803092956543,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.697982788085938,
        "cur_std": 0.8786892890930176,
        "prompt": "%, ocean<|endoftext|> Python function that checksn Artq Mane is prime numWATCH",
        "nll_prompt": -10.024114608764648
    },
    {
        "epoch": 57,
        "loss": 1.657084345817566,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.648158073425293,
        "cur_std": 0.8833731651306153,
        "prompt": "%, ocean<|endoftext|> Python function that checksn Artq Mane is prime20WATCH",
        "nll_prompt": -10.45124626159668
    },
    {
        "epoch": 58,
        "loss": 1.5627474784851074,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.670414924621582,
        "cur_std": 0.8288848876953125,
        "prompt": "%, ocean<|endoftext|> Python function that checksn Artq Mane is prime maxWATCH",
        "nll_prompt": -10.275792121887207
    },
    {
        "epoch": 59,
        "loss": 1.6185369491577148,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.243791580200195,
        "cur_std": 0.860340690612793,
        "prompt": "%, ocean<|endoftext|> Python function that checksn Artq sunscreen is prime maxWATCH",
        "nll_prompt": -10.871147155761719
    },
    {
        "epoch": 60,
        "loss": 1.6106029748916626,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.504700660705566,
        "cur_std": 0.8546663284301758,
        "prompt": " Cro ocean<|endoftext|> Python function that checksn Artq sunscreen is prime maxWATCH",
        "nll_prompt": -10.948840141296387
    },
    {
        "epoch": 61,
        "loss": 1.5219837427139282,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.257621765136719,
        "cur_std": 0.8486233711242676,
        "prompt": " watched ocean<|endoftext|> Python function that checksn Artq sunscreen is prime maxWATCH",
        "nll_prompt": -10.76691722869873
    },
    {
        "epoch": 62,
        "loss": 1.5765351057052612,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.18860912322998,
        "cur_std": 0.8415745735168457,
        "prompt": " watched musician<|endoftext|> Python function that checksn Artq sunscreen is prime maxWATCH",
        "nll_prompt": -10.754944801330566
    },
    {
        "epoch": 63,
        "loss": 1.677463173866272,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.843361854553223,
        "cur_std": 0.8499105453491211,
        "prompt": " watched String<|endoftext|> Python function that checksn Artq sunscreen is prime maxWATCH",
        "nll_prompt": -10.618937492370605
    },
    {
        "epoch": 64,
        "loss": 1.8280633687973022,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 11.952880859375,
        "cur_std": 0.8283510208129883,
        "prompt": " watched Math<|endoftext|> Python function that checksn Artq sunscreen is prime maxWATCH",
        "nll_prompt": -10.820483207702637
    },
    {
        "epoch": 65,
        "loss": 1.5634249448776245,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.282301902770996,
        "cur_std": 0.9850855827331543,
        "prompt": " watched Math<|endoftext|> Python function that checksn Artq sunscreen is prime max elements",
        "nll_prompt": -10.24793815612793
    },
    {
        "epoch": 66,
        "loss": 1.6147855520248413,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.773947715759277,
        "cur_std": 0.9797532081604003,
        "prompt": " Additionally Math<|endoftext|> Python function that checksn Artq sunscreen is prime max elements",
        "nll_prompt": -10.30026912689209
    },
    {
        "epoch": 67,
        "loss": 1.709343433380127,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.032174110412598,
        "cur_std": 0.9832481384277344,
        "prompt": " Additionally NEO<|endoftext|> Python function that checksn Artq sunscreen is prime max elements",
        "nll_prompt": -10.55240535736084
    },
    {
        "epoch": 68,
        "loss": 1.8018457889556885,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.206343650817871,
        "cur_std": 0.9822142601013184,
        "prompt": " Additionally potential<|endoftext|> Python function that checksn Artq sunscreen is prime max elements",
        "nll_prompt": -10.001596450805664
    },
    {
        "epoch": 69,
        "loss": 1.7615532875061035,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.998469352722168,
        "cur_std": 0.9868678092956543,
        "prompt": " Additionally picnic<|endoftext|> Python function that checksn Artq sunscreen is prime max elements",
        "nll_prompt": -10.444920539855957
    },
    {
        "epoch": 70,
        "loss": 1.661811351776123,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.676253318786621,
        "cur_std": 1.0074681282043456,
        "prompt": " Additionally picnic<|endoftext|> Python function that checksn Art presided sunscreen is prime max elements",
        "nll_prompt": -10.819611549377441
    },
    {
        "epoch": 71,
        "loss": 1.793972134590149,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.509835243225098,
        "cur_std": 1.0202192306518554,
        "prompt": " Additionally this<|endoftext|> Python function that checksn Art presided sunscreen is prime max elements",
        "nll_prompt": -10.427411079406738
    },
    {
        "epoch": 72,
        "loss": 1.842398762702942,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 15.054061889648438,
        "cur_std": 1.0154869079589843,
        "prompt": " slips this<|endoftext|> Python function that checksn Art presided sunscreen is prime max elements",
        "nll_prompt": -10.443531036376953
    },
    {
        "epoch": 73,
        "loss": 1.754828929901123,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.511716842651367,
        "cur_std": 0.9956978797912598,
        "prompt": " slips this<|endoftext|> Python function that checksn Art presided sunscreen is prime 4 elements",
        "nll_prompt": -10.135961532592773
    },
    {
        "epoch": 74,
        "loss": 1.804354190826416,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.604625701904297,
        "cur_std": 0.9805104255676269,
        "prompt": " slips E<|endoftext|> Python function that checksn Art presided sunscreen is prime 4 elements",
        "nll_prompt": -10.427063941955566
    },
    {
        "epoch": 75,
        "loss": 1.8979454040527344,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 15.237621307373047,
        "cur_std": 0.9867630958557129,
        "prompt": " slips E<|endoftext|> Python function that checksn Art� sunscreen is prime 4 elements",
        "nll_prompt": -10.50540828704834
    },
    {
        "epoch": 76,
        "loss": 1.5922551155090332,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.428754806518555,
        "cur_std": 1.0562736511230468,
        "prompt": " slips E<|endoftext|> Python function that checksn Art� sunscreen is prime 46",
        "nll_prompt": -10.933979034423828
    },
    {
        "epoch": 77,
        "loss": 1.7105356454849243,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 14.10804271697998,
        "cur_std": 1.0261173248291016,
        "prompt": " quest E<|endoftext|> Python function that checksn Art� sunscreen is prime 46",
        "nll_prompt": -10.685612678527832
    },
    {
        "epoch": 78,
        "loss": 1.7769805192947388,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.568840026855469,
        "cur_std": 0.9764629364013672,
        "prompt": " quest E<|endoftext|> Python function that checksn Art� sunscreen is prime Chill6",
        "nll_prompt": -11.106959342956543
    },
    {
        "epoch": 79,
        "loss": 1.8274788856506348,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.578092575073242,
        "cur_std": 0.9644359588623047,
        "prompt": " quest operation<|endoftext|> Python function that checksn Art� sunscreen is prime Chill6",
        "nll_prompt": -11.073408126831055
    },
    {
        "epoch": 80,
        "loss": 1.514049768447876,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.791268348693848,
        "cur_std": 0.9313819885253907,
        "prompt": " quest operation<|endoftext|> Python function that checksnratch� sunscreen is prime Chill6",
        "nll_prompt": -11.306597709655762
    },
    {
        "epoch": 81,
        "loss": 1.6369487047195435,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.482439041137695,
        "cur_std": 0.9626583099365235,
        "prompt": " quest operation<|endoftext|> Python function that checks Maryratch� sunscreen is prime Chill6",
        "nll_prompt": -11.554850578308105
    },
    {
        "epoch": 82,
        "loss": 1.7994701862335205,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.20256519317627,
        "cur_std": 0.8562665939331054,
        "prompt": " quest operationbind Python function that checks Maryratch� sunscreen is prime Chill6",
        "nll_prompt": -12.334922790527344
    },
    {
        "epoch": 83,
        "loss": 1.4341522455215454,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.129980087280273,
        "cur_std": 0.9127411842346191,
        "prompt": " butcher operationbind Python function that checks Maryratch� sunscreen is prime Chill6",
        "nll_prompt": -12.138036727905273
    },
    {
        "epoch": 84,
        "loss": 1.5623568296432495,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.874034881591797,
        "cur_std": 0.9472047805786132,
        "prompt": " butcher operation/ Python function that checks Maryratch� sunscreen is prime Chill6",
        "nll_prompt": -11.554561614990234
    },
    {
        "epoch": 85,
        "loss": 1.5528374910354614,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.034560203552246,
        "cur_std": 0.9939414978027343,
        "prompt": " butcher operation/ Python function that checks Mary ones� sunscreen is prime Chill6",
        "nll_prompt": -11.705520629882812
    },
    {
        "epoch": 86,
        "loss": 1.716191053390503,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 13.22337818145752,
        "cur_std": 0.9867568969726562,
        "prompt": " butcherens/ Python function that checks Mary ones� sunscreen is prime Chill6",
        "nll_prompt": -11.704826354980469
    },
    {
        "epoch": 87,
        "loss": 1.640736699104309,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.414711952209473,
        "cur_std": 0.9668394088745117,
        "prompt": " butcherens/ Python function that checks Mary onesl sunscreen is prime Chill6",
        "nll_prompt": -10.95035457611084
    },
    {
        "epoch": 88,
        "loss": 1.7012324333190918,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.892284393310547,
        "cur_std": 0.9856025695800781,
        "prompt": " butcherens/ Python function that checks Mary diverl sunscreen is prime Chill6",
        "nll_prompt": -11.172961235046387
    },
    {
        "epoch": 89,
        "loss": 1.8091754913330078,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.517050743103027,
        "cur_std": 0.9757256507873535,
        "prompt": " butcherchet/ Python function that checks Mary diverl sunscreen is prime Chill6",
        "nll_prompt": -10.807604789733887
    },
    {
        "epoch": 90,
        "loss": 1.7082470655441284,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.665534019470215,
        "cur_std": 1.000084686279297,
        "prompt": " butcher perplex/ Python function that checks Mary diverl sunscreen is prime Chill6",
        "nll_prompt": -12.00074291229248
    },
    {
        "epoch": 91,
        "loss": 1.6425557136535645,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.764086723327637,
        "cur_std": 0.9503832817077636,
        "prompt": " butcher perplex/ Python function that checksreturn diverl sunscreen is prime Chill6",
        "nll_prompt": -12.100377082824707
    },
    {
        "epoch": 92,
        "loss": 1.626537561416626,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.555399894714355,
        "cur_std": 0.9630067825317383,
        "prompt": " butcher perplex/ Python function that checksreturn tel sunscreen is prime Chill6",
        "nll_prompt": -11.879016876220703
    },
    {
        "epoch": 93,
        "loss": 1.7013318538665771,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.131349563598633,
        "cur_std": 0.9874346733093262,
        "prompt": " butcher perplex/ Python function that checks div tel sunscreen is prime Chill6",
        "nll_prompt": -11.586856842041016
    },
    {
        "epoch": 94,
        "loss": 1.6890935897827148,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.140185356140137,
        "cur_std": 0.9259170532226563,
        "prompt": " butcher universal/ Python function that checks div tel sunscreen is prime Chill6",
        "nll_prompt": -10.898076057434082
    },
    {
        "epoch": 95,
        "loss": 1.4996414184570312,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.517220497131348,
        "cur_std": 0.9671943664550782,
        "prompt": " butcher universalil Python function that checks div tel sunscreen is prime Chill6",
        "nll_prompt": -10.891590118408203
    },
    {
        "epoch": 96,
        "loss": 1.7375446557998657,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.43929386138916,
        "cur_std": 0.9528294563293457,
        "prompt": " butcher universalil Python function that checks Numbers tel sunscreen is prime Chill6",
        "nll_prompt": -11.17753791809082
    },
    {
        "epoch": 97,
        "loss": 1.675972819328308,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.045536994934082,
        "cur_std": 0.9327118873596192,
        "prompt": " butcher universalil Python function that checks Numbers tel sunscreen is primeUT6",
        "nll_prompt": -10.702502250671387
    },
    {
        "epoch": 98,
        "loss": 1.7136385440826416,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.003501892089844,
        "cur_std": 0.8928118705749511,
        "prompt": " sense universalil Python function that checks Numbers tel sunscreen is primeUT6",
        "nll_prompt": -10.680115699768066
    },
    {
        "epoch": 99,
        "loss": 1.5019266605377197,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.225165367126465,
        "cur_std": 0.8935746192932129,
        "prompt": " sense lineil Python function that checks Numbers tel sunscreen is primeUT6",
        "nll_prompt": -10.376853942871094
    },
    {
        "epoch": 100,
        "loss": 1.706748604774475,
        "best_loss": 1.3462611436843872,
        "best_kl": 10.077201843261719,
        "best_std": 0.6617963790893555,
        "cur_kl": 12.316645622253418,
        "cur_std": 0.8793286323547364,
        "prompt": " sense Belarusil Python function that checks Numbers tel sunscreen is primeUT6",
        "nll_prompt": -10.805853843688965
    }
]