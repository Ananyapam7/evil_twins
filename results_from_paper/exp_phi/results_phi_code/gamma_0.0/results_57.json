[
    {
        "epoch": 1,
        "loss": 1.1079847812652588,
        "best_loss": 1.1079847812652588,
        "best_kl": 11.536261558532715,
        "best_std": 0.4711439609527588,
        "cur_kl": 11.536261558532715,
        "cur_std": 0.4711439609527588,
        "prompt": "Prompt: Write a Python function to count the frequency of each character services",
        "nll_prompt": -3.12833571434021
    },
    {
        "epoch": 2,
        "loss": 0.9574549794197083,
        "best_loss": 0.9574549794197083,
        "best_kl": 10.153024673461914,
        "best_std": 0.4455939769744873,
        "cur_kl": 10.153024673461914,
        "cur_std": 0.4455939769744873,
        "prompt": "relypt: Write a Python function to count the frequency of each character services",
        "nll_prompt": -5.507571697235107
    },
    {
        "epoch": 3,
        "loss": 1.030074119567871,
        "best_loss": 0.9574549794197083,
        "best_kl": 10.153024673461914,
        "best_std": 0.4455939769744873,
        "cur_kl": 10.559389114379883,
        "cur_std": 0.432553768157959,
        "prompt": "rely Prompt: Write a Python function to count the frequency of each character services",
        "nll_prompt": -4.626476764678955
    },
    {
        "epoch": 4,
        "loss": 0.9070618152618408,
        "best_loss": 0.9070618152618408,
        "best_kl": 10.153024673461914,
        "best_std": 0.4455939769744873,
        "cur_kl": 10.410837173461914,
        "cur_std": 0.4528825283050537,
        "prompt": "rely Prompt: Write Self Python function to count the frequency of each character services",
        "nll_prompt": -6.409117698669434
    },
    {
        "epoch": 5,
        "loss": 1.0086497068405151,
        "best_loss": 0.9070618152618408,
        "best_kl": 9.634227752685547,
        "best_std": 0.4248311996459961,
        "cur_kl": 9.634227752685547,
        "cur_std": 0.4248311996459961,
        "prompt": " care Prompt: Write Self Python function to count the frequency of each character services",
        "nll_prompt": -6.4347710609436035
    },
    {
        "epoch": 6,
        "loss": 0.9789513349533081,
        "best_loss": 0.9070618152618408,
        "best_kl": 9.571516990661621,
        "best_std": 0.4371185779571533,
        "cur_kl": 9.571516990661621,
        "cur_std": 0.4371185779571533,
        "prompt": " tail Prompt: Write Self Python function to count the frequency of each character services",
        "nll_prompt": -6.394847869873047
    },
    {
        "epoch": 7,
        "loss": 0.9595451354980469,
        "best_loss": 0.9070618152618408,
        "best_kl": 9.183981895446777,
        "best_std": 0.42372703552246094,
        "cur_kl": 9.183981895446777,
        "cur_std": 0.42372703552246094,
        "prompt": " tail Prompt: Writesummary Python function to count the frequency of each character services",
        "nll_prompt": -6.221593379974365
    },
    {
        "epoch": 8,
        "loss": 0.9621230363845825,
        "best_loss": 0.9070618152618408,
        "best_kl": 9.183981895446777,
        "best_std": 0.42372703552246094,
        "cur_kl": 11.454577445983887,
        "cur_std": 0.4739505767822266,
        "prompt": " tail Prompt: Writesummary Python function to count the frequencyHost each character services",
        "nll_prompt": -7.856593608856201
    },
    {
        "epoch": 9,
        "loss": 1.000196099281311,
        "best_loss": 0.9070618152618408,
        "best_kl": 9.183981895446777,
        "best_std": 0.42372703552246094,
        "cur_kl": 11.05109691619873,
        "cur_std": 0.49966139793395997,
        "prompt": " tail Prompt: Writesummary Python function toions the frequencyHost each character services",
        "nll_prompt": -9.146411895751953
    },
    {
        "epoch": 10,
        "loss": 1.0393403768539429,
        "best_loss": 0.9070618152618408,
        "best_kl": 9.183981895446777,
        "best_std": 0.42372703552246094,
        "cur_kl": 11.423224449157715,
        "cur_std": 0.507970142364502,
        "prompt": " tail Prompt: Writesummary Python function toions the frequency accompanied each character services",
        "nll_prompt": -9.054442405700684
    },
    {
        "epoch": 11,
        "loss": 0.9806671738624573,
        "best_loss": 0.9070618152618408,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.240838050842285,
        "cur_std": 0.38316781520843507,
        "prompt": " tail Prompt: Writesummary Python function toions the frequency accompanied each character!",
        "nll_prompt": -8.54886245727539
    },
    {
        "epoch": 12,
        "loss": 0.9045405983924866,
        "best_loss": 0.9045405983924866,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 10.780691146850586,
        "cur_std": 0.372152042388916,
        "prompt": " tail Prompt: Writesummary Python function to\") the frequency accompanied each character!",
        "nll_prompt": -8.667737007141113
    },
    {
        "epoch": 13,
        "loss": 0.9937385320663452,
        "best_loss": 0.9045405983924866,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.465232849121094,
        "cur_std": 0.4030615329742432,
        "prompt": " tail Prompt: Writesummary Python function toOR the frequency accompanied each character!",
        "nll_prompt": -8.590063095092773
    },
    {
        "epoch": 14,
        "loss": 0.9025312066078186,
        "best_loss": 0.9025312066078186,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.221928596496582,
        "cur_std": 0.42552757263183594,
        "prompt": "or Prompt: Writesummary Python function toOR the frequency accompanied each character!",
        "nll_prompt": -8.474318504333496
    },
    {
        "epoch": 15,
        "loss": 0.878117024898529,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.504990577697754,
        "cur_std": 0.40822634696960447,
        "prompt": "or Prompt: Writesummary Python function to function the frequency accompanied each character!",
        "nll_prompt": -8.049358367919922
    },
    {
        "epoch": 16,
        "loss": 0.8794920444488525,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.066287994384766,
        "cur_std": 0.38118844032287597,
        "prompt": " binary Prompt: Writesummary Python function to function the frequency accompanied each character!",
        "nll_prompt": -8.365184783935547
    },
    {
        "epoch": 17,
        "loss": 0.8828585147857666,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.2505998611450195,
        "cur_std": 0.3976038694381714,
        "prompt": "ous Prompt: Writesummary Python function to function the frequency accompanied each character!",
        "nll_prompt": -8.213677406311035
    },
    {
        "epoch": 18,
        "loss": 0.8860228657722473,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.634699821472168,
        "cur_std": 0.37773656845092773,
        "prompt": "ous Prompt: Writesummary Python function Beh function the frequency accompanied each character!",
        "nll_prompt": -9.506443977355957
    },
    {
        "epoch": 19,
        "loss": 0.8821379542350769,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.610316276550293,
        "cur_std": 0.3588779211044312,
        "prompt": " data Prompt: Writesummary Python function Beh function the frequency accompanied each character!",
        "nll_prompt": -9.468401908874512
    },
    {
        "epoch": 20,
        "loss": 0.9211686253547668,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 9.44697380065918,
        "cur_std": 0.37542293071746824,
        "prompt": " data Prompt: Writesummary Python function Jacqu function the frequency accompanied each character!",
        "nll_prompt": -9.765850067138672
    },
    {
        "epoch": 21,
        "loss": 0.948634684085846,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.893455505371094,
        "cur_std": 0.3383800506591797,
        "prompt": " data Prompt: Writesummary Python functionury function the frequency accompanied each character!",
        "nll_prompt": -9.245048522949219
    },
    {
        "epoch": 22,
        "loss": 0.9078167676925659,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.221247673034668,
        "cur_std": 0.41267170906066897,
        "prompt": " data Prompt: Write virtuous Python functionury function the frequency accompanied each character!",
        "nll_prompt": -9.491393089294434
    },
    {
        "epoch": 23,
        "loss": 1.0015621185302734,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.185572624206543,
        "cur_std": 0.42765488624572756,
        "prompt": " data Prompt: Write virtuous Python functionuryum the frequency accompanied each character!",
        "nll_prompt": -9.576674461364746
    },
    {
        "epoch": 24,
        "loss": 0.963648796081543,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.62005090713501,
        "cur_std": 0.39716410636901855,
        "prompt": " data Prompt: Write virtuous Python functionischerum the frequency accompanied each character!",
        "nll_prompt": -9.269049644470215
    },
    {
        "epoch": 25,
        "loss": 0.9194639325141907,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 8.987832069396973,
        "cur_std": 0.3440349340438843,
        "prompt": " data Prompt: Write biome Python functionischerum the frequency accompanied each character!",
        "nll_prompt": -9.541338920593262
    },
    {
        "epoch": 26,
        "loss": 1.00026535987854,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.472146034240723,
        "cur_std": 0.3542086839675903,
        "prompt": "ced Prompt: Write biome Python functionischerum the frequency accompanied each character!",
        "nll_prompt": -9.260498046875
    },
    {
        "epoch": 27,
        "loss": 0.9010728001594543,
        "best_loss": 0.878117024898529,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.711380481719971,
        "cur_std": 0.40702023506164553,
        "prompt": "ced Prompt: Writey Python functionischerum the frequency accompanied each character!",
        "nll_prompt": -8.091615676879883
    },
    {
        "epoch": 28,
        "loss": 0.8135351538658142,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.240838050842285,
        "best_std": 0.38316781520843507,
        "cur_kl": 7.3874053955078125,
        "cur_std": 0.3568572998046875,
        "prompt": "ced Prompt: Write quad Python functionischerum the frequency accompanied each character!",
        "nll_prompt": -9.467761993408203
    },
    {
        "epoch": 29,
        "loss": 0.9031187891960144,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 7.054089069366455,
        "cur_std": 0.40350022315979006,
        "prompt": "itional Prompt: Write quad Python functionischerum the frequency accompanied each character!",
        "nll_prompt": -9.459668159484863
    },
    {
        "epoch": 30,
        "loss": 0.8876981139183044,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.05001449584961,
        "cur_std": 0.40438070297241213,
        "prompt": "itional Prompt: Write quad Python function Fowlerum the frequency accompanied each character!",
        "nll_prompt": -9.656031608581543
    },
    {
        "epoch": 31,
        "loss": 0.9066797494888306,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 10.357892990112305,
        "cur_std": 0.42362394332885744,
        "prompt": "itional Prompt: Write quad Python function waterproofum the frequency accompanied each character!",
        "nll_prompt": -9.67653751373291
    },
    {
        "epoch": 32,
        "loss": 1.0350412130355835,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 11.372262954711914,
        "cur_std": 0.3711116790771484,
        "prompt": " Chron Prompt: Write quad Python function waterproofum the frequency accompanied each character!",
        "nll_prompt": -9.828680992126465
    },
    {
        "epoch": 33,
        "loss": 1.0638357400894165,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 11.367136001586914,
        "cur_std": 0.3658531665802002,
        "prompt": " Chron Prompt: Write quad PythonION waterproofum the frequency accompanied each character!",
        "nll_prompt": -10.62082576751709
    },
    {
        "epoch": 34,
        "loss": 0.924470067024231,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.663886070251465,
        "cur_std": 0.38053820133209226,
        "prompt": " Chron Prompt: Write quad PythonION waterproofum the frequency occurrence each character!",
        "nll_prompt": -10.113146781921387
    },
    {
        "epoch": 35,
        "loss": 0.9775730967521667,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.757736206054688,
        "cur_std": 0.3805736303329468,
        "prompt": " Chron Prompt: Write quad PythonIONesticum the frequency occurrence each character!",
        "nll_prompt": -9.751998901367188
    },
    {
        "epoch": 36,
        "loss": 0.8480927348136902,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.70259952545166,
        "cur_std": 0.3872547626495361,
        "prompt": "� Prompt: Write quad PythonIONesticum the frequency occurrence each character!",
        "nll_prompt": -9.615703582763672
    },
    {
        "epoch": 37,
        "loss": 0.9201084971427917,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.00808334350586,
        "cur_std": 0.37569513320922854,
        "prompt": "� Prompt: Write quad PythonIONesticThe the frequency occurrence each character!",
        "nll_prompt": -9.666339874267578
    },
    {
        "epoch": 38,
        "loss": 0.8810123801231384,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.127264022827148,
        "cur_std": 0.36747174263000487,
        "prompt": "� Prompt: Write quad PythonIONiallyThe the frequency occurrence each character!",
        "nll_prompt": -9.568846702575684
    },
    {
        "epoch": 39,
        "loss": 0.9135118126869202,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.538055419921875,
        "cur_std": 0.37592625617980957,
        "prompt": "� Prompt: Write quad PythonION supThe the frequency occurrence each character!",
        "nll_prompt": -9.575451850891113
    },
    {
        "epoch": 40,
        "loss": 0.9863695502281189,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.295161247253418,
        "cur_std": 0.38724186420440676,
        "prompt": "� Prompt: Write quad Python responsive supThe the frequency occurrence each character!",
        "nll_prompt": -9.653313636779785
    },
    {
        "epoch": 41,
        "loss": 0.9577985405921936,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.439105987548828,
        "cur_std": 0.38997821807861327,
        "prompt": "� Prompt: Write quad Python responsive sup Hours the frequency occurrence each character!",
        "nll_prompt": -10.08237361907959
    },
    {
        "epoch": 42,
        "loss": 0.9567450284957886,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.272828102111816,
        "cur_std": 0.3841841220855713,
        "prompt": "� Prompt: Write quad Python responsive sup� the frequency occurrence each character!",
        "nll_prompt": -10.55372428894043
    },
    {
        "epoch": 43,
        "loss": 0.8960774540901184,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.171390533447266,
        "cur_std": 0.4077607154846191,
        "prompt": "� Prompt: Write quad Python impact sup� the frequency occurrence each character!",
        "nll_prompt": -10.662890434265137
    },
    {
        "epoch": 44,
        "loss": 0.8689734935760498,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.70734977722168,
        "cur_std": 0.4004661560058594,
        "prompt": "� Prompt: Write quad Python impact supsylv the frequency occurrence each character!",
        "nll_prompt": -10.13869571685791
    },
    {
        "epoch": 45,
        "loss": 0.8857485055923462,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.820724487304688,
        "cur_std": 0.41768746376037597,
        "prompt": "� Prompt: Writeita Python impact supsylv the frequency occurrence each character!",
        "nll_prompt": -9.852960586547852
    },
    {
        "epoch": 46,
        "loss": 1.0038721561431885,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.046263694763184,
        "cur_std": 0.4198957920074463,
        "prompt": "� Prompt: Writeita Python impact Texsylv the frequency occurrence each character!",
        "nll_prompt": -10.294095993041992
    },
    {
        "epoch": 47,
        "loss": 0.9360445737838745,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.858678817749023,
        "cur_std": 0.3978651285171509,
        "prompt": "� Prompt: Write De Python impact Texsylv the frequency occurrence each character!",
        "nll_prompt": -9.845684051513672
    },
    {
        "epoch": 48,
        "loss": 0.9504554271697998,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.235880851745605,
        "cur_std": 0.39658527374267577,
        "prompt": "� Prompt: Write De Python impact Tex doomed the frequency occurrence each character!",
        "nll_prompt": -9.432518005371094
    },
    {
        "epoch": 49,
        "loss": 0.9444330930709839,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.754473686218262,
        "cur_std": 0.35117063522338865,
        "prompt": " Some Prompt: Write De Python impact Tex doomed the frequency occurrence each character!",
        "nll_prompt": -9.710357666015625
    },
    {
        "epoch": 50,
        "loss": 0.9287474751472473,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.736165046691895,
        "cur_std": 0.39173026084899903,
        "prompt": " Some Prompt: Write De Pythonse Tex doomed the frequency occurrence each character!",
        "nll_prompt": -9.647089958190918
    },
    {
        "epoch": 51,
        "loss": 0.9485580325126648,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.692901611328125,
        "cur_std": 0.4502148151397705,
        "prompt": " Some Prompt: Write De Pythonse Tex Ou the frequency occurrence each character!",
        "nll_prompt": -9.990199089050293
    },
    {
        "epoch": 52,
        "loss": 0.9784145355224609,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 10.610639572143555,
        "cur_std": 0.43593220710754393,
        "prompt": " tuning Prompt: Write De Pythonse Tex Ou the frequency occurrence each character!",
        "nll_prompt": -9.784185409545898
    },
    {
        "epoch": 53,
        "loss": 0.9175662994384766,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 10.324946403503418,
        "cur_std": 0.4172659873962402,
        "prompt": " tuning Prompt: Write likely Pythonse Tex Ou the frequency occurrence each character!",
        "nll_prompt": -10.436152458190918
    },
    {
        "epoch": 54,
        "loss": 0.984583854675293,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 10.572760581970215,
        "cur_std": 0.4444112300872803,
        "prompt": " tuning Prompt: Write novel Pythonse Tex Ou the frequency occurrence each character!",
        "nll_prompt": -9.913952827453613
    },
    {
        "epoch": 55,
        "loss": 0.9743445515632629,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.96332836151123,
        "cur_std": 0.42465596199035643,
        "prompt": " require Prompt: Write novel Pythonse Tex Ou the frequency occurrence each character!",
        "nll_prompt": -10.158116340637207
    },
    {
        "epoch": 56,
        "loss": 1.0352264642715454,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.525140762329102,
        "cur_std": 0.37666094303131104,
        "prompt": " require Prompt: Write novel Pythonse Texppelin the frequency occurrence each character!",
        "nll_prompt": -9.995170593261719
    },
    {
        "epoch": 57,
        "loss": 0.9511891007423401,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.847590446472168,
        "cur_std": 0.4546040534973145,
        "prompt": " require Prompt: Write novel Pythonse Texinating the frequency occurrence each character!",
        "nll_prompt": -9.822081565856934
    },
    {
        "epoch": 58,
        "loss": 0.8917466402053833,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.358960151672363,
        "cur_std": 0.4103216648101807,
        "prompt": " require Prompt: Write fle Pythonse Texinating the frequency occurrence each character!",
        "nll_prompt": -10.82258415222168
    },
    {
        "epoch": 59,
        "loss": 0.9464682340621948,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.135388374328613,
        "cur_std": 0.39744088649749754,
        "prompt": " Critics Prompt: Write fle Pythonse Texinating the frequency occurrence each character!",
        "nll_prompt": -10.392820358276367
    },
    {
        "epoch": 60,
        "loss": 0.9323627352714539,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.661602973937988,
        "cur_std": 0.3686336040496826,
        "prompt": " Critics Prompt: Write fle Pythonse Texinating the frequency claimed each character!",
        "nll_prompt": -11.014679908752441
    },
    {
        "epoch": 61,
        "loss": 0.981242299079895,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.607478141784668,
        "cur_std": 0.4089550495147705,
        "prompt": " Critics Prompt: Write fle Pythonse Texinating the frequencyg each character!",
        "nll_prompt": -10.766803741455078
    },
    {
        "epoch": 62,
        "loss": 1.0137085914611816,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.908255577087402,
        "cur_std": 0.3756394624710083,
        "prompt": " Critics Prompt: Write fle Pythonse Texways the frequencyg each character!",
        "nll_prompt": -10.568507194519043
    },
    {
        "epoch": 63,
        "loss": 1.0027996301651,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.624981880187988,
        "cur_std": 0.4101510524749756,
        "prompt": " during Prompt: Write fle Pythonse Texways the frequencyg each character!",
        "nll_prompt": -10.348011016845703
    },
    {
        "epoch": 64,
        "loss": 0.9694648385047913,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.728177070617676,
        "cur_std": 0.4003302574157715,
        "prompt": " Design Prompt: Write fle Pythonse Texways the frequencyg each character!",
        "nll_prompt": -10.139544486999512
    },
    {
        "epoch": 65,
        "loss": 0.9294685125350952,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.05416202545166,
        "cur_std": 0.41782398223876954,
        "prompt": " Design Prompt: Write fle Pythonse Tex return the frequencyg each character!",
        "nll_prompt": -9.647759437561035
    },
    {
        "epoch": 66,
        "loss": 0.8973976969718933,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.779684066772461,
        "cur_std": 0.4253300666809082,
        "prompt": " Design Prompt: Write fle Pythonse Texz the frequencyg each character!",
        "nll_prompt": -9.780879020690918
    },
    {
        "epoch": 67,
        "loss": 0.995644211769104,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.510807037353516,
        "cur_std": 0.4045865535736084,
        "prompt": " Design Prompt: Write fle Pythonse Tex contributed the frequencyg each character!",
        "nll_prompt": -10.430521965026855
    },
    {
        "epoch": 68,
        "loss": 1.0211130380630493,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.413580894470215,
        "cur_std": 0.43617839813232423,
        "prompt": " Design Prompt: Write fle Pythonse Texoll the frequencyg each character!",
        "nll_prompt": -10.05129337310791
    },
    {
        "epoch": 69,
        "loss": 0.9088422060012817,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.74925708770752,
        "cur_std": 0.4412806510925293,
        "prompt": " Design Prompt: Write fle Pythonse Tex composing the frequencyg each character!",
        "nll_prompt": -10.127758979797363
    },
    {
        "epoch": 70,
        "loss": 0.9921714067459106,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.680102348327637,
        "cur_std": 0.4302514553070068,
        "prompt": " Design Prompt: Write fle Pythonse Tex composing the frequencyinging each character!",
        "nll_prompt": -10.333392143249512
    },
    {
        "epoch": 71,
        "loss": 0.9502255320549011,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.199135780334473,
        "cur_std": 0.41121630668640136,
        "prompt": " Design Prompt: Write fle Python feeling Tex composing the frequencyinging each character!",
        "nll_prompt": -10.629260063171387
    },
    {
        "epoch": 72,
        "loss": 0.9632190465927124,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.097134590148926,
        "cur_std": 0.4091198444366455,
        "prompt": " Design Prompt: Write fle Python feeling Tex novel the frequencyinging each character!",
        "nll_prompt": -10.819419860839844
    },
    {
        "epoch": 73,
        "loss": 0.9846338629722595,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.533980369567871,
        "cur_std": 0.3730015277862549,
        "prompt": " Design Prompt: Write fle Python feeling molecular novel the frequencyinging each character!",
        "nll_prompt": -10.55233097076416
    },
    {
        "epoch": 74,
        "loss": 0.990207850933075,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.1328706741333,
        "cur_std": 0.4093172550201416,
        "prompt": " Design Prompt: Write fle Python feeling molecular Bard the frequencyinging each character!",
        "nll_prompt": -11.514222145080566
    },
    {
        "epoch": 75,
        "loss": 0.9372035264968872,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.335992813110352,
        "cur_std": 0.39365599155426023,
        "prompt": " Design Prompt: Write fle Python feeling manners Bard the frequencyinging each character!",
        "nll_prompt": -11.451769828796387
    },
    {
        "epoch": 76,
        "loss": 0.9655730724334717,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.958717346191406,
        "cur_std": 0.4221765995025635,
        "prompt": " Design Prompt: Write del Python feeling manners Bard the frequencyinging each character!",
        "nll_prompt": -10.491625785827637
    },
    {
        "epoch": 77,
        "loss": 0.908618152141571,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.927734375,
        "cur_std": 0.3863548994064331,
        "prompt": " Design Prompt: Write del Python feeling manners Smith the frequencyinging each character!",
        "nll_prompt": -10.358880043029785
    },
    {
        "epoch": 78,
        "loss": 0.9125571846961975,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.13524055480957,
        "cur_std": 0.3726597785949707,
        "prompt": " reconstruction Prompt: Write del Python feeling manners Smith the frequencyinging each character!",
        "nll_prompt": -10.45865535736084
    },
    {
        "epoch": 79,
        "loss": 0.9069775938987732,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.446111679077148,
        "cur_std": 0.36162657737731935,
        "prompt": " reconstruction Prompt: Write del Python Cl manners Smith the frequencyinging each character!",
        "nll_prompt": -10.66248607635498
    },
    {
        "epoch": 80,
        "loss": 0.9175660610198975,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.11673355102539,
        "cur_std": 0.3756962776184082,
        "prompt": " reconstruction Prompt: Write del Python point manners Smith the frequencyinging each character!",
        "nll_prompt": -10.415112495422363
    },
    {
        "epoch": 81,
        "loss": 0.9413949251174927,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.17856502532959,
        "cur_std": 0.38807382583618166,
        "prompt": " reconstruction Prompt: Write del Python point culinary Smith the frequencyinging each character!",
        "nll_prompt": -10.275364875793457
    },
    {
        "epoch": 82,
        "loss": 0.9808166027069092,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.314361572265625,
        "cur_std": 0.4021036148071289,
        "prompt": "Example Prompt: Write del Python point culinary Smith the frequencyinging each character!",
        "nll_prompt": -9.769237518310547
    },
    {
        "epoch": 83,
        "loss": 0.9239050149917603,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.700980186462402,
        "cur_std": 0.39587233066558836,
        "prompt": "Example Prompt: Write del Python completely culinary Smith the frequencyinging each character!",
        "nll_prompt": -9.89005184173584
    },
    {
        "epoch": 84,
        "loss": 0.9041030406951904,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.727705001831055,
        "cur_std": 0.42300753593444823,
        "prompt": "Example Prompt: Write del Python completely culinary Col the frequencyinging each character!",
        "nll_prompt": -9.999162673950195
    },
    {
        "epoch": 85,
        "loss": 0.8944137096405029,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 10.357766151428223,
        "cur_std": 0.4055010318756104,
        "prompt": "Example Prompt: Write del Python completely culinary Col comparative frequencyinging each character!",
        "nll_prompt": -10.371625900268555
    },
    {
        "epoch": 86,
        "loss": 0.9232123494148254,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.360198020935059,
        "cur_std": 0.440414571762085,
        "prompt": "Example Prompt: Write del Python completely culinary Col tu frequencyinging each character!",
        "nll_prompt": -10.29841136932373
    },
    {
        "epoch": 87,
        "loss": 0.9895853400230408,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.754920959472656,
        "cur_std": 0.46798434257507326,
        "prompt": "Example Prompt: Write del Python Erd culinary Col tu frequencyinging each character!",
        "nll_prompt": -10.824803352355957
    },
    {
        "epoch": 88,
        "loss": 0.9777082800865173,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.285889625549316,
        "cur_std": 0.4624497890472412,
        "prompt": "Example Prompt: Write del Python Erd sway Col tu frequencyinging each character!",
        "nll_prompt": -10.836688041687012
    },
    {
        "epoch": 89,
        "loss": 0.8656114935874939,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.763214111328125,
        "cur_std": 0.4457846164703369,
        "prompt": "Example Prompt: Write del Python Erd swaysur tu frequencyinging each character!",
        "nll_prompt": -10.447898864746094
    },
    {
        "epoch": 90,
        "loss": 0.940650224685669,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.825919151306152,
        "cur_std": 0.4112226963043213,
        "prompt": "Example Prompt: Write paraly Python Erd swaysur tu frequencyinging each character!",
        "nll_prompt": -11.875483512878418
    },
    {
        "epoch": 91,
        "loss": 0.9316019415855408,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.720711708068848,
        "cur_std": 0.4034996032714844,
        "prompt": "Example Prompt: Write paraly Python Erd sway abst tu frequencyinging each character!",
        "nll_prompt": -12.226202964782715
    },
    {
        "epoch": 92,
        "loss": 0.9312487840652466,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.60190200805664,
        "cur_std": 0.36665337085723876,
        "prompt": " 3 Prompt: Write paraly Python Erd sway abst tu frequencyinging each character!",
        "nll_prompt": -12.304304122924805
    },
    {
        "epoch": 93,
        "loss": 0.91026771068573,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.245003700256348,
        "cur_std": 0.39527842998504636,
        "prompt": " 3 Prompt: Write paraly Python Erd swayny tu frequencyinging each character!",
        "nll_prompt": -11.774288177490234
    },
    {
        "epoch": 94,
        "loss": 1.0036317110061646,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.652522087097168,
        "cur_std": 0.3878633975982666,
        "prompt": " 3 Prompt: Write all Python Erd swayny tu frequencyinging each character!",
        "nll_prompt": -10.557828903198242
    },
    {
        "epoch": 95,
        "loss": 0.9050525426864624,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 8.810508728027344,
        "cur_std": 0.39119110107421873,
        "prompt": " providing Prompt: Write all Python Erd swayny tu frequencyinging each character!",
        "nll_prompt": -10.772947311401367
    },
    {
        "epoch": 96,
        "loss": 1.0025634765625,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.95236587524414,
        "cur_std": 0.38657503128051757,
        "prompt": " providing Prompt: Write all Python Erd weekny tu frequencyinging each character!",
        "nll_prompt": -10.636741638183594
    },
    {
        "epoch": 97,
        "loss": 0.8991997838020325,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.760032653808594,
        "cur_std": 0.4056398868560791,
        "prompt": " park Prompt: Write all Python Erd weekny tu frequencyinging each character!",
        "nll_prompt": -10.40599250793457
    },
    {
        "epoch": 98,
        "loss": 0.9586666822433472,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 10.25039291381836,
        "cur_std": 0.3992931842803955,
        "prompt": " park Prompt: Write all Python Erd weeka tu frequencyinging each character!",
        "nll_prompt": -10.329716682434082
    },
    {
        "epoch": 99,
        "loss": 1.0026675462722778,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 9.886617660522461,
        "cur_std": 0.4054591178894043,
        "prompt": " park Prompt: Write all Python Erd Avea tu frequencyinging each character!",
        "nll_prompt": -10.36782169342041
    },
    {
        "epoch": 100,
        "loss": 0.9786961078643799,
        "best_loss": 0.8135351538658142,
        "best_kl": 7.054089069366455,
        "best_std": 0.40350022315979006,
        "cur_kl": 11.453808784484863,
        "cur_std": 0.43904590606689453,
        "prompt": " park Prompt: Write all Python Erdyaha tu frequencyinging each character!",
        "nll_prompt": -10.796012878417969
    }
]