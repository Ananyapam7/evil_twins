[
    {
        "epoch": 1,
        "loss": 1.468139886856079,
        "best_loss": 1.468139886856079,
        "best_kl": 19.66707992553711,
        "best_std": 0.5045475959777832,
        "cur_kl": 19.66707992553711,
        "cur_std": 0.5045475959777832,
        "prompt": "Prompt: Write a Python function called 'fahrenheit_ chips_",
        "nll_prompt": -3.8930554389953613
    },
    {
        "epoch": 2,
        "loss": 1.4160866737365723,
        "best_loss": 1.4160866737365723,
        "best_kl": 16.552480697631836,
        "best_std": 0.55667724609375,
        "cur_kl": 16.552480697631836,
        "cur_std": 0.55667724609375,
        "prompt": "Prompt: Write a Python functionips 'fahrenheit_ chips_",
        "nll_prompt": -5.556835174560547
    },
    {
        "epoch": 3,
        "loss": 1.2645163536071777,
        "best_loss": 1.2645163536071777,
        "best_kl": 16.552480697631836,
        "best_std": 0.55667724609375,
        "cur_kl": 17.921218872070312,
        "cur_std": 0.5721123695373536,
        "prompt": "Prompt: Write a Python functionips 'fahrenheit_ mix_",
        "nll_prompt": -5.47725772857666
    },
    {
        "epoch": 4,
        "loss": 1.2482383251190186,
        "best_loss": 1.2482383251190186,
        "best_kl": 13.40646743774414,
        "best_std": 0.5811188697814942,
        "cur_kl": 13.40646743774414,
        "cur_std": 0.5811188697814942,
        "prompt": "Prompt: Write a Python functionips 'fahrenheit_ mix*",
        "nll_prompt": -6.11788272857666
    },
    {
        "epoch": 5,
        "loss": 1.1738641262054443,
        "best_loss": 1.1738641262054443,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.33700704574585,
        "cur_std": 0.48220000267028806,
        "prompt": "Prompt: Write a Python functionips 'fahrenheit_ mix'?",
        "nll_prompt": -5.879042625427246
    },
    {
        "epoch": 6,
        "loss": 1.0598939657211304,
        "best_loss": 1.0598939657211304,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.564885139465332,
        "cur_std": 0.4811094760894775,
        "prompt": "Prompt: Write a Python functionips 'fahrenheit_ signals'?",
        "nll_prompt": -5.988484859466553
    },
    {
        "epoch": 7,
        "loss": 1.042588472366333,
        "best_loss": 1.042588472366333,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.392073631286621,
        "cur_std": 0.4883858680725098,
        "prompt": "Prompt: Write a Python functionips 'fahrenheit believe signals'?",
        "nll_prompt": -6.386316299438477
    },
    {
        "epoch": 8,
        "loss": 0.9864932298660278,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.902061462402344,
        "cur_std": 0.46598448753356936,
        "prompt": "Prompt: Write a Python functionips 'f Rationalrenheit believe signals'?",
        "nll_prompt": -8.450241088867188
    },
    {
        "epoch": 9,
        "loss": 1.0914835929870605,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.48140811920166,
        "cur_std": 0.4799804210662842,
        "prompt": "Prompt: Write a Python functionips 'f Rationalrenheit believe patient'?",
        "nll_prompt": -8.54274845123291
    },
    {
        "epoch": 10,
        "loss": 1.063819408416748,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 9.485575675964355,
        "cur_std": 0.4675906181335449,
        "prompt": "Prompt: Write a Python functionips07f Rationalrenheit believe patient'?",
        "nll_prompt": -9.256275177001953
    },
    {
        "epoch": 11,
        "loss": 1.1325219869613647,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 10.411839485168457,
        "cur_std": 0.4772224426269531,
        "prompt": "Prom rearr: Write a Python functionips07f Rationalrenheit believe patient'?",
        "nll_prompt": -11.541946411132812
    },
    {
        "epoch": 12,
        "loss": 1.1183298826217651,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 10.033523559570312,
        "cur_std": 0.4748298168182373,
        "prompt": "Prom rearr: Write a Python function structures07f Rationalrenheit believe patient'?",
        "nll_prompt": -11.640263557434082
    },
    {
        "epoch": 13,
        "loss": 1.170670509338379,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 9.47324275970459,
        "cur_std": 0.45848474502563474,
        "prompt": "Prom rearr: Write a Python function structuresgef Rationalrenheit believe patient'?",
        "nll_prompt": -11.258379936218262
    },
    {
        "epoch": 14,
        "loss": 1.0840214490890503,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 9.13772201538086,
        "cur_std": 0.45928425788879396,
        "prompt": "Prom rearr: Write a Python functionRIgef Rationalrenheit believe patient'?",
        "nll_prompt": -11.585630416870117
    },
    {
        "epoch": 15,
        "loss": 1.0618914365768433,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.406195640563965,
        "cur_std": 0.45391101837158204,
        "prompt": "Prom rearr: Write a Python functionRIgef Rationalrenheit believealm'?",
        "nll_prompt": -11.644749641418457
    },
    {
        "epoch": 16,
        "loss": 0.9875273108482361,
        "best_loss": 0.9864932298660278,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.569522857666016,
        "cur_std": 0.4379600524902344,
        "prompt": "Prom rearr: Write a Python functionRIgefCNrenheit believealm'?",
        "nll_prompt": -11.147181510925293
    },
    {
        "epoch": 17,
        "loss": 0.9218394160270691,
        "best_loss": 0.9218394160270691,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.046921730041504,
        "cur_std": 0.442229175567627,
        "prompt": "Prom�: Write a Python functionRIgefCNrenheit believealm'?",
        "nll_prompt": -11.585874557495117
    },
    {
        "epoch": 18,
        "loss": 1.0793548822402954,
        "best_loss": 0.9218394160270691,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.504060745239258,
        "cur_std": 0.451554012298584,
        "prompt": "Prom Early: Write a Python functionRIgefCNrenheit believealm'?",
        "nll_prompt": -10.669023513793945
    },
    {
        "epoch": 19,
        "loss": 1.0316444635391235,
        "best_loss": 0.9218394160270691,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.897902488708496,
        "cur_std": 0.42136144638061523,
        "prompt": "Prom�: Write a Python functionRIgefCNrenheit believealm'?",
        "nll_prompt": -11.076104164123535
    },
    {
        "epoch": 20,
        "loss": 0.9073111414909363,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.342016220092773,
        "cur_std": 0.4217665672302246,
        "prompt": "Prom�: Write a Python functionRIgechtCNrenheit believealm'?",
        "nll_prompt": -11.83896541595459
    },
    {
        "epoch": 21,
        "loss": 1.0346907377243042,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.255250930786133,
        "cur_std": 0.45096216201782224,
        "prompt": "Prom your: Write a Python functionRIgechtCNrenheit believealm'?",
        "nll_prompt": -11.07386302947998
    },
    {
        "epoch": 22,
        "loss": 1.0844745635986328,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.908078670501709,
        "cur_std": 0.4552036762237549,
        "prompt": "Prom your: Write a Python functionRI mentionedchtCNrenheit believealm'?",
        "nll_prompt": -11.14919376373291
    },
    {
        "epoch": 23,
        "loss": 1.0630146265029907,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.075371742248535,
        "cur_std": 0.4399214744567871,
        "prompt": "Prom your: provide a Python functionRI mentionedchtCNrenheit believealm'?",
        "nll_prompt": -11.920750617980957
    },
    {
        "epoch": 24,
        "loss": 1.1331892013549805,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.977059364318848,
        "cur_std": 0.4532141208648682,
        "prompt": "Prom your: provide a Python functionRI mentioned�CNrenheit believealm'?",
        "nll_prompt": -11.944120407104492
    },
    {
        "epoch": 25,
        "loss": 1.0453640222549438,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.992259502410889,
        "cur_std": 0.43316125869750977,
        "prompt": "Prom your: provide a Python functionRI mentioned�ersrenheit believealm'?",
        "nll_prompt": -11.93665599822998
    },
    {
        "epoch": 26,
        "loss": 1.0856825113296509,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.648932933807373,
        "cur_std": 0.42624802589416505,
        "prompt": "Prom your: provide a Python functionRI mentionedhtersrenheit believealm'?",
        "nll_prompt": -11.656303405761719
    },
    {
        "epoch": 27,
        "loss": 1.017978310585022,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 7.939078330993652,
        "cur_std": 0.4301638126373291,
        "prompt": "Prom your: provide a Python functionRI mentionedENersrenheit believealm'?",
        "nll_prompt": -11.663310050964355
    },
    {
        "epoch": 28,
        "loss": 0.9621267318725586,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 9.656598091125488,
        "cur_std": 0.45835132598876954,
        "prompt": "Prom chief: provide a Python functionRI mentionedENersrenheit believealm'?",
        "nll_prompt": -11.400544166564941
    },
    {
        "epoch": 29,
        "loss": 1.1303850412368774,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 9.493045806884766,
        "cur_std": 0.44417481422424315,
        "prompt": "ience chief: provide a Python functionRI mentionedENersrenheit believealm'?",
        "nll_prompt": -11.064435958862305
    },
    {
        "epoch": 30,
        "loss": 1.1955506801605225,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.502685546875,
        "cur_std": 0.4025867938995361,
        "prompt": "ience chief: provide a Python functionRI mentionedENersrenheit believer'?",
        "nll_prompt": -10.549784660339355
    },
    {
        "epoch": 31,
        "loss": 1.1079984903335571,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.882506370544434,
        "cur_std": 0.3874586820602417,
        "prompt": "ience chief: provide a Python function trail mentionedENersrenheit believer'?",
        "nll_prompt": -10.986289978027344
    },
    {
        "epoch": 32,
        "loss": 1.1309274435043335,
        "best_loss": 0.9073111414909363,
        "best_kl": 7.33700704574585,
        "best_std": 0.48220000267028806,
        "cur_kl": 8.010171890258789,
        "cur_std": 0.38503270149230956,
        "prompt": "ience chief: provide a Python function trail mentionedENersrenheitisar'?",
        "nll_prompt": -11.653389930725098
    },
    {
        "epoch": 33,
        "loss": 1.0464178323745728,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 6.845810413360596,
        "cur_std": 0.38689870834350587,
        "prompt": "ience chief: provide a Python function trail foreENersrenheitisar'?",
        "nll_prompt": -11.208057403564453
    },
    {
        "epoch": 34,
        "loss": 0.9274657964706421,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 6.940556526184082,
        "cur_std": 0.36768326759338377,
        "prompt": " input chief: provide a Python function trail foreENersrenheitisar'?",
        "nll_prompt": -11.48816967010498
    },
    {
        "epoch": 35,
        "loss": 0.9954827427864075,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.024930953979492,
        "cur_std": 0.36576545238494873,
        "prompt": " Calder chief: provide a Python function trail foreENersrenheitisar'?",
        "nll_prompt": -10.93171215057373
    },
    {
        "epoch": 36,
        "loss": 1.076529860496521,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.933098793029785,
        "cur_std": 0.399658203125,
        "prompt": " Calder chief: provide a Python function trail fore classesersrenheitisar'?",
        "nll_prompt": -10.941404342651367
    },
    {
        "epoch": 37,
        "loss": 1.113777995109558,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.172565460205078,
        "cur_std": 0.38343994617462157,
        "prompt": " Calder chief: provide a Python function con fore classesersrenheitisar'?",
        "nll_prompt": -10.757121086120605
    },
    {
        "epoch": 38,
        "loss": 1.1143362522125244,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.140594482421875,
        "cur_std": 0.3641615152359009,
        "prompt": " peaceful chief: provide a Python function con fore classesersrenheitisar'?",
        "nll_prompt": -11.235535621643066
    },
    {
        "epoch": 39,
        "loss": 1.1195145845413208,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.948040962219238,
        "cur_std": 0.397254490852356,
        "prompt": " peaceful chief: provide a Python functionussian fore classesersrenheitisar'?",
        "nll_prompt": -11.501282691955566
    },
    {
        "epoch": 40,
        "loss": 1.0596203804016113,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.06040096282959,
        "cur_std": 0.3938838720321655,
        "prompt": " peaceful chiefexp provide a Python functionussian fore classesersrenheitisar'?",
        "nll_prompt": -12.037964820861816
    },
    {
        "epoch": 41,
        "loss": 1.067348599433899,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.629435539245605,
        "cur_std": 0.4176370143890381,
        "prompt": " peaceful chiefexp provide a Python functionussian fore classes SERVrenheitisar'?",
        "nll_prompt": -12.643589973449707
    },
    {
        "epoch": 42,
        "loss": 1.1228251457214355,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 10.538053512573242,
        "cur_std": 0.4328681468963623,
        "prompt": " peaceful chiefexp provide a Python functionussian at classes SERVrenheitisar'?",
        "nll_prompt": -12.444602966308594
    },
    {
        "epoch": 43,
        "loss": 1.0931450128555298,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 10.272018432617188,
        "cur_std": 0.44695329666137695,
        "prompt": " peaceful Celebexp provide a Python functionussian at classes SERVrenheitisar'?",
        "nll_prompt": -12.648194313049316
    },
    {
        "epoch": 44,
        "loss": 1.1836589574813843,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.948593139648438,
        "cur_std": 0.4117994785308838,
        "prompt": " peaceful Celebexp provide a Python functionussianik classes SERVrenheitisar'?",
        "nll_prompt": -12.761841773986816
    },
    {
        "epoch": 45,
        "loss": 1.1626949310302734,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.868891716003418,
        "cur_std": 0.4271676540374756,
        "prompt": " peaceful Celebexp provide a Python functionussianikling SERVrenheitisar'?",
        "nll_prompt": -12.622410774230957
    },
    {
        "epoch": 46,
        "loss": 1.008799433708191,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.793930053710938,
        "cur_std": 0.43006067276000975,
        "prompt": " peacefulrahexp provide a Python functionussianikling SERVrenheitisar'?",
        "nll_prompt": -12.552396774291992
    },
    {
        "epoch": 47,
        "loss": 1.1407550573349,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.629751205444336,
        "cur_std": 0.39026622772216796,
        "prompt": " peacefulrahexp provide a Python functionussianikling choicerenheitisar'?",
        "nll_prompt": -12.127467155456543
    },
    {
        "epoch": 48,
        "loss": 1.0981676578521729,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.47641658782959,
        "cur_std": 0.4012406826019287,
        "prompt": " peacefulrahexp provide a Python functionussianikling confirmingrenheitisar'?",
        "nll_prompt": -12.042149543762207
    },
    {
        "epoch": 49,
        "loss": 1.0167059898376465,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.131186485290527,
        "cur_std": 0.4007441520690918,
        "prompt": " Exerciserahexp provide a Python functionussianikling confirmingrenheitisar'?",
        "nll_prompt": -12.238456726074219
    },
    {
        "epoch": 50,
        "loss": 1.1231040954589844,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.028273582458496,
        "cur_std": 0.39628286361694337,
        "prompt": " Exerciserahexp provide a Python functionussianiklingSomethingrenheitisar'?",
        "nll_prompt": -12.254992485046387
    },
    {
        "epoch": 51,
        "loss": 1.0838191509246826,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.035453796386719,
        "cur_std": 0.3810002565383911,
        "prompt": " Exerciserahexp provide a Python functionussianikling needrenheitisar'?",
        "nll_prompt": -11.81605052947998
    },
    {
        "epoch": 52,
        "loss": 1.1481024026870728,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.130406379699707,
        "cur_std": 0.39904873371124266,
        "prompt": " ExerciserahexpJamie a Python functionussianikling needrenheitisar'?",
        "nll_prompt": -12.52757453918457
    },
    {
        "epoch": 53,
        "loss": 0.9811181426048279,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.092286109924316,
        "cur_std": 0.39053332805633545,
        "prompt": " Exercise AvexpJamie a Python functionussianikling needrenheitisar'?",
        "nll_prompt": -12.242932319641113
    },
    {
        "epoch": 54,
        "loss": 0.9491479396820068,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.214112281799316,
        "cur_std": 0.39002480506896975,
        "prompt": " Exercise AvexpJamie a Python functionussianikling outrenheitisar'?",
        "nll_prompt": -12.156063079833984
    },
    {
        "epoch": 55,
        "loss": 1.1256219148635864,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.124770164489746,
        "cur_std": 0.4066478729248047,
        "prompt": " Exercise AvexpJamie a Python functionesikling outrenheitisar'?",
        "nll_prompt": -11.948588371276855
    },
    {
        "epoch": 56,
        "loss": 1.013013243675232,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.149009704589844,
        "cur_std": 0.44686412811279297,
        "prompt": " Exercise AvexpJamie a Python functionesikThe outrenheitisar'?",
        "nll_prompt": -12.398212432861328
    },
    {
        "epoch": 57,
        "loss": 1.067820429801941,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.125781059265137,
        "cur_std": 0.44052629470825194,
        "prompt": " Exercise AvarmJamie a Python functionesikThe outrenheitisar'?",
        "nll_prompt": -12.19709300994873
    },
    {
        "epoch": 58,
        "loss": 1.1009653806686401,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.897384643554688,
        "cur_std": 0.449749755859375,
        "prompt": " Exercise AvarmJamie a Python functionesik answers outrenheitisar'?",
        "nll_prompt": -12.004714965820312
    },
    {
        "epoch": 59,
        "loss": 1.0758816003799438,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.164483070373535,
        "cur_std": 0.4156946659088135,
        "prompt": " Exercise AvarmJamie a Python functionesik� outrenheitisar'?",
        "nll_prompt": -12.17432689666748
    },
    {
        "epoch": 60,
        "loss": 1.0354466438293457,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.359938621520996,
        "cur_std": 0.43273491859436036,
        "prompt": " Exercise AvarmJamie a Python functionesik�constrenheitisar'?",
        "nll_prompt": -12.24501895904541
    },
    {
        "epoch": 61,
        "loss": 1.048728108406067,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.605276107788086,
        "cur_std": 0.45241265296936034,
        "prompt": " Exercise Avarm sequence a Python functionesik�constrenheitisar'?",
        "nll_prompt": -12.003361701965332
    },
    {
        "epoch": 62,
        "loss": 1.0959540605545044,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.981134414672852,
        "cur_std": 0.4253781795501709,
        "prompt": " Exercise Avarmelle a Python functionesik�constrenheitisar'?",
        "nll_prompt": -11.844640731811523
    },
    {
        "epoch": 63,
        "loss": 1.115656852722168,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.03836441040039,
        "cur_std": 0.4525008201599121,
        "prompt": " Exercise Avarmelle a Python functionesik��renheitisar'?",
        "nll_prompt": -11.848777770996094
    },
    {
        "epoch": 64,
        "loss": 0.9365805387496948,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.17965316772461,
        "cur_std": 0.43500480651855467,
        "prompt": " Exercise Avarmelle a Python functionesik owner�renheitisar'?",
        "nll_prompt": -11.82447624206543
    },
    {
        "epoch": 65,
        "loss": 1.0145128965377808,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.123526573181152,
        "cur_std": 0.4750688552856445,
        "prompt": " Exercise Avarmelle a Python functionesik��renheitisar'?",
        "nll_prompt": -12.053062438964844
    },
    {
        "epoch": 66,
        "loss": 1.104249358177185,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.386332511901855,
        "cur_std": 0.4328625202178955,
        "prompt": " Exercise rotorarmelle a Python functionesik��renheitisar'?",
        "nll_prompt": -11.87351131439209
    },
    {
        "epoch": 67,
        "loss": 1.0259498357772827,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 10.970138549804688,
        "cur_std": 0.4922614574432373,
        "prompt": " Exercise rotorarmelle a Python functiones While��renheitisar'?",
        "nll_prompt": -12.04560375213623
    },
    {
        "epoch": 68,
        "loss": 1.1415834426879883,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.88233757019043,
        "cur_std": 0.42673840522766116,
        "prompt": " Exercise rotorarmelle a Python functiones Whilerek�renheitisar'?",
        "nll_prompt": -12.082158088684082
    },
    {
        "epoch": 69,
        "loss": 1.0209347009658813,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.269749641418457,
        "cur_std": 0.4132226943969727,
        "prompt": " Decl rotorarmelle a Python functiones Whilerek�renheitisar'?",
        "nll_prompt": -11.73798656463623
    },
    {
        "epoch": 70,
        "loss": 1.0045267343521118,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.529017448425293,
        "cur_std": 0.4334765911102295,
        "prompt": "Subscribe rotorarmelle a Python functiones Whilerek�renheitisar'?",
        "nll_prompt": -12.058006286621094
    },
    {
        "epoch": 71,
        "loss": 1.1570303440093994,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 10.183841705322266,
        "cur_std": 0.4417693614959717,
        "prompt": "Subscribe rotorarmelle a Python functiones Whilearre�renheitisar'?",
        "nll_prompt": -11.991613388061523
    },
    {
        "epoch": 72,
        "loss": 0.9960567951202393,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.879790306091309,
        "cur_std": 0.42253947257995605,
        "prompt": "Subscribe photarmelle a Python functiones Whilearre�renheitisar'?",
        "nll_prompt": -12.03724193572998
    },
    {
        "epoch": 73,
        "loss": 1.0872814655303955,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.036812782287598,
        "cur_std": 0.41210222244262695,
        "prompt": "Subscribe photarmelle a Python functiones Whileist�renheitisar'?",
        "nll_prompt": -11.923066139221191
    },
    {
        "epoch": 74,
        "loss": 1.0617098808288574,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.390399932861328,
        "cur_std": 0.4081888675689697,
        "prompt": "SubscribeSubmitarmelle a Python functiones Whileist�renheitisar'?",
        "nll_prompt": -12.159385681152344
    },
    {
        "epoch": 75,
        "loss": 1.0696862936019897,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.216432571411133,
        "cur_std": 0.41497082710266114,
        "prompt": "SubscribeSubmitarmizz a Python functiones Whileist�renheitisar'?",
        "nll_prompt": -12.595826148986816
    },
    {
        "epoch": 76,
        "loss": 1.092475175857544,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.674986839294434,
        "cur_std": 0.4010042667388916,
        "prompt": " belowSubmitarmizz a Python functiones Whileist�renheitisar'?",
        "nll_prompt": -12.861172676086426
    },
    {
        "epoch": 77,
        "loss": 1.1363850831985474,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.300551414489746,
        "cur_std": 0.4035428524017334,
        "prompt": " belowSubmitarmizz a Python functiones Whiledom�renheitisar'?",
        "nll_prompt": -13.470459938049316
    },
    {
        "epoch": 78,
        "loss": 1.103895664215088,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.285269737243652,
        "cur_std": 0.40260825157165525,
        "prompt": " belowSubmitarmizz a Python functiones Laydom�renheitisar'?",
        "nll_prompt": -13.052693367004395
    },
    {
        "epoch": 79,
        "loss": 0.9692032933235168,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.444458961486816,
        "cur_std": 0.3813673734664917,
        "prompt": " below momentarmizz a Python functiones Laydom�renheitisar'?",
        "nll_prompt": -12.583197593688965
    },
    {
        "epoch": 80,
        "loss": 0.9773582220077515,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.587019920349121,
        "cur_std": 0.3800610065460205,
        "prompt": " below momentablishizz a Python functiones Laydom�renheitisar'?",
        "nll_prompt": -12.69935131072998
    },
    {
        "epoch": 81,
        "loss": 1.0360286235809326,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.910686016082764,
        "cur_std": 0.347699236869812,
        "prompt": " below Macedablishizz a Python functiones Laydom�renheitisar'?",
        "nll_prompt": -12.917530059814453
    },
    {
        "epoch": 82,
        "loss": 1.0743601322174072,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.189716339111328,
        "cur_std": 0.35497663021087644,
        "prompt": " below Macedablishizz a Python functiones Laydom�renheitnormr'?",
        "nll_prompt": -12.672626495361328
    },
    {
        "epoch": 83,
        "loss": 1.0789194107055664,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.885989189147949,
        "cur_std": 0.3760586500167847,
        "prompt": "cont Macedablishizz a Python functiones Laydom�renheitnormr'?",
        "nll_prompt": -12.177875518798828
    },
    {
        "epoch": 84,
        "loss": 1.101561188697815,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.965074062347412,
        "cur_std": 0.37903056144714353,
        "prompt": "cont Macedablishizz a Python function Susan Laydom�renheitnormr'?",
        "nll_prompt": -12.676304817199707
    },
    {
        "epoch": 85,
        "loss": 1.0991370677947998,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.503515243530273,
        "cur_std": 0.40433130264282224,
        "prompt": "cont Macedablishizz a Python function Susan Lay web�renheitnormr'?",
        "nll_prompt": -12.62434196472168
    },
    {
        "epoch": 86,
        "loss": 1.0394614934921265,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.26324462890625,
        "cur_std": 0.380163311958313,
        "prompt": "agon Macedablishizz a Python function Susan Lay web�renheitnormr'?",
        "nll_prompt": -13.024036407470703
    },
    {
        "epoch": 87,
        "loss": 1.0464569330215454,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.085238456726074,
        "cur_std": 0.38656840324401853,
        "prompt": "agon Macedablishm a Python function Susan Lay web�renheitnormr'?",
        "nll_prompt": -12.37460994720459
    },
    {
        "epoch": 88,
        "loss": 1.0596951246261597,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.147231101989746,
        "cur_std": 0.3728700876235962,
        "prompt": "agon Macedablishm a Python function Susan Lay UK�renheitnormr'?",
        "nll_prompt": -12.139326095581055
    },
    {
        "epoch": 89,
        "loss": 1.0340619087219238,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.51292896270752,
        "cur_std": 0.3802069902420044,
        "prompt": "agon Macedablishm a Python function Susan Laybl�renheitnormr'?",
        "nll_prompt": -12.411609649658203
    },
    {
        "epoch": 90,
        "loss": 1.1365519762039185,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.692586898803711,
        "cur_std": 0.4256000995635986,
        "prompt": "agon Macedablishm a Python function Susan Lay expected�renheitnormr'?",
        "nll_prompt": -12.116355895996094
    },
    {
        "epoch": 91,
        "loss": 1.1629074811935425,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.72896957397461,
        "cur_std": 0.42403435707092285,
        "prompt": "agon-ablishm a Python function Susan Lay expected�renheitnormr'?",
        "nll_prompt": -10.943610191345215
    },
    {
        "epoch": 92,
        "loss": 1.0457161664962769,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.011605262756348,
        "cur_std": 0.38430633544921877,
        "prompt": "agon-ablishm a Python function Susan Layvel�renheitnormr'?",
        "nll_prompt": -11.010576248168945
    },
    {
        "epoch": 93,
        "loss": 1.1406147480010986,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.980234622955322,
        "cur_std": 0.4031231880187988,
        "prompt": "�-ablishm a Python function Susan Layvel�renheitnormr'?",
        "nll_prompt": -11.561607360839844
    },
    {
        "epoch": 94,
        "loss": 0.9854036569595337,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.8626627922058105,
        "cur_std": 0.4312309741973877,
        "prompt": "�TPablishm a Python function Susan Layvel�renheitnormr'?",
        "nll_prompt": -12.016838073730469
    },
    {
        "epoch": 95,
        "loss": 1.0913606882095337,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.592443466186523,
        "cur_std": 0.4384135723114014,
        "prompt": "�TPablishm a Python function Susan Lay Cere�renheitnormr'?",
        "nll_prompt": -11.819477081298828
    },
    {
        "epoch": 96,
        "loss": 1.0713294744491577,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.667702674865723,
        "cur_std": 0.4209029197692871,
        "prompt": "�TPablishm a Python function Susanib Cere�renheitnormr'?",
        "nll_prompt": -11.81556510925293
    },
    {
        "epoch": 97,
        "loss": 1.0922943353652954,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.314356803894043,
        "cur_std": 0.4138317584991455,
        "prompt": "�TPablishm a Python functionisib Cere�renheitnormr'?",
        "nll_prompt": -11.379792213439941
    },
    {
        "epoch": 98,
        "loss": 1.095061182975769,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 7.997050762176514,
        "cur_std": 0.3951851844787598,
        "prompt": "�TPablishm a Python functionisib Cere�renheitRSr'?",
        "nll_prompt": -11.611201286315918
    },
    {
        "epoch": 99,
        "loss": 1.0767611265182495,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 8.054973602294922,
        "cur_std": 0.407888126373291,
        "prompt": "� 5ablishm a Python functionisib Cere�renheitRSr'?",
        "nll_prompt": -11.626774787902832
    },
    {
        "epoch": 100,
        "loss": 1.0855926275253296,
        "best_loss": 0.9073111414909363,
        "best_kl": 6.845810413360596,
        "best_std": 0.38689870834350587,
        "cur_kl": 9.225309371948242,
        "cur_std": 0.4516164302825928,
        "prompt": "�''ablishm a Python functionisib Cere�renheitRSr'?",
        "nll_prompt": -11.661399841308594
    }
]