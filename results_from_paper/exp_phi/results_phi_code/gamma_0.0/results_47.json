[
    {
        "epoch": 1,
        "loss": 2.8094866275787354,
        "best_loss": 2.8094866275787354,
        "best_kl": 20.005605697631836,
        "best_std": 1.125113582611084,
        "cur_kl": 20.005605697631836,
        "cur_std": 1.125113582611084,
        "prompt": "\"Write a Python recursive function to calculate the factorial of') given",
        "nll_prompt": -4.173027992248535
    },
    {
        "epoch": 2,
        "loss": 2.8359577655792236,
        "best_loss": 2.8094866275787354,
        "best_kl": 20.005605697631836,
        "best_std": 1.125113582611084,
        "cur_kl": 20.142438888549805,
        "cur_std": 1.1025707244873046,
        "prompt": " exploitedWrite a Python recursive function to calculate the factorial of') given",
        "nll_prompt": -5.39661169052124
    },
    {
        "epoch": 3,
        "loss": 2.7954440116882324,
        "best_loss": 2.7954440116882324,
        "best_kl": 17.096881866455078,
        "best_std": 1.0335643768310547,
        "cur_kl": 17.096881866455078,
        "cur_std": 1.0335643768310547,
        "prompt": " exploitedWrite a Python recursive function to calculate the factorial of') Abuse",
        "nll_prompt": -5.828702926635742
    },
    {
        "epoch": 4,
        "loss": 2.778489112854004,
        "best_loss": 2.778489112854004,
        "best_kl": 16.280433654785156,
        "best_std": 1.0090832710266113,
        "cur_kl": 16.280433654785156,
        "cur_std": 1.0090832710266113,
        "prompt": " exploitedWrite a Python recursive function to calculate the factorial understood') Abuse",
        "nll_prompt": -6.817760467529297
    },
    {
        "epoch": 5,
        "loss": 2.662219285964966,
        "best_loss": 2.662219285964966,
        "best_kl": 15.90897274017334,
        "best_std": 1.0649382591247558,
        "cur_kl": 15.90897274017334,
        "cur_std": 1.0649382591247558,
        "prompt": " exploitedWrite a Python recursive function to calculate the factorial understood,\" Abuse",
        "nll_prompt": -6.44449520111084
    },
    {
        "epoch": 6,
        "loss": 2.7325663566589355,
        "best_loss": 2.662219285964966,
        "best_kl": 15.436368942260742,
        "best_std": 0.9708070755004883,
        "cur_kl": 15.436368942260742,
        "cur_std": 0.9708070755004883,
        "prompt": " exploitedWrite a Python recursive packaging to calculate the factorial understood,\" Abuse",
        "nll_prompt": -8.411596298217773
    },
    {
        "epoch": 7,
        "loss": 2.5405991077423096,
        "best_loss": 2.5405991077423096,
        "best_kl": 15.20605182647705,
        "best_std": 0.9786935806274414,
        "cur_kl": 15.20605182647705,
        "cur_std": 0.9786935806274414,
        "prompt": " exploitedWrite a Python recursive packaging to calculate the factorial Tax,\" Abuse",
        "nll_prompt": -8.45206069946289
    },
    {
        "epoch": 8,
        "loss": 2.7219860553741455,
        "best_loss": 2.5405991077423096,
        "best_kl": 14.303250312805176,
        "best_std": 0.9816730499267579,
        "cur_kl": 14.303250312805176,
        "cur_std": 0.9816730499267579,
        "prompt": " exploitedWrite a Python recursive packaging to calculate the factorial Tax while Abuse",
        "nll_prompt": -8.501748085021973
    },
    {
        "epoch": 9,
        "loss": 2.6884443759918213,
        "best_loss": 2.5405991077423096,
        "best_kl": 14.303250312805176,
        "best_std": 0.9816730499267579,
        "cur_kl": 14.344755172729492,
        "cur_std": 0.9946146011352539,
        "prompt": " powerWrite a Python recursive packaging to calculate the factorial Tax while Abuse",
        "nll_prompt": -8.310405731201172
    },
    {
        "epoch": 10,
        "loss": 2.6688613891601562,
        "best_loss": 2.5405991077423096,
        "best_kl": 14.225703239440918,
        "best_std": 1.0023250579833984,
        "cur_kl": 14.225703239440918,
        "cur_std": 1.0023250579833984,
        "prompt": "oleWrite a Python recursive packaging to calculate the factorial Tax while Abuse",
        "nll_prompt": -8.62689208984375
    },
    {
        "epoch": 11,
        "loss": 2.6573801040649414,
        "best_loss": 2.5405991077423096,
        "best_kl": 14.225703239440918,
        "best_std": 1.0023250579833984,
        "cur_kl": 15.738102912902832,
        "cur_std": 0.9444005966186524,
        "prompt": "oleWrite a Python recursive packaging to calculate the factorialcm while Abuse",
        "nll_prompt": -8.837421417236328
    },
    {
        "epoch": 12,
        "loss": 2.593212127685547,
        "best_loss": 2.5405991077423096,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 14.202669143676758,
        "cur_std": 0.940153980255127,
        "prompt": " substancesWrite a Python recursive packaging to calculate the factorialcm while Abuse",
        "nll_prompt": -8.59768009185791
    },
    {
        "epoch": 13,
        "loss": 2.5257420539855957,
        "best_loss": 2.5257420539855957,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 15.104162216186523,
        "cur_std": 0.9167741775512696,
        "prompt": "EWrite a Python recursive packaging to calculate the factorialcm while Abuse",
        "nll_prompt": -8.590888023376465
    },
    {
        "epoch": 14,
        "loss": 2.6601052284240723,
        "best_loss": 2.5257420539855957,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 15.224141120910645,
        "cur_std": 0.9165936470031738,
        "prompt": "EWrite a Python recursive packaging to calculate these factorialcm while Abuse",
        "nll_prompt": -9.45174503326416
    },
    {
        "epoch": 15,
        "loss": 2.7479634284973145,
        "best_loss": 2.5257420539855957,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 15.60854434967041,
        "cur_std": 0.9577006340026856,
        "prompt": "EWrite a Python recursive packaging to calculate these factorial mud while Abuse",
        "nll_prompt": -9.29666805267334
    },
    {
        "epoch": 16,
        "loss": 2.650254249572754,
        "best_loss": 2.5257420539855957,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 14.684134483337402,
        "cur_std": 0.9790117263793945,
        "prompt": "EWrite a Python recursive packaging to calculate these factorial mud while justification",
        "nll_prompt": -8.991081237792969
    },
    {
        "epoch": 17,
        "loss": 2.686358690261841,
        "best_loss": 2.5257420539855957,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 14.90947437286377,
        "cur_std": 0.9961506843566894,
        "prompt": "EWrite a Python recursive packaging to calculate these factorial whites while justification",
        "nll_prompt": -9.08396053314209
    },
    {
        "epoch": 18,
        "loss": 2.588271141052246,
        "best_loss": 2.5257420539855957,
        "best_kl": 14.202669143676758,
        "best_std": 0.940153980255127,
        "cur_kl": 15.365138053894043,
        "cur_std": 0.9840792655944824,
        "prompt": "EWrite a Python recursive packaging to calculate>, factorial whites while justification",
        "nll_prompt": -10.107390403747559
    },
    {
        "epoch": 19,
        "loss": 2.713752031326294,
        "best_loss": 2.5257420539855957,
        "best_kl": 13.597739219665527,
        "best_std": 0.9403711318969726,
        "cur_kl": 13.597739219665527,
        "cur_std": 0.9403711318969726,
        "prompt": "EWrite a Python recursive packaging to calculate>, factorial** while justification",
        "nll_prompt": -9.525102615356445
    },
    {
        "epoch": 20,
        "loss": 2.6511003971099854,
        "best_loss": 2.5257420539855957,
        "best_kl": 13.494524002075195,
        "best_std": 0.9268032073974609,
        "cur_kl": 13.494524002075195,
        "cur_std": 0.9268032073974609,
        "prompt": "EWrite a Python recursive packaging to calculate== factorial** while justification",
        "nll_prompt": -9.123729705810547
    },
    {
        "epoch": 21,
        "loss": 2.7072901725769043,
        "best_loss": 2.5257420539855957,
        "best_kl": 13.323614120483398,
        "best_std": 0.9416714668273926,
        "cur_kl": 13.323614120483398,
        "cur_std": 0.9416714668273926,
        "prompt": "EWrite a Python recursive packaging to calculatec factorial** while justification",
        "nll_prompt": -9.033275604248047
    },
    {
        "epoch": 22,
        "loss": 2.542205333709717,
        "best_loss": 2.5257420539855957,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.243744850158691,
        "cur_std": 0.9025819778442383,
        "prompt": "E line a Python recursive packaging to calculatec factorial** while justification",
        "nll_prompt": -9.60589599609375
    },
    {
        "epoch": 23,
        "loss": 2.507885217666626,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.158367156982422,
        "cur_std": 0.951114273071289,
        "prompt": "E line a Python recursive packaging to calculate may factorial** while justification",
        "nll_prompt": -9.75191593170166
    },
    {
        "epoch": 24,
        "loss": 2.724400281906128,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.503843307495117,
        "cur_std": 0.9612774848937988,
        "prompt": "Eanch a Python recursive packaging to calculate may factorial** while justification",
        "nll_prompt": -9.812170028686523
    },
    {
        "epoch": 25,
        "loss": 2.725360870361328,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.37985610961914,
        "cur_std": 0.9628219604492188,
        "prompt": "Eanch a Python recursive packaging to calculate larger factorial** while justification",
        "nll_prompt": -9.23508071899414
    },
    {
        "epoch": 26,
        "loss": 2.720804452896118,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.030101776123047,
        "cur_std": 0.9179573059082031,
        "prompt": "Eanch a Python recursive packaging to calculateran factorial** while justification",
        "nll_prompt": -9.95669937133789
    },
    {
        "epoch": 27,
        "loss": 2.6833441257476807,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.372328758239746,
        "cur_std": 0.9370881080627441,
        "prompt": "Eanch a Python recursive Saga to calculateran factorial** while justification",
        "nll_prompt": -9.162611961364746
    },
    {
        "epoch": 28,
        "loss": 2.68251633644104,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.796027183532715,
        "cur_std": 0.9330785751342774,
        "prompt": " Endanch a Python recursive Saga to calculateran factorial** while justification",
        "nll_prompt": -9.12508487701416
    },
    {
        "epoch": 29,
        "loss": 2.5626628398895264,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.342991828918457,
        "cur_std": 0.9217303276062012,
        "prompt": " End mounting a Python recursive Saga to calculateran factorial** while justification",
        "nll_prompt": -10.019774436950684
    },
    {
        "epoch": 30,
        "loss": 2.5971710681915283,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.014165878295898,
        "cur_std": 0.920845890045166,
        "prompt": " End mounting a Python recursive Qu to calculateran factorial** while justification",
        "nll_prompt": -10.587614059448242
    },
    {
        "epoch": 31,
        "loss": 2.7184252738952637,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.66942024230957,
        "cur_std": 0.962955379486084,
        "prompt": " End mounting a Python recursive statistic to calculateran factorial** while justification",
        "nll_prompt": -9.704320907592773
    },
    {
        "epoch": 32,
        "loss": 2.6981780529022217,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 15.17735767364502,
        "cur_std": 0.9263445854187011,
        "prompt": " End mounting a Python recursivews to calculateran factorial** while justification",
        "nll_prompt": -10.472379684448242
    },
    {
        "epoch": 33,
        "loss": 2.726055860519409,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.253593444824219,
        "cur_std": 0.9518484115600586,
        "prompt": " End mounting a Python recursive recurrent to calculateran factorial** while justification",
        "nll_prompt": -10.030041694641113
    },
    {
        "epoch": 34,
        "loss": 2.58668851852417,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.845343589782715,
        "cur_std": 0.9207764625549316,
        "prompt": " End mounting a Python recursive recurrent to calculate how factorial** while justification",
        "nll_prompt": -9.244342803955078
    },
    {
        "epoch": 35,
        "loss": 2.6571223735809326,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 15.288007736206055,
        "cur_std": 0.924685001373291,
        "prompt": " End mounting a Python recursive lemon to calculate how factorial** while justification",
        "nll_prompt": -9.230180740356445
    },
    {
        "epoch": 36,
        "loss": 2.6628801822662354,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.573553085327148,
        "cur_std": 0.9731286048889161,
        "prompt": " End mounting a Python recursive lemon to calculate upon factorial** while justification",
        "nll_prompt": -9.626935958862305
    },
    {
        "epoch": 37,
        "loss": 2.6728105545043945,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.284294128417969,
        "cur_std": 0.9612709999084472,
        "prompt": " End mounting a Python recursive lemon to calculate she factorial** while justification",
        "nll_prompt": -9.952752113342285
    },
    {
        "epoch": 38,
        "loss": 2.664316415786743,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.50436782836914,
        "cur_std": 0.966524887084961,
        "prompt": " End mounting a Python recursivemon to calculate she factorial** while justification",
        "nll_prompt": -10.052648544311523
    },
    {
        "epoch": 39,
        "loss": 2.657165765762329,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.543426513671875,
        "cur_std": 0.9217928886413574,
        "prompt": " End mounting a Python recursivemon to calculateThe factorial** while justification",
        "nll_prompt": -9.893349647521973
    },
    {
        "epoch": 40,
        "loss": 2.702927589416504,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.968706130981445,
        "cur_std": 0.9160490989685058,
        "prompt": " End mounting coal Python recursivemon to calculateThe factorial** while justification",
        "nll_prompt": -10.882977485656738
    },
    {
        "epoch": 41,
        "loss": 2.657428741455078,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.727218627929688,
        "cur_std": 0.9171316146850585,
        "prompt": " End mounting coal Python recursive car to calculateThe factorial** while justification",
        "nll_prompt": -10.355146408081055
    },
    {
        "epoch": 42,
        "loss": 2.6700334548950195,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.851733207702637,
        "cur_std": 0.9225140571594238,
        "prompt": " End mounting Pure Python recursive car to calculateThe factorial** while justification",
        "nll_prompt": -9.770880699157715
    },
    {
        "epoch": 43,
        "loss": 2.677872896194458,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.852381706237793,
        "cur_std": 0.9559775352478027,
        "prompt": " End mounting Pure Python recursive Case to calculateThe factorial** while justification",
        "nll_prompt": -10.165672302246094
    },
    {
        "epoch": 44,
        "loss": 2.564007520675659,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.93637466430664,
        "cur_std": 0.9373001098632813,
        "prompt": " End mounting Pure Python recursive Exp to calculateThe factorial** while justification",
        "nll_prompt": -9.953801155090332
    },
    {
        "epoch": 45,
        "loss": 2.596283197402954,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.064677238464355,
        "cur_std": 0.9374825477600097,
        "prompt": " End mounting Pure Python recursive databases to calculateThe factorial** while justification",
        "nll_prompt": -9.810589790344238
    },
    {
        "epoch": 46,
        "loss": 2.6062068939208984,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.280580520629883,
        "cur_std": 0.9291037559509278,
        "prompt": " End mounting overr Python recursive databases to calculateThe factorial** while justification",
        "nll_prompt": -10.653791427612305
    },
    {
        "epoch": 47,
        "loss": 2.6269478797912598,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.760560035705566,
        "cur_std": 0.9091734886169434,
        "prompt": " End mounting overr Python recursiveon to calculateThe factorial** while justification",
        "nll_prompt": -10.956578254699707
    },
    {
        "epoch": 48,
        "loss": 2.7271294593811035,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.286835670471191,
        "cur_std": 0.9199825286865234,
        "prompt": " End mounting overr Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -10.620770454406738
    },
    {
        "epoch": 49,
        "loss": 2.658869981765747,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.474562644958496,
        "cur_std": 0.9274880409240722,
        "prompt": " End mounting Summer Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -10.490138053894043
    },
    {
        "epoch": 50,
        "loss": 2.6900582313537598,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.372055053710938,
        "cur_std": 0.9250182151794434,
        "prompt": " End mounting keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -10.40791130065918
    },
    {
        "epoch": 51,
        "loss": 2.6871979236602783,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.443900108337402,
        "cur_std": 0.9545304298400878,
        "prompt": " Em mounting keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -10.538121223449707
    },
    {
        "epoch": 52,
        "loss": 2.6511130332946777,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 15.2252836227417,
        "cur_std": 0.972016429901123,
        "prompt": " EmFUN keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -10.394415855407715
    },
    {
        "epoch": 53,
        "loss": 2.6735475063323975,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 15.06093692779541,
        "cur_std": 0.9015034675598145,
        "prompt": "ARDFUN keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -9.225310325622559
    },
    {
        "epoch": 54,
        "loss": 2.67073392868042,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 15.054216384887695,
        "cur_std": 0.9433752059936523,
        "prompt": "ARD victory keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -9.480155944824219
    },
    {
        "epoch": 55,
        "loss": 2.670409679412842,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 15.270931243896484,
        "cur_std": 0.9530974388122558,
        "prompt": "ARD friendly keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -9.367956161499023
    },
    {
        "epoch": 56,
        "loss": 2.7217254638671875,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.688302993774414,
        "cur_std": 0.9626377105712891,
        "prompt": " Device friendly keeping Python recursive instances to calculateThe factorial** while justification",
        "nll_prompt": -9.452649116516113
    },
    {
        "epoch": 57,
        "loss": 2.6467485427856445,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.756625175476074,
        "cur_std": 0.9670486450195312,
        "prompt": " Device friendly keeping Python recursive instancesta calculateThe factorial** while justification",
        "nll_prompt": -10.43714714050293
    },
    {
        "epoch": 58,
        "loss": 2.567610025405884,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.691911697387695,
        "cur_std": 0.9515457153320312,
        "prompt": " Device friendly keeping Python recursiveharta calculateThe factorial** while justification",
        "nll_prompt": -11.109131813049316
    },
    {
        "epoch": 59,
        "loss": 2.720529794692993,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 14.948911666870117,
        "cur_std": 0.9582334518432617,
        "prompt": " Device UI keeping Python recursiveharta calculateThe factorial** while justification",
        "nll_prompt": -11.43995475769043
    },
    {
        "epoch": 60,
        "loss": 2.717957019805908,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.307696342468262,
        "cur_std": 0.9750247001647949,
        "prompt": " Device UIeka Python recursiveharta calculateThe factorial** while justification",
        "nll_prompt": -11.195127487182617
    },
    {
        "epoch": 61,
        "loss": 2.7252330780029297,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.621221542358398,
        "cur_std": 0.9896071434020997,
        "prompt": " Device UIeka Python recursive Lisata calculateThe factorial** while justification",
        "nll_prompt": -10.671113014221191
    },
    {
        "epoch": 62,
        "loss": 2.671504497528076,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.301517486572266,
        "cur_std": 1.0020460128784179,
        "prompt": " Device UIeka Python recursive semicta calculateThe factorial** while justification",
        "nll_prompt": -11.20823860168457
    },
    {
        "epoch": 63,
        "loss": 2.641805410385132,
        "best_loss": 2.507885217666626,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.336845397949219,
        "cur_std": 0.9733250617980957,
        "prompt": " Device UI binary Python recursive semicta calculateThe factorial** while justification",
        "nll_prompt": -10.871824264526367
    },
    {
        "epoch": 64,
        "loss": 2.488373279571533,
        "best_loss": 2.488373279571533,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.30507755279541,
        "cur_std": 0.9940633773803711,
        "prompt": " Device UIple Python recursive semicta calculateThe factorial** while justification",
        "nll_prompt": -10.850825309753418
    },
    {
        "epoch": 65,
        "loss": 2.556190013885498,
        "best_loss": 2.488373279571533,
        "best_kl": 13.243744850158691,
        "best_std": 0.9025819778442383,
        "cur_kl": 13.383210182189941,
        "cur_std": 0.9778848648071289,
        "prompt": " Device UIming Python recursive semicta calculateThe factorial** while justification",
        "nll_prompt": -11.09913158416748
    },
    {
        "epoch": 66,
        "loss": 2.441843271255493,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 12.93522834777832,
        "cur_std": 0.9665593147277832,
        "prompt": " Device UIming Python recursive semicTH calculateThe factorial** while justification",
        "nll_prompt": -11.139091491699219
    },
    {
        "epoch": 67,
        "loss": 2.662130117416382,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 12.970438957214355,
        "cur_std": 0.9534022331237793,
        "prompt": " Device UIming Python recursive presentTH calculateThe factorial** while justification",
        "nll_prompt": -10.606207847595215
    },
    {
        "epoch": 68,
        "loss": 2.6559832096099854,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.146851539611816,
        "cur_std": 0.9502691268920899,
        "prompt": " Device UI One Python recursive presentTH calculateThe factorial** while justification",
        "nll_prompt": -10.629279136657715
    },
    {
        "epoch": 69,
        "loss": 2.6082396507263184,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.434361457824707,
        "cur_std": 0.9788431167602539,
        "prompt": " Device UI One Python recursive present� calculateThe factorial** while justification",
        "nll_prompt": -10.555814743041992
    },
    {
        "epoch": 70,
        "loss": 2.670775890350342,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.96366024017334,
        "cur_std": 0.9941377639770508,
        "prompt": " Comp UI One Python recursive present� calculateThe factorial** while justification",
        "nll_prompt": -10.833179473876953
    },
    {
        "epoch": 71,
        "loss": 2.701080799102783,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.570104598999023,
        "cur_std": 0.9657174110412597,
        "prompt": " Comp UI One Python recursive THE� calculateThe factorial** while justification",
        "nll_prompt": -10.798121452331543
    },
    {
        "epoch": 72,
        "loss": 2.6562371253967285,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.668519020080566,
        "cur_std": 0.9963837623596191,
        "prompt": " Comp UI One Python recursive counter� calculateThe factorial** while justification",
        "nll_prompt": -10.917022705078125
    },
    {
        "epoch": 73,
        "loss": 2.641972303390503,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.312920570373535,
        "cur_std": 1.0030481338500976,
        "prompt": " Comp tap One Python recursive counter� calculateThe factorial** while justification",
        "nll_prompt": -11.163970947265625
    },
    {
        "epoch": 74,
        "loss": 2.718806028366089,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.709970474243164,
        "cur_std": 0.9933034896850585,
        "prompt": " Compian One Python recursive counter� calculateThe factorial** while justification",
        "nll_prompt": -10.936652183532715
    },
    {
        "epoch": 75,
        "loss": 2.5751700401306152,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.828641891479492,
        "cur_std": 1.004631519317627,
        "prompt": " Compian One Python recursive one� calculateThe factorial** while justification",
        "nll_prompt": -10.903373718261719
    },
    {
        "epoch": 76,
        "loss": 2.740321636199951,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.827475547790527,
        "cur_std": 1.0158032417297362,
        "prompt": " Kapian One Python recursive one� calculateThe factorial** while justification",
        "nll_prompt": -10.539185523986816
    },
    {
        "epoch": 77,
        "loss": 2.738662004470825,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.0093994140625,
        "cur_std": 1.010977554321289,
        "prompt": "optionsian One Python recursive one� calculateThe factorial** while justification",
        "nll_prompt": -10.53302001953125
    },
    {
        "epoch": 78,
        "loss": 2.7072033882141113,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.784071922302246,
        "cur_std": 1.0049613952636718,
        "prompt": " lightsian One Python recursive one� calculateThe factorial** while justification",
        "nll_prompt": -10.306439399719238
    },
    {
        "epoch": 79,
        "loss": 2.7099435329437256,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.145059585571289,
        "cur_std": 0.9487955093383789,
        "prompt": " lightsback One Python recursive one� calculateThe factorial** while justification",
        "nll_prompt": -10.43060302734375
    },
    {
        "epoch": 80,
        "loss": 2.5862650871276855,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.723275184631348,
        "cur_std": 0.949857521057129,
        "prompt": " lightsback One Python recursive ports� calculateThe factorial** while justification",
        "nll_prompt": -10.922748565673828
    },
    {
        "epoch": 81,
        "loss": 2.6201798915863037,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.508414268493652,
        "cur_std": 0.9705965995788575,
        "prompt": " discreetback One Python recursive ports� calculateThe factorial** while justification",
        "nll_prompt": -11.147186279296875
    },
    {
        "epoch": 82,
        "loss": 2.6983864307403564,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 13.6158447265625,
        "cur_std": 0.9547853469848633,
        "prompt": " discreetback One Python recursive unp� calculateThe factorial** while justification",
        "nll_prompt": -11.438145637512207
    },
    {
        "epoch": 83,
        "loss": 2.7103209495544434,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.480094909667969,
        "cur_std": 0.9454787254333497,
        "prompt": " discreetback One Python recursive unp chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.383567810058594
    },
    {
        "epoch": 84,
        "loss": 2.637052297592163,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.850072860717773,
        "cur_std": 0.9691948890686035,
        "prompt": " discreetback One Python recursive wrestling chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.208197593688965
    },
    {
        "epoch": 85,
        "loss": 2.661512613296509,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.477316856384277,
        "cur_std": 0.9645475387573242,
        "prompt": " discreetbackileen Python recursive wrestling chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.613054275512695
    },
    {
        "epoch": 86,
        "loss": 2.587085485458374,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.08210563659668,
        "cur_std": 0.9719802856445312,
        "prompt": " discreetbackileen Python recursivet chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.366203308105469
    },
    {
        "epoch": 87,
        "loss": 2.724485397338867,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.9664945602417,
        "cur_std": 0.9771792411804199,
        "prompt": " discreetback HM Python recursivet chemicals calculateThe factorial** while justification",
        "nll_prompt": -10.92836856842041
    },
    {
        "epoch": 88,
        "loss": 2.6290347576141357,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.743083000183105,
        "cur_std": 0.9473461151123047,
        "prompt": " discreetback HM Python recursive piano chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.22021484375
    },
    {
        "epoch": 89,
        "loss": 2.7174487113952637,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.347421646118164,
        "cur_std": 0.963018798828125,
        "prompt": " discreetback HM Python recursiveica chemicals calculateThe factorial** while justification",
        "nll_prompt": -10.97409725189209
    },
    {
        "epoch": 90,
        "loss": 2.637099504470825,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.588244438171387,
        "cur_std": 1.0055340766906737,
        "prompt": " discreet CPU HM Python recursiveica chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.36370849609375
    },
    {
        "epoch": 91,
        "loss": 2.6976373195648193,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 14.62720012664795,
        "cur_std": 1.0063324928283692,
        "prompt": " discreet CPU HM Python recursive Capital chemicals calculateThe factorial** while justification",
        "nll_prompt": -11.83796501159668
    },
    {
        "epoch": 92,
        "loss": 2.633617401123047,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.099005699157715,
        "cur_std": 1.0404953956604004,
        "prompt": " discreet CPU HM Python recursive Capital chemicals calculateThe`orial** while justification",
        "nll_prompt": -13.095779418945312
    },
    {
        "epoch": 93,
        "loss": 2.714919328689575,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.745738983154297,
        "cur_std": 1.0006668090820312,
        "prompt": " discreet packing HM Python recursive Capital chemicals calculateThe`orial** while justification",
        "nll_prompt": -12.124014854431152
    },
    {
        "epoch": 94,
        "loss": 2.637941837310791,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.682536125183105,
        "cur_std": 0.9914486885070801,
        "prompt": " system packing HM Python recursive Capital chemicals calculateThe`orial** while justification",
        "nll_prompt": -12.277729034423828
    },
    {
        "epoch": 95,
        "loss": 2.704498291015625,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 16.204980850219727,
        "cur_std": 0.9926456451416016,
        "prompt": " system packing HM Tea recursive Capital chemicals calculateThe`orial** while justification",
        "nll_prompt": -12.838066101074219
    },
    {
        "epoch": 96,
        "loss": 2.7096595764160156,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 16.147197723388672,
        "cur_std": 1.0391735076904296,
        "prompt": " system packing HM Tea recursive Capital Output calculateThe`orial** while justification",
        "nll_prompt": -12.23478889465332
    },
    {
        "epoch": 97,
        "loss": 2.672004222869873,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.96201229095459,
        "cur_std": 0.9901216506958008,
        "prompt": " system packing HMassert recursive Capital Output calculateThe`orial** while justification",
        "nll_prompt": -11.967076301574707
    },
    {
        "epoch": 98,
        "loss": 2.788752317428589,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.726518630981445,
        "cur_std": 1.0222668647766113,
        "prompt": " system packing HM promptly recursive Capital Output calculateThe`orial** while justification",
        "nll_prompt": -12.247782707214355
    },
    {
        "epoch": 99,
        "loss": 2.6882078647613525,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.705355644226074,
        "cur_std": 1.0361781120300293,
        "prompt": " muscle packing HM promptly recursive Capital Output calculateThe`orial** while justification",
        "nll_prompt": -12.172534942626953
    },
    {
        "epoch": 100,
        "loss": 2.766129732131958,
        "best_loss": 2.441843271255493,
        "best_kl": 12.93522834777832,
        "best_std": 0.9665593147277832,
        "cur_kl": 15.848555564880371,
        "cur_std": 1.0032931327819825,
        "prompt": " muscle packing HM promptly recursive Capital >> calculateThe`orial** while justification",
        "nll_prompt": -12.303667068481445
    }
]