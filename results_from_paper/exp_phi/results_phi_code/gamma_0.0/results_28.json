[
    {
        "epoch": 1,
        "loss": 0.8616886734962463,
        "best_loss": 0.8616886734962463,
        "best_kl": 15.473100662231445,
        "best_std": 0.6631899356842041,
        "cur_kl": 15.473100662231445,
        "cur_std": 0.6631899356842041,
        "prompt": "Prompt: Write a Python script to calculate the factorial of ait",
        "nll_prompt": -2.979088068008423
    },
    {
        "epoch": 2,
        "loss": 0.9800933003425598,
        "best_loss": 0.8616886734962463,
        "best_kl": 15.473100662231445,
        "best_std": 0.6631899356842041,
        "cur_kl": 17.878463745117188,
        "cur_std": 0.665617847442627,
        "prompt": "Prom callback: Write a Python script to calculate the factorial of ait",
        "nll_prompt": -4.907796859741211
    },
    {
        "epoch": 3,
        "loss": 0.958767831325531,
        "best_loss": 0.8616886734962463,
        "best_kl": 14.999281883239746,
        "best_std": 0.7057540893554688,
        "cur_kl": 14.999281883239746,
        "cur_std": 0.7057540893554688,
        "prompt": " please callback: Write a Python script to calculate the factorial of ait",
        "nll_prompt": -4.617887020111084
    },
    {
        "epoch": 4,
        "loss": 0.9345719218254089,
        "best_loss": 0.8616886734962463,
        "best_kl": 14.999281883239746,
        "best_std": 0.7057540893554688,
        "cur_kl": 16.48786163330078,
        "cur_std": 0.6008121013641358,
        "prompt": " please callback: Pa a Python script to calculate the factorial of ait",
        "nll_prompt": -5.846071720123291
    },
    {
        "epoch": 5,
        "loss": 0.947546660900116,
        "best_loss": 0.8616886734962463,
        "best_kl": 14.999281883239746,
        "best_std": 0.7057540893554688,
        "cur_kl": 15.79326343536377,
        "cur_std": 0.6742317199707031,
        "prompt": " please callback: Pa a Python script to calculate the factorial of a evidence",
        "nll_prompt": -6.053033351898193
    },
    {
        "epoch": 6,
        "loss": 0.8371779918670654,
        "best_loss": 0.8371779918670654,
        "best_kl": 14.108234405517578,
        "best_std": 0.6256669044494629,
        "cur_kl": 14.108234405517578,
        "cur_std": 0.6256669044494629,
        "prompt": " please callback: Pa a Python script to calculate the factorial of a�",
        "nll_prompt": -5.986138820648193
    },
    {
        "epoch": 7,
        "loss": 0.8565612435340881,
        "best_loss": 0.8371779918670654,
        "best_kl": 14.108234405517578,
        "best_std": 0.6256669044494629,
        "cur_kl": 15.821216583251953,
        "cur_std": 0.7374003410339356,
        "prompt": " please callback: soared a Python script to calculate the factorial of a�",
        "nll_prompt": -6.547170162200928
    },
    {
        "epoch": 8,
        "loss": 0.9691658616065979,
        "best_loss": 0.8371779918670654,
        "best_kl": 14.108234405517578,
        "best_std": 0.6256669044494629,
        "cur_kl": 16.204269409179688,
        "cur_std": 0.7378849983215332,
        "prompt": " please callback: soared a Python script Canadian calculate the factorial of a�",
        "nll_prompt": -8.107146263122559
    },
    {
        "epoch": 9,
        "loss": 0.8853264451026917,
        "best_loss": 0.8371779918670654,
        "best_kl": 14.108234405517578,
        "best_std": 0.6256669044494629,
        "cur_kl": 15.91695499420166,
        "cur_std": 0.7033836364746093,
        "prompt": " please callback: soared a Python script something calculate the factorial of a�",
        "nll_prompt": -7.883299827575684
    },
    {
        "epoch": 10,
        "loss": 0.8996787071228027,
        "best_loss": 0.8371779918670654,
        "best_kl": 14.108234405517578,
        "best_std": 0.6256669044494629,
        "cur_kl": 15.44062614440918,
        "cur_std": 0.7267391681671143,
        "prompt": " please callback: soared a Python script something calculate the factorial of aangular",
        "nll_prompt": -7.867674827575684
    },
    {
        "epoch": 11,
        "loss": 0.9542228579521179,
        "best_loss": 0.8371779918670654,
        "best_kl": 14.108234405517578,
        "best_std": 0.6256669044494629,
        "cur_kl": 16.02507781982422,
        "cur_std": 0.7411742687225342,
        "prompt": " please callback: soared a Python scriptus calculate the factorial of aangular",
        "nll_prompt": -7.7810797691345215
    },
    {
        "epoch": 12,
        "loss": 0.9494291543960571,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.910289764404297,
        "best_std": 0.7301926612854004,
        "cur_kl": 13.910289764404297,
        "cur_std": 0.7301926612854004,
        "prompt": " please callback: Tarant a Python scriptus calculate the factorial of aangular",
        "nll_prompt": -7.420966148376465
    },
    {
        "epoch": 13,
        "loss": 0.9068710803985596,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 13.38961124420166,
        "cur_std": 0.6668693542480468,
        "prompt": " please callback: Tarant a Python scriptus calculate the factorial of aod",
        "nll_prompt": -7.573144435882568
    },
    {
        "epoch": 14,
        "loss": 0.8584800362586975,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.700790405273438,
        "cur_std": 0.8421612739562988,
        "prompt": " please callback: Tarant a Python scriptus calculate the factorial of a metaphor",
        "nll_prompt": -7.375207424163818
    },
    {
        "epoch": 15,
        "loss": 0.9408378601074219,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.762797355651855,
        "cur_std": 0.8400980949401855,
        "prompt": " please callback: Tarant a Python script Mord calculate the factorial of a metaphor",
        "nll_prompt": -7.776891708374023
    },
    {
        "epoch": 16,
        "loss": 0.8590255379676819,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.13016128540039,
        "cur_std": 0.6816473484039307,
        "prompt": " please units: Tarant a Python script Mord calculate the factorial of a metaphor",
        "nll_prompt": -8.937603950500488
    },
    {
        "epoch": 17,
        "loss": 0.8637475967407227,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 13.951765060424805,
        "cur_std": 0.6622587203979492,
        "prompt": " please units: Tarant a Python script Mord8 the factorial of a metaphor",
        "nll_prompt": -9.591339111328125
    },
    {
        "epoch": 18,
        "loss": 0.8731929063796997,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 13.922059059143066,
        "cur_std": 0.6619051933288574,
        "prompt": " please units: Tarant a Python script Mordah the factorial of a metaphor",
        "nll_prompt": -10.041364669799805
    },
    {
        "epoch": 19,
        "loss": 0.901485025882721,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.721271514892578,
        "cur_std": 0.697896671295166,
        "prompt": " please unitsutm Tarant a Python script Mordah the factorial of a metaphor",
        "nll_prompt": -9.555327415466309
    },
    {
        "epoch": 20,
        "loss": 0.9342862367630005,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.171449661254883,
        "cur_std": 0.7375068187713623,
        "prompt": " please unitsutm Tarant a Python script Mord coordinates the factorial of a metaphor",
        "nll_prompt": -10.458277702331543
    },
    {
        "epoch": 21,
        "loss": 0.9978393912315369,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.68145179748535,
        "cur_std": 0.6173264026641846,
        "prompt": " > unitsutm Tarant a Python script Mord coordinates the factorial of a metaphor",
        "nll_prompt": -10.570280075073242
    },
    {
        "epoch": 22,
        "loss": 0.9700438380241394,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.867551803588867,
        "cur_std": 0.5999682903289795,
        "prompt": " > unitsutm Tarant a Python script Mord transporting the factorial of a metaphor",
        "nll_prompt": -10.348142623901367
    },
    {
        "epoch": 23,
        "loss": 0.9964876174926758,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.314987182617188,
        "cur_std": 0.646900224685669,
        "prompt": " > unitsutm Tarant a Python script Mord brand the factorial of a metaphor",
        "nll_prompt": -10.76401424407959
    },
    {
        "epoch": 24,
        "loss": 0.900172233581543,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.544734954833984,
        "cur_std": 0.6336313724517822,
        "prompt": " > unitsutm Tarant a Python script Mord Verify the factorial of a metaphor",
        "nll_prompt": -10.290790557861328
    },
    {
        "epoch": 25,
        "loss": 0.8940781354904175,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.755887985229492,
        "cur_std": 0.6375799179077148,
        "prompt": " > unitsutm Tarant a Python scriptribe Verify the factorial of a metaphor",
        "nll_prompt": -9.916119575500488
    },
    {
        "epoch": 26,
        "loss": 1.0027894973754883,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.463106155395508,
        "cur_std": 0.6537201404571533,
        "prompt": " > unitsutm Tarant a Python scriptribe Verify the factorial of a many",
        "nll_prompt": -9.376501083374023
    },
    {
        "epoch": 27,
        "loss": 0.9515774250030518,
        "best_loss": 0.8371779918670654,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.83831787109375,
        "cur_std": 0.6241056442260742,
        "prompt": " > unitsutm Tarant a Python scriptribe output the factorial of a many",
        "nll_prompt": -9.082122802734375
    },
    {
        "epoch": 28,
        "loss": 0.7875309586524963,
        "best_loss": 0.7875309586524963,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.303332328796387,
        "cur_std": 0.6192492485046387,
        "prompt": " > units textbook Tarant a Python scriptribe output the factorial of a many",
        "nll_prompt": -8.839300155639648
    },
    {
        "epoch": 29,
        "loss": 0.9078463315963745,
        "best_loss": 0.7875309586524963,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.057990074157715,
        "cur_std": 0.6387532711029053,
        "prompt": " > units textbook TarantE Python scriptribe output the factorial of a many",
        "nll_prompt": -9.09684944152832
    },
    {
        "epoch": 30,
        "loss": 0.9302425384521484,
        "best_loss": 0.7875309586524963,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.204479217529297,
        "cur_std": 0.6245452880859375,
        "prompt": " > units textbook melodyE Python scriptribe output the factorial of a many",
        "nll_prompt": -8.723852157592773
    },
    {
        "epoch": 31,
        "loss": 0.7859659194946289,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 13.6209716796875,
        "cur_std": 0.6515002250671387,
        "prompt": " > units textbook melodyE Python scriptribe output the factorial of a x",
        "nll_prompt": -8.746172904968262
    },
    {
        "epoch": 32,
        "loss": 0.8761056065559387,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.25771713256836,
        "cur_std": 0.6789274692535401,
        "prompt": " a units textbook melodyE Python scriptribe output the factorial of a x",
        "nll_prompt": -8.506804466247559
    },
    {
        "epoch": 33,
        "loss": 0.8288959264755249,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 13.786946296691895,
        "cur_std": 0.6897232055664062,
        "prompt": " a units textbook loopE Python scriptribe output the factorial of a x",
        "nll_prompt": -8.232909202575684
    },
    {
        "epoch": 34,
        "loss": 0.8248103260993958,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.201143264770508,
        "cur_std": 0.7006486415863037,
        "prompt": " a Youth textbook loopE Python scriptribe output the factorial of a x",
        "nll_prompt": -8.643396377563477
    },
    {
        "epoch": 35,
        "loss": 0.9351387023925781,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.195047378540039,
        "cur_std": 0.6987359523773193,
        "prompt": " a Youth textbookomE Python scriptribe output the factorial of a x",
        "nll_prompt": -8.602020263671875
    },
    {
        "epoch": 36,
        "loss": 0.9785489439964294,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.321870803833008,
        "cur_std": 0.6757115364074707,
        "prompt": " a edges textbookomE Python scriptribe output the factorial of a x",
        "nll_prompt": -8.276299476623535
    },
    {
        "epoch": 37,
        "loss": 0.8998463153839111,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.948345184326172,
        "cur_std": 0.7103864669799804,
        "prompt": " a edges textbookomE Python scriptribe output the factorial of a The",
        "nll_prompt": -8.285228729248047
    },
    {
        "epoch": 38,
        "loss": 0.9541903734207153,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.072622299194336,
        "cur_std": 0.749415111541748,
        "prompt": " a edges textbookomE Python scriptInstruct output the factorial of a The",
        "nll_prompt": -8.77755069732666
    },
    {
        "epoch": 39,
        "loss": 1.0106831789016724,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.771778106689453,
        "cur_std": 0.8088058471679688,
        "prompt": " a edges textbookomE Python scriptInstruct output the factorial of a Charity",
        "nll_prompt": -9.342284202575684
    },
    {
        "epoch": 40,
        "loss": 0.9247063398361206,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.2418794631958,
        "cur_std": 0.7503299713134766,
        "prompt": " a edges textbookomor Python scriptInstruct output the factorial of a Charity",
        "nll_prompt": -9.56365966796875
    },
    {
        "epoch": 41,
        "loss": 0.9106985330581665,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.146520614624023,
        "cur_std": 0.6672513484954834,
        "prompt": " a edges textbookomor Python scriptInstruct output the factorial of a Butcher",
        "nll_prompt": -9.408527374267578
    },
    {
        "epoch": 42,
        "loss": 0.9282664060592651,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.201642990112305,
        "cur_std": 0.717917537689209,
        "prompt": " a edges mammalomor Python scriptInstruct output the factorial of a Butcher",
        "nll_prompt": -9.111412048339844
    },
    {
        "epoch": 43,
        "loss": 0.9339033365249634,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 14.860085487365723,
        "cur_std": 0.6684614658355713,
        "prompt": " a edges gentleomor Python scriptInstruct output the factorial of a Butcher",
        "nll_prompt": -9.107860565185547
    },
    {
        "epoch": 44,
        "loss": 0.8769692182540894,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.281705856323242,
        "cur_std": 0.701418113708496,
        "prompt": " a edges gentleom no Python scriptInstruct output the factorial of a Butcher",
        "nll_prompt": -8.92185115814209
    },
    {
        "epoch": 45,
        "loss": 0.9998498558998108,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.960909843444824,
        "cur_std": 0.8132058143615722,
        "prompt": " ahal gentleom no Python scriptInstruct output the factorial of a Butcher",
        "nll_prompt": -8.954412460327148
    },
    {
        "epoch": 46,
        "loss": 0.8305091857910156,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.96198844909668,
        "cur_std": 0.8554557800292969,
        "prompt": " ahal gentleom no Python embarkInstruct output the factorial of a Butcher",
        "nll_prompt": -9.730986595153809
    },
    {
        "epoch": 47,
        "loss": 0.9034478068351746,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.50193214416504,
        "cur_std": 0.8256189346313476,
        "prompt": " ahal gentle flair no Python embarkInstruct output the factorial of a Butcher",
        "nll_prompt": -9.785751342773438
    },
    {
        "epoch": 48,
        "loss": 0.9472877383232117,
        "best_loss": 0.7859659194946289,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.076841354370117,
        "cur_std": 0.7459272384643555,
        "prompt": " a bru gentle flair no Python embarkInstruct output the factorial of a Butcher",
        "nll_prompt": -9.584898948669434
    },
    {
        "epoch": 49,
        "loss": 0.7858462929725647,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 15.827375411987305,
        "cur_std": 0.7841572761535645,
        "prompt": " a bru gentle flair no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -9.437579154968262
    },
    {
        "epoch": 50,
        "loss": 0.926673173904419,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.107851028442383,
        "cur_std": 0.7815464973449707,
        "prompt": " a bru gentle sd no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -9.387981414794922
    },
    {
        "epoch": 51,
        "loss": 0.8948596715927124,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.03152847290039,
        "cur_std": 0.8137436866760254,
        "prompt": "rug bru gentle sd no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -9.82955265045166
    },
    {
        "epoch": 52,
        "loss": 0.9056559801101685,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.59815788269043,
        "cur_std": 0.8470316886901855,
        "prompt": " timeline bru gentle sd no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -10.36475658416748
    },
    {
        "epoch": 53,
        "loss": 1.0507030487060547,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.775110244750977,
        "cur_std": 0.9085891723632813,
        "prompt": " timeline dent gentle sd no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -10.005706787109375
    },
    {
        "epoch": 54,
        "loss": 1.038333535194397,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.824993133544922,
        "cur_std": 0.8536041259765625,
        "prompt": " timeline dentuc sd no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -10.029580116271973
    },
    {
        "epoch": 55,
        "loss": 1.0211952924728394,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.150592803955078,
        "cur_std": 0.8081620216369629,
        "prompt": " timeline dentcale sd no Python theseInstruct output the factorial of a Butcher",
        "nll_prompt": -9.889104843139648
    },
    {
        "epoch": 56,
        "loss": 0.9257152080535889,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.418132781982422,
        "cur_std": 0.8038111686706543,
        "prompt": " timeline dentcale sd no Python theseInstruct output the factorial of a sunglasses",
        "nll_prompt": -10.060003280639648
    },
    {
        "epoch": 57,
        "loss": 0.9757551550865173,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.054393768310547,
        "cur_std": 0.7939427852630615,
        "prompt": "It dentcale sd no Python theseInstruct output the factorial of a sunglasses",
        "nll_prompt": -9.999608993530273
    },
    {
        "epoch": 58,
        "loss": 0.9712908864021301,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.420795440673828,
        "cur_std": 0.7979278564453125,
        "prompt": "It dentcale Fest no Python theseInstruct output the factorial of a sunglasses",
        "nll_prompt": -10.213757514953613
    },
    {
        "epoch": 59,
        "loss": 0.9158941507339478,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.475326538085938,
        "cur_std": 0.7799844741821289,
        "prompt": "It dentcale Fest apology Python theseInstruct output the factorial of a sunglasses",
        "nll_prompt": -11.229987144470215
    },
    {
        "epoch": 60,
        "loss": 0.8347138166427612,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.29351234436035,
        "cur_std": 0.7930341720581054,
        "prompt": " Typically dentcale Fest apology Python theseInstruct output the factorial of a sunglasses",
        "nll_prompt": -11.24088191986084
    },
    {
        "epoch": 61,
        "loss": 0.9639208912849426,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.62531852722168,
        "cur_std": 0.80935697555542,
        "prompt": " Typically dentcale Fest apology Python theseInstruct output the factorialInput a sunglasses",
        "nll_prompt": -12.204319953918457
    },
    {
        "epoch": 62,
        "loss": 0.8499257564544678,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.06768798828125,
        "cur_std": 0.7816433429718017,
        "prompt": " Typically dentл Fest apology Python theseInstruct output the factorialInput a sunglasses",
        "nll_prompt": -11.476567268371582
    },
    {
        "epoch": 63,
        "loss": 0.9647749066352844,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.717966079711914,
        "cur_std": 0.7413822174072265,
        "prompt": " Typically dentл buddy apology Python theseInstruct output the factorialInput a sunglasses",
        "nll_prompt": -11.69236946105957
    },
    {
        "epoch": 64,
        "loss": 0.9201696515083313,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.15541648864746,
        "cur_std": 0.796110200881958,
        "prompt": " 30 dentл buddy apology Python theseInstruct output the factorialInput a sunglasses",
        "nll_prompt": -10.74436092376709
    },
    {
        "epoch": 65,
        "loss": 1.0112957954406738,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.60333251953125,
        "cur_std": 0.7536210060119629,
        "prompt": " 30 dentл buddy apology Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -11.01447582244873
    },
    {
        "epoch": 66,
        "loss": 0.9661293029785156,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.03179359436035,
        "cur_std": 0.7678682804107666,
        "prompt": " 30 dentл buddy Agric Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -11.04096794128418
    },
    {
        "epoch": 67,
        "loss": 0.9674792289733887,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.04725456237793,
        "cur_std": 0.7696089267730712,
        "prompt": " game dentл buddy Agric Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -12.63468074798584
    },
    {
        "epoch": 68,
        "loss": 1.0240908861160278,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.803266525268555,
        "cur_std": 0.7891371250152588,
        "prompt": " game dentл buddyAI Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -11.918399810791016
    },
    {
        "epoch": 69,
        "loss": 0.884517252445221,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.390981674194336,
        "cur_std": 0.765494966506958,
        "prompt": " game$л buddyAI Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -10.955894470214844
    },
    {
        "epoch": 70,
        "loss": 0.9133151173591614,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.825407028198242,
        "cur_std": 0.8037654876708984,
        "prompt": " game$лymAI Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -10.92629337310791
    },
    {
        "epoch": 71,
        "loss": 1.011395812034607,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.205015182495117,
        "cur_std": 0.8392287254333496,
        "prompt": " gamegameлymAI Python].Instruct output the factorialInput a sunglasses",
        "nll_prompt": -11.300268173217773
    },
    {
        "epoch": 72,
        "loss": 1.0160911083221436,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.751279830932617,
        "cur_std": 0.8066828727722168,
        "prompt": " gamegameлymAI Python]. use output the factorialInput a sunglasses",
        "nll_prompt": -10.79533576965332
    },
    {
        "epoch": 73,
        "loss": 0.9561856389045715,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 19.08704948425293,
        "cur_std": 0.7541968345642089,
        "prompt": " gamegameлymAI Python]. use outputUT factorialInput a sunglasses",
        "nll_prompt": -11.24137020111084
    },
    {
        "epoch": 74,
        "loss": 1.0526291131973267,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 19.08266830444336,
        "cur_std": 0.7701048851013184,
        "prompt": " gamegame newymAI Python]. use outputUT factorialInput a sunglasses",
        "nll_prompt": -11.37342357635498
    },
    {
        "epoch": 75,
        "loss": 1.0651962757110596,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.849538803100586,
        "cur_std": 0.782529067993164,
        "prompt": " gamegame newymAI Python].it outputUT factorialInput a sunglasses",
        "nll_prompt": -11.254209518432617
    },
    {
        "epoch": 76,
        "loss": 1.0085481405258179,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.39432144165039,
        "cur_std": 0.751081895828247,
        "prompt": " gamegameEquymAI Python].it outputUT factorialInput a sunglasses",
        "nll_prompt": -11.41750431060791
    },
    {
        "epoch": 77,
        "loss": 1.001604676246643,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.3580265045166,
        "cur_std": 0.7479598045349121,
        "prompt": " game wellEquymAI Python].it outputUT factorialInput a sunglasses",
        "nll_prompt": -11.203495979309082
    },
    {
        "epoch": 78,
        "loss": 1.0100579261779785,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.69921875,
        "cur_std": 0.7584875583648681,
        "prompt": " game SmartEquymAI Python].it outputUT factorialInput a sunglasses",
        "nll_prompt": -11.391724586486816
    },
    {
        "epoch": 79,
        "loss": 0.9177269339561462,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.85527229309082,
        "cur_std": 0.7765204429626464,
        "prompt": " game SmartEquym� Python].it outputUT factorialInput a sunglasses",
        "nll_prompt": -11.60306453704834
    },
    {
        "epoch": 80,
        "loss": 0.8971055150032043,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.356861114501953,
        "cur_std": 0.8226344108581543,
        "prompt": " game SmartEquym� Python]._ outputUT factorialInput a sunglasses",
        "nll_prompt": -12.312984466552734
    },
    {
        "epoch": 81,
        "loss": 0.9431582689285278,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.118215560913086,
        "cur_std": 0.7326553344726563,
        "prompt": " game SmartEquym� Python]. En outputUT factorialInput a sunglasses",
        "nll_prompt": -11.838611602783203
    },
    {
        "epoch": 82,
        "loss": 0.9734939932823181,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.394128799438477,
        "cur_std": 0.6750303268432617,
        "prompt": " installments SmartEquym� Python]. En outputUT factorialInput a sunglasses",
        "nll_prompt": -12.19487190246582
    },
    {
        "epoch": 83,
        "loss": 1.0451833009719849,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 17.520511627197266,
        "cur_std": 0.6677464962005615,
        "prompt": " installments SmartEquym my Python]. En outputUT factorialInput a sunglasses",
        "nll_prompt": -12.016380310058594
    },
    {
        "epoch": 84,
        "loss": 1.002158761024475,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.21703338623047,
        "cur_std": 0.6595921516418457,
        "prompt": " installments DeployEquym my Python]. En outputUT factorialInput a sunglasses",
        "nll_prompt": -12.003575325012207
    },
    {
        "epoch": 85,
        "loss": 0.9767610430717468,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.096662521362305,
        "cur_std": 0.6995993614196777,
        "prompt": " committee DeployEquym my Python]. En outputUT factorialInput a sunglasses",
        "nll_prompt": -12.54792594909668
    },
    {
        "epoch": 86,
        "loss": 0.9598581194877625,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.367918014526367,
        "cur_std": 0.7273387432098388,
        "prompt": " committee AmericasEquym my Python]. En outputUT factorialInput a sunglasses",
        "nll_prompt": -12.095756530761719
    },
    {
        "epoch": 87,
        "loss": 1.0220543146133423,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.5985107421875,
        "cur_std": 0.6799918174743652,
        "prompt": " committee AmericasEquym my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.76136589050293
    },
    {
        "epoch": 88,
        "loss": 1.0180686712265015,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.17307472229004,
        "cur_std": 0.6695395469665527,
        "prompt": " committee WriteEquym my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.355565071105957
    },
    {
        "epoch": 89,
        "loss": 1.0276731252670288,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 19.41417121887207,
        "cur_std": 0.6851002693176269,
        "prompt": " committee WriteEqu Jem my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.63051700592041
    },
    {
        "epoch": 90,
        "loss": 1.0494978427886963,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.066020965576172,
        "cur_std": 0.6821391105651855,
        "prompt": " Who WriteEqu Jem my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.485051155090332
    },
    {
        "epoch": 91,
        "loss": 1.028067946434021,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.127517700195312,
        "cur_std": 0.7053986072540284,
        "prompt": " Who EXEqu Jem my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.03768253326416
    },
    {
        "epoch": 92,
        "loss": 0.9676732420921326,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 19.048147201538086,
        "cur_std": 0.6642504692077636,
        "prompt": "Each EXEqu Jem my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -10.921473503112793
    },
    {
        "epoch": 93,
        "loss": 1.0006221532821655,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.88852882385254,
        "cur_std": 0.6801273822784424,
        "prompt": " Tr EXEqu Jem my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.904145240783691
    },
    {
        "epoch": 94,
        "loss": 1.0003384351730347,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.66983413696289,
        "cur_std": 0.678170919418335,
        "prompt": " Tr EXEqu out my Python]. En outputUT factorial wearing a sunglasses",
        "nll_prompt": -11.340167999267578
    },
    {
        "epoch": 95,
        "loss": 1.0477259159088135,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.51675033569336,
        "cur_std": 0.7662251472473145,
        "prompt": " Tr EXEqu out my Python]. En outputUT factorial wearing a outcome",
        "nll_prompt": -11.693964958190918
    },
    {
        "epoch": 96,
        "loss": 1.0744566917419434,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.962430953979492,
        "cur_std": 0.7916333675384521,
        "prompt": " Tr themEqu out my Python]. En outputUT factorial wearing a outcome",
        "nll_prompt": -11.408228874206543
    },
    {
        "epoch": 97,
        "loss": 0.9311511516571045,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.269390106201172,
        "cur_std": 0.7613016605377197,
        "prompt": " Tr themEqu out yellow Python]. En outputUT factorial wearing a outcome",
        "nll_prompt": -11.677268981933594
    },
    {
        "epoch": 98,
        "loss": 1.0811529159545898,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 18.639738082885742,
        "cur_std": 0.810938835144043,
        "prompt": " Cairo themEqu out yellow Python]. En outputUT factorial wearing a outcome",
        "nll_prompt": -12.00685977935791
    },
    {
        "epoch": 99,
        "loss": 1.0043601989746094,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.824140548706055,
        "cur_std": 0.8396465301513671,
        "prompt": " Cairo themEqu out yellow Python]. En outputUT factorial no a outcome",
        "nll_prompt": -11.844470024108887
    },
    {
        "epoch": 100,
        "loss": 0.9776178598403931,
        "best_loss": 0.7858462929725647,
        "best_kl": 13.38961124420166,
        "best_std": 0.6668693542480468,
        "cur_kl": 16.919721603393555,
        "cur_std": 0.8052793502807617,
        "prompt": " Cairo themEqu out Dance Python]. En outputUT factorial no a outcome",
        "nll_prompt": -11.901881217956543
    }
]