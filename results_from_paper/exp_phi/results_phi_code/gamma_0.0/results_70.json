[
    {
        "epoch": 1,
        "loss": 1.5720009803771973,
        "best_loss": 1.5720009803771973,
        "best_kl": 23.413436889648438,
        "best_std": 0.7183081626892089,
        "cur_kl": 23.413436889648438,
        "cur_std": 0.7183081626892089,
        "prompt": "Prompt: Write a Python function that checks if a given stringau parent",
        "nll_prompt": -3.9539425373077393
    },
    {
        "epoch": 2,
        "loss": 1.4763103723526,
        "best_loss": 1.4763103723526,
        "best_kl": 23.413436889648438,
        "best_std": 0.7183081626892089,
        "cur_kl": 24.109935760498047,
        "cur_std": 0.7125889301300049,
        "prompt": "Prompt: Write a Python function that checks if aTechnical stringau parent",
        "nll_prompt": -5.529050350189209
    },
    {
        "epoch": 3,
        "loss": 1.6336441040039062,
        "best_loss": 1.4763103723526,
        "best_kl": 23.30536651611328,
        "best_std": 0.7049857616424561,
        "cur_kl": 23.30536651611328,
        "cur_std": 0.7049857616424561,
        "prompt": "Prompt: Write a Python function that checks ifINGTechnical stringau parent",
        "nll_prompt": -6.865891456604004
    },
    {
        "epoch": 4,
        "loss": 1.4762879610061646,
        "best_loss": 1.4762879610061646,
        "best_kl": 21.7200927734375,
        "best_std": 0.7409497737884522,
        "cur_kl": 21.7200927734375,
        "cur_std": 0.7409497737884522,
        "prompt": "Prompt: Write a Python function that checks ifING multipl stringau parent",
        "nll_prompt": -6.902621746063232
    },
    {
        "epoch": 5,
        "loss": 1.51689612865448,
        "best_loss": 1.4762879610061646,
        "best_kl": 20.616127014160156,
        "best_std": 0.6716613292694091,
        "cur_kl": 20.616127014160156,
        "cur_std": 0.6716613292694091,
        "prompt": "Prompt: Write a Python function that checksmentING multipl stringau parent",
        "nll_prompt": -7.8558478355407715
    },
    {
        "epoch": 6,
        "loss": 1.507188081741333,
        "best_loss": 1.4762879610061646,
        "best_kl": 20.616127014160156,
        "best_std": 0.6716613292694091,
        "cur_kl": 20.915584564208984,
        "cur_std": 0.6981364727020264,
        "prompt": "Prompt: Write a Python function that checksmentOO multipl stringau parent",
        "nll_prompt": -7.762380123138428
    },
    {
        "epoch": 7,
        "loss": 1.5707541704177856,
        "best_loss": 1.4762879610061646,
        "best_kl": 19.853984832763672,
        "best_std": 0.6239211082458496,
        "cur_kl": 19.853984832763672,
        "cur_std": 0.6239211082458496,
        "prompt": "Prompt: Write a Python function that checksmentOOations stringau parent",
        "nll_prompt": -7.565920352935791
    },
    {
        "epoch": 8,
        "loss": 1.472887635231018,
        "best_loss": 1.472887635231018,
        "best_kl": 19.443920135498047,
        "best_std": 0.5927604675292969,
        "cur_kl": 19.443920135498047,
        "cur_std": 0.5927604675292969,
        "prompt": "Prompt: Write a Python function that checksmentOOations stringau father",
        "nll_prompt": -7.5435991287231445
    },
    {
        "epoch": 9,
        "loss": 1.417963981628418,
        "best_loss": 1.417963981628418,
        "best_kl": 15.464120864868164,
        "best_std": 0.6007320404052734,
        "cur_kl": 15.464120864868164,
        "cur_std": 0.6007320404052734,
        "prompt": "Prompt: Write a Python function that checksment balanceations stringau father",
        "nll_prompt": -7.517648696899414
    },
    {
        "epoch": 10,
        "loss": 1.3636760711669922,
        "best_loss": 1.3636760711669922,
        "best_kl": 15.464120864868164,
        "best_std": 0.6007320404052734,
        "cur_kl": 16.939674377441406,
        "cur_std": 0.6090138912200928,
        "prompt": "Prompt: Write a Python function that checksment balanceationsblau father",
        "nll_prompt": -7.35831880569458
    },
    {
        "epoch": 11,
        "loss": 1.4229274988174438,
        "best_loss": 1.3636760711669922,
        "best_kl": 15.464120864868164,
        "best_std": 0.6007320404052734,
        "cur_kl": 15.694680213928223,
        "cur_std": 0.5966866970062256,
        "prompt": "Prompt: Write a Python function that checksiny balanceationsblau father",
        "nll_prompt": -7.296385765075684
    },
    {
        "epoch": 12,
        "loss": 1.3744181394577026,
        "best_loss": 1.3636760711669922,
        "best_kl": 14.634597778320312,
        "best_std": 0.5624710083007812,
        "cur_kl": 14.634597778320312,
        "cur_std": 0.5624710083007812,
        "prompt": "Prompt: Write a Python function that checksiny balanceationsblau72",
        "nll_prompt": -7.023505210876465
    },
    {
        "epoch": 13,
        "loss": 1.2461835145950317,
        "best_loss": 1.2461835145950317,
        "best_kl": 13.508441925048828,
        "best_std": 0.5625925064086914,
        "cur_kl": 13.508441925048828,
        "cur_std": 0.5625925064086914,
        "prompt": "Prompt: Write a Python function that checksiny balanceations greau72",
        "nll_prompt": -7.37338924407959
    },
    {
        "epoch": 14,
        "loss": 1.2435650825500488,
        "best_loss": 1.2435650825500488,
        "best_kl": 13.508441925048828,
        "best_std": 0.5625925064086914,
        "cur_kl": 14.991640090942383,
        "cur_std": 0.5802077770233154,
        "prompt": " plpt: Write a Python function that checksiny balanceations greau72",
        "nll_prompt": -8.943902015686035
    },
    {
        "epoch": 15,
        "loss": 1.2399864196777344,
        "best_loss": 1.2399864196777344,
        "best_kl": 13.508441925048828,
        "best_std": 0.5625925064086914,
        "cur_kl": 13.794342994689941,
        "cur_std": 0.5411259651184082,
        "prompt": " pl Given: Write a Python function that checksiny balanceations greau72",
        "nll_prompt": -9.224884033203125
    },
    {
        "epoch": 16,
        "loss": 1.214362621307373,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 13.100037574768066,
        "cur_std": 0.5770702362060547,
        "prompt": "ming Given: Write a Python function that checksiny balanceations greau72",
        "nll_prompt": -8.641457557678223
    },
    {
        "epoch": 17,
        "loss": 1.334370732307434,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 13.307832717895508,
        "cur_std": 0.5905327320098877,
        "prompt": "ce Given: Write a Python function that checksiny balanceations greau72",
        "nll_prompt": -8.596484184265137
    },
    {
        "epoch": 18,
        "loss": 1.2974603176116943,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 14.158320426940918,
        "cur_std": 0.5748908996582032,
        "prompt": "ce MC: Write a Python function that checksiny balanceations greau72",
        "nll_prompt": -8.75657844543457
    },
    {
        "epoch": 19,
        "loss": 1.318434476852417,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 14.520569801330566,
        "cur_std": 0.5519803524017334,
        "prompt": "ce MC: Write a Python function that checksiny balanceations sceneau72",
        "nll_prompt": -8.708230018615723
    },
    {
        "epoch": 20,
        "loss": 1.3580585718154907,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 14.70217227935791,
        "cur_std": 0.5889214038848877,
        "prompt": "ce MC: Sparkle a Python function that checksiny balanceations sceneau72",
        "nll_prompt": -9.79750919342041
    },
    {
        "epoch": 21,
        "loss": 1.3311498165130615,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 14.920543670654297,
        "cur_std": 0.5678292751312256,
        "prompt": "ram MC: Sparkle a Python function that checksiny balanceations sceneau72",
        "nll_prompt": -9.894804954528809
    },
    {
        "epoch": 22,
        "loss": 1.3183799982070923,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 16.225004196166992,
        "cur_std": 0.5992944240570068,
        "prompt": "ram MC: Sparkle a Python function that checksiny balanceations scene072",
        "nll_prompt": -9.730768203735352
    },
    {
        "epoch": 23,
        "loss": 1.382116675376892,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.931989669799805,
        "cur_std": 0.6079345703125,
        "prompt": "ram MC: Sparkle a Python function that checksiny balanceations equal072",
        "nll_prompt": -9.489506721496582
    },
    {
        "epoch": 24,
        "loss": 1.33292818069458,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 17.185649871826172,
        "cur_std": 0.6195772171020508,
        "prompt": "ram vessels: Sparkle a Python function that checksiny balanceations equal072",
        "nll_prompt": -9.511420249938965
    },
    {
        "epoch": 25,
        "loss": 1.4249267578125,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.349803924560547,
        "cur_std": 0.5849340438842774,
        "prompt": "ram Polish: Sparkle a Python function that checksiny balanceations equal072",
        "nll_prompt": -9.777691841125488
    },
    {
        "epoch": 26,
        "loss": 1.306593894958496,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 16.358009338378906,
        "cur_std": 0.6115177631378174,
        "prompt": "ram Polish: Sparkle their Python function that checksiny balanceations equal072",
        "nll_prompt": -10.17647933959961
    },
    {
        "epoch": 27,
        "loss": 1.3508820533752441,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 16.34199333190918,
        "cur_std": 0.6276864051818848,
        "prompt": "ramference: Sparkle their Python function that checksiny balanceations equal072",
        "nll_prompt": -10.031533241271973
    },
    {
        "epoch": 28,
        "loss": 1.3812808990478516,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 17.146562576293945,
        "cur_std": 0.6081167697906494,
        "prompt": "ramference: Sparkle their Python function that checksiny balanceations performance072",
        "nll_prompt": -10.431768417358398
    },
    {
        "epoch": 29,
        "loss": 1.3308110237121582,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 17.811115264892578,
        "cur_std": 0.6623898983001709,
        "prompt": "ramference: Sparkle their Python function that checksiny balanceations performanceWork72",
        "nll_prompt": -10.907654762268066
    },
    {
        "epoch": 30,
        "loss": 1.4280961751937866,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 20.175167083740234,
        "cur_std": 0.730910348892212,
        "prompt": "ramference: Sparkle experiencing Python function that checksiny balanceations performanceWork72",
        "nll_prompt": -11.70673656463623
    },
    {
        "epoch": 31,
        "loss": 1.4571000337600708,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 19.072330474853516,
        "cur_std": 0.7323723316192627,
        "prompt": "ramference: Sparkle experiencing Python function that checksiny balanceationserrillaWork72",
        "nll_prompt": -11.957764625549316
    },
    {
        "epoch": 32,
        "loss": 1.3373723030090332,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 18.849342346191406,
        "cur_std": 0.7077094078063965,
        "prompt": "ramference: Sparkle experiencing Python function that checksiny balanceationsutchWork72",
        "nll_prompt": -11.820914268493652
    },
    {
        "epoch": 33,
        "loss": 1.3880140781402588,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 19.36838150024414,
        "cur_std": 0.7138770580291748,
        "prompt": "ramference: Sparkle experiencing Python function that checksiny balanceations BookWork72",
        "nll_prompt": -11.393336296081543
    },
    {
        "epoch": 34,
        "loss": 1.4346004724502563,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 19.450931549072266,
        "cur_std": 0.6370649814605713,
        "prompt": "ramrome: Sparkle experiencing Python function that checksiny balanceations BookWork72",
        "nll_prompt": -11.48036003112793
    },
    {
        "epoch": 35,
        "loss": 1.4179613590240479,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 17.52355194091797,
        "cur_std": 0.6648690223693847,
        "prompt": "ramrome: Sparkle solution Python function that checksiny balanceations BookWork72",
        "nll_prompt": -10.964362144470215
    },
    {
        "epoch": 36,
        "loss": 1.3523962497711182,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 18.014450073242188,
        "cur_std": 0.6757368087768555,
        "prompt": "ram Frances: Sparkle solution Python function that checksiny balanceations BookWork72",
        "nll_prompt": -10.92471981048584
    },
    {
        "epoch": 37,
        "loss": 1.3681615591049194,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 17.059526443481445,
        "cur_std": 0.6986315250396729,
        "prompt": "ramively: Sparkle solution Python function that checksiny balanceations BookWork72",
        "nll_prompt": -10.73021125793457
    },
    {
        "epoch": 38,
        "loss": 1.3033024072647095,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 16.875268936157227,
        "cur_std": 0.7024040699005127,
        "prompt": "ramively: Sparkle solution Python function that checksiny balanceations BookReturn72",
        "nll_prompt": -10.742448806762695
    },
    {
        "epoch": 39,
        "loss": 1.3405354022979736,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 16.327592849731445,
        "cur_std": 0.6052300930023193,
        "prompt": "ramively: Sparkle solution Python function that checksiny balanceations BookReturn?",
        "nll_prompt": -10.32642936706543
    },
    {
        "epoch": 40,
        "loss": 1.272382140159607,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 16.896554946899414,
        "cur_std": 0.5563546657562256,
        "prompt": "ram Japanese: Sparkle solution Python function that checksiny balanceations BookReturn?",
        "nll_prompt": -10.603931427001953
    },
    {
        "epoch": 41,
        "loss": 1.4167656898498535,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 18.37836456298828,
        "cur_std": 0.619463586807251,
        "prompt": "ram Japanese: Sparkle sitting Python function that checksiny balanceations BookReturn?",
        "nll_prompt": -10.980381965637207
    },
    {
        "epoch": 42,
        "loss": 1.2624173164367676,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 17.32746696472168,
        "cur_std": 0.6268155097961425,
        "prompt": "ramer: Sparkle sitting Python function that checksiny balanceations BookReturn?",
        "nll_prompt": -10.49090576171875
    },
    {
        "epoch": 43,
        "loss": 1.2870365381240845,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.443024635314941,
        "cur_std": 0.6198366165161133,
        "prompt": "ramer: Sparkle sitting Python function that checksiny balanceations Book**?",
        "nll_prompt": -10.39832878112793
    },
    {
        "epoch": 44,
        "loss": 1.375196933746338,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.786876678466797,
        "cur_std": 0.6039255142211915,
        "prompt": "ramer: Sparkle sitting Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.245054244995117
    },
    {
        "epoch": 45,
        "loss": 1.319762110710144,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.133219718933105,
        "cur_std": 0.5902603149414063,
        "prompt": "ramer: Sparkle set Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.236102104187012
    },
    {
        "epoch": 46,
        "loss": 1.3815025091171265,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.547342300415039,
        "cur_std": 0.5502979278564453,
        "prompt": "ramer: Sparklelist Python function that checksiny balanceations tale**?",
        "nll_prompt": -9.671619415283203
    },
    {
        "epoch": 47,
        "loss": 1.3145370483398438,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 15.533865928649902,
        "cur_std": 0.5010831356048584,
        "prompt": "ramer: raginglist Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.238059043884277
    },
    {
        "epoch": 48,
        "loss": 1.245200514793396,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 14.4793701171875,
        "cur_std": 0.4907433032989502,
        "prompt": "ram playing: raginglist Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.97565746307373
    },
    {
        "epoch": 49,
        "loss": 1.221164584159851,
        "best_loss": 1.214362621307373,
        "best_kl": 13.100037574768066,
        "best_std": 0.5770702362060547,
        "cur_kl": 13.62566089630127,
        "cur_std": 0.4801224708557129,
        "prompt": "ram playing: ragingria Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.696821212768555
    },
    {
        "epoch": 50,
        "loss": 1.2503541707992554,
        "best_loss": 1.214362621307373,
        "best_kl": 12.776966094970703,
        "best_std": 0.48150997161865233,
        "cur_kl": 12.776966094970703,
        "cur_std": 0.48150997161865233,
        "prompt": "ram lively: ragingria Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.421299934387207
    },
    {
        "epoch": 51,
        "loss": 1.2829748392105103,
        "best_loss": 1.214362621307373,
        "best_kl": 12.776966094970703,
        "best_std": 0.48150997161865233,
        "cur_kl": 13.743743896484375,
        "cur_std": 0.495604419708252,
        "prompt": "international lively: ragingria Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.514911651611328
    },
    {
        "epoch": 52,
        "loss": 1.2904164791107178,
        "best_loss": 1.214362621307373,
        "best_kl": 12.776966094970703,
        "best_std": 0.48150997161865233,
        "cur_kl": 13.77104663848877,
        "cur_std": 0.47455501556396484,
        "prompt": "international lively: ragingmma Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.479156494140625
    },
    {
        "epoch": 53,
        "loss": 1.2729766368865967,
        "best_loss": 1.214362621307373,
        "best_kl": 12.776966094970703,
        "best_std": 0.48150997161865233,
        "cur_kl": 12.895774841308594,
        "cur_std": 0.5132851123809814,
        "prompt": " _ lively: ragingmma Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.61872673034668
    },
    {
        "epoch": 54,
        "loss": 1.2389594316482544,
        "best_loss": 1.214362621307373,
        "best_kl": 12.776966094970703,
        "best_std": 0.48150997161865233,
        "cur_kl": 13.006144523620605,
        "cur_std": 0.565676498413086,
        "prompt": " _ lively:Famma Python function that checksiny balanceations tale**?",
        "nll_prompt": -11.048014640808105
    },
    {
        "epoch": 55,
        "loss": 1.2542922496795654,
        "best_loss": 1.214362621307373,
        "best_kl": 12.021174430847168,
        "best_std": 0.5271796703338623,
        "cur_kl": 12.021174430847168,
        "cur_std": 0.5271796703338623,
        "prompt": " _ lively:Fa iconic Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.669590950012207
    },
    {
        "epoch": 56,
        "loss": 1.1536210775375366,
        "best_loss": 1.1536210775375366,
        "best_kl": 12.021174430847168,
        "best_std": 0.5271796703338623,
        "cur_kl": 13.969061851501465,
        "cur_std": 0.5314414024353027,
        "prompt": " scientific lively:Fa iconic Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.960981369018555
    },
    {
        "epoch": 57,
        "loss": 1.2880371809005737,
        "best_loss": 1.1536210775375366,
        "best_kl": 12.021174430847168,
        "best_std": 0.5271796703338623,
        "cur_kl": 14.07816219329834,
        "cur_std": 0.5767806529998779,
        "prompt": "This lively:Fa iconic Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.534696578979492
    },
    {
        "epoch": 58,
        "loss": 1.2575833797454834,
        "best_loss": 1.1536210775375366,
        "best_kl": 12.021174430847168,
        "best_std": 0.5271796703338623,
        "cur_kl": 12.879640579223633,
        "cur_std": 0.5179036617279053,
        "prompt": " size lively:Fa iconic Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.559892654418945
    },
    {
        "epoch": 59,
        "loss": 1.1573889255523682,
        "best_loss": 1.1536210775375366,
        "best_kl": 12.021174430847168,
        "best_std": 0.5271796703338623,
        "cur_kl": 12.729044914245605,
        "cur_std": 0.5423808574676514,
        "prompt": " size lively:as iconic Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.40915584564209
    },
    {
        "epoch": 60,
        "loss": 1.2565643787384033,
        "best_loss": 1.1536210775375366,
        "best_kl": 12.021174430847168,
        "best_std": 0.5271796703338623,
        "cur_kl": 13.041025161743164,
        "cur_std": 0.5362653255462646,
        "prompt": " size lively:asarser Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.818791389465332
    },
    {
        "epoch": 61,
        "loss": 1.2720879316329956,
        "best_loss": 1.1536210775375366,
        "best_kl": 11.99480152130127,
        "best_std": 0.5409589767456054,
        "cur_kl": 11.99480152130127,
        "cur_std": 0.5409589767456054,
        "prompt": " enchant lively:asarser Python function that checksiny balanceations tale**?",
        "nll_prompt": -10.73549747467041
    },
    {
        "epoch": 62,
        "loss": 1.2863110303878784,
        "best_loss": 1.1536210775375366,
        "best_kl": 11.99480152130127,
        "best_std": 0.5409589767456054,
        "cur_kl": 12.672656059265137,
        "cur_std": 0.5482786178588868,
        "prompt": " enchant lively:asarser Python function that checksiny balanceations align**?",
        "nll_prompt": -10.88508129119873
    },
    {
        "epoch": 63,
        "loss": 1.1633538007736206,
        "best_loss": 1.1536210775375366,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 11.956799507141113,
        "cur_std": 0.5619102001190186,
        "prompt": " enchant phr:asarser Python function that checksiny balanceations align**?",
        "nll_prompt": -11.13514232635498
    },
    {
        "epoch": 64,
        "loss": 1.2600765228271484,
        "best_loss": 1.1536210775375366,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 12.326420783996582,
        "cur_std": 0.5242105960845947,
        "prompt": " enchant phr: correctarser Python function that checksiny balanceations align**?",
        "nll_prompt": -11.593384742736816
    },
    {
        "epoch": 65,
        "loss": 1.1347687244415283,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.118849754333496,
        "cur_std": 0.562998104095459,
        "prompt": " enchant phr: Defensearser Python function that checksiny balanceations align**?",
        "nll_prompt": -11.93854808807373
    },
    {
        "epoch": 66,
        "loss": 1.2171502113342285,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.401267051696777,
        "cur_std": 0.5528340816497803,
        "prompt": " enchant Tolkien: Defensearser Python function that checksiny balanceations align**?",
        "nll_prompt": -11.38493537902832
    },
    {
        "epoch": 67,
        "loss": 1.176047921180725,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 12.958972930908203,
        "cur_std": 0.5448696136474609,
        "prompt": " enchant Tolkien: favorarser Python function that checksiny balanceations align**?",
        "nll_prompt": -11.185980796813965
    },
    {
        "epoch": 68,
        "loss": 1.2499241828918457,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.555329322814941,
        "cur_std": 0.5542795658111572,
        "prompt": " enchant Tolkien: favorarser Python function that checksilda balanceations align**?",
        "nll_prompt": -11.256153106689453
    },
    {
        "epoch": 69,
        "loss": 1.1639243364334106,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.310133934020996,
        "cur_std": 0.5342813968658447,
        "prompt": " enchant Tolkien: favorarser Python function that checksilda balanceationsistic**?",
        "nll_prompt": -11.179179191589355
    },
    {
        "epoch": 70,
        "loss": 1.2376468181610107,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.105523109436035,
        "cur_std": 0.5352731704711914,
        "prompt": " enchant Tolkien: seventharser Python function that checksilda balanceationsistic**?",
        "nll_prompt": -11.177294731140137
    },
    {
        "epoch": 71,
        "loss": 1.2519111633300781,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.401581764221191,
        "cur_std": 0.5620543003082276,
        "prompt": " enchant Tolkien: seventharser Python function that checkslex balanceationsistic**?",
        "nll_prompt": -11.057379722595215
    },
    {
        "epoch": 72,
        "loss": 1.252809762954712,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.080256462097168,
        "cur_std": 0.6056081771850585,
        "prompt": " enchant Ladies: seventharser Python function that checkslex balanceationsistic**?",
        "nll_prompt": -11.287127494812012
    },
    {
        "epoch": 73,
        "loss": 1.2902010679244995,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.135046005249023,
        "cur_std": 0.6307302474975586,
        "prompt": " enchant Ladies: seventharser Python function that checkslex balanceations inappropriate**?",
        "nll_prompt": -11.445502281188965
    },
    {
        "epoch": 74,
        "loss": 1.28932785987854,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.35116195678711,
        "cur_std": 0.5827901363372803,
        "prompt": " enchant Ladies: seventh string Python function that checkslex balanceations inappropriate**?",
        "nll_prompt": -10.624150276184082
    },
    {
        "epoch": 75,
        "loss": 1.3241170644760132,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.183883666992188,
        "cur_std": 0.5612090110778809,
        "prompt": " enchant Ladies: rebels string Python function that checkslex balanceations inappropriate**?",
        "nll_prompt": -11.048163414001465
    },
    {
        "epoch": 76,
        "loss": 1.2558196783065796,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.883773803710938,
        "cur_std": 0.5674679756164551,
        "prompt": " enchant Ladieseman rebels string Python function that checkslex balanceations inappropriate**?",
        "nll_prompt": -11.984950065612793
    },
    {
        "epoch": 77,
        "loss": 1.256484031677246,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.31536865234375,
        "cur_std": 0.5894975662231445,
        "prompt": " enchant Ladieseman policy string Python function that checkslex balanceations inappropriate**?",
        "nll_prompt": -11.389005661010742
    },
    {
        "epoch": 78,
        "loss": 1.2096502780914307,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.068687438964844,
        "cur_std": 0.5836396217346191,
        "prompt": " enchant Ladieseman policy string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -11.659529685974121
    },
    {
        "epoch": 79,
        "loss": 1.1999704837799072,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.227985382080078,
        "cur_std": 0.6246805667877198,
        "prompt": " enchant instructeman policy string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -11.325140953063965
    },
    {
        "epoch": 80,
        "loss": 1.3323968648910522,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.502180099487305,
        "cur_std": 0.5675785064697265,
        "prompt": " enchant milkeman policy string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -11.526752471923828
    },
    {
        "epoch": 81,
        "loss": 1.2900440692901611,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.853778839111328,
        "cur_std": 0.5463392734527588,
        "prompt": " enchant milk pyramid policy string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -11.156970977783203
    },
    {
        "epoch": 82,
        "loss": 1.2705156803131104,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 12.751130104064941,
        "cur_std": 0.5907258510589599,
        "prompt": " mob milk pyramid policy string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -11.031611442565918
    },
    {
        "epoch": 83,
        "loss": 1.2214386463165283,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.13232421875,
        "cur_std": 0.5737255573272705,
        "prompt": " identifier milk pyramid policy string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -10.785724639892578
    },
    {
        "epoch": 84,
        "loss": 1.2562482357025146,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.605748176574707,
        "cur_std": 0.6033927917480468,
        "prompt": " identifier milk pyramid## string Python function that checkslex balanceations Petersburg**?",
        "nll_prompt": -10.755998611450195
    },
    {
        "epoch": 85,
        "loss": 1.223188042640686,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 14.127081871032715,
        "cur_std": 0.6410435199737549,
        "prompt": " identifier milk pyramid## string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -10.399561882019043
    },
    {
        "epoch": 86,
        "loss": 1.3089431524276733,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.39758014678955,
        "cur_std": 0.5914140224456788,
        "prompt": " identifier milk pyramid cat string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -10.654114723205566
    },
    {
        "epoch": 87,
        "loss": 1.311248779296875,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.038129806518555,
        "cur_std": 0.5936864376068115,
        "prompt": " Registrar milk pyramid cat string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.11079216003418
    },
    {
        "epoch": 88,
        "loss": 1.3081024885177612,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 12.836861610412598,
        "cur_std": 0.5819903373718261,
        "prompt": " Registrar milk pyramid acid string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.001154899597168
    },
    {
        "epoch": 89,
        "loss": 1.2780027389526367,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.03212833404541,
        "cur_std": 0.5696549892425538,
        "prompt": " Registrar milk CPR acid string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.580714225769043
    },
    {
        "epoch": 90,
        "loss": 1.25042724609375,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.895075798034668,
        "cur_std": 0.5721903800964355,
        "prompt": " Registrar milk CPR� string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -12.14157772064209
    },
    {
        "epoch": 91,
        "loss": 1.3000528812408447,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.403016090393066,
        "cur_std": 0.5768888473510743,
        "prompt": " Registrar milk CPRic string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.780866622924805
    },
    {
        "epoch": 92,
        "loss": 1.1666010618209839,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.35598087310791,
        "cur_std": 0.5544508934020996,
        "prompt": "m milk CPRic string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.593079566955566
    },
    {
        "epoch": 93,
        "loss": 1.2714968919754028,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.968446731567383,
        "cur_std": 0.5888450622558594,
        "prompt": "mro CPRic string Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -10.670660972595215
    },
    {
        "epoch": 94,
        "loss": 1.3013492822647095,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 15.19305419921875,
        "cur_std": 0.6199838638305664,
        "prompt": "mro CPRic disease Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.211261749267578
    },
    {
        "epoch": 95,
        "loss": 1.2410720586776733,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.32750415802002,
        "cur_std": 0.5868659496307373,
        "prompt": " racro CPRic disease Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.411534309387207
    },
    {
        "epoch": 96,
        "loss": 1.2545753717422485,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 13.197330474853516,
        "cur_std": 0.6080819129943847,
        "prompt": " racro CPRicExample Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -11.058652877807617
    },
    {
        "epoch": 97,
        "loss": 1.2705854177474976,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.956799507141113,
        "best_std": 0.5619102001190186,
        "cur_kl": 12.169934272766113,
        "cur_std": 0.5774285316467285,
        "prompt": " racro CPR PythonExample Python function that checks huh balanceations Petersburg**?",
        "nll_prompt": -10.780634880065918
    },
    {
        "epoch": 98,
        "loss": 1.1825627088546753,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.586587905883789,
        "best_std": 0.5346883773803711,
        "cur_kl": 11.586587905883789,
        "cur_std": 0.5346883773803711,
        "prompt": " racro CPR PythonExample Python function that checks huh balanceations Wilmington**?",
        "nll_prompt": -10.555784225463867
    },
    {
        "epoch": 99,
        "loss": 1.27299165725708,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.586587905883789,
        "best_std": 0.5346883773803711,
        "cur_kl": 12.287501335144043,
        "cur_std": 0.5787364482879639,
        "prompt": " rac Stephen CPR PythonExample Python function that checks huh balanceations Wilmington**?",
        "nll_prompt": -11.057287216186523
    },
    {
        "epoch": 100,
        "loss": 1.1923964023590088,
        "best_loss": 1.1347687244415283,
        "best_kl": 11.586587905883789,
        "best_std": 0.5346883773803711,
        "cur_kl": 12.76215648651123,
        "cur_std": 0.5548419952392578,
        "prompt": " rac Stephen CPR PythonExample Python functionrin checks huh balanceations Wilmington**?",
        "nll_prompt": -11.85908317565918
    }
]