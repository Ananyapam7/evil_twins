[
    {
        "epoch": 1,
        "loss": 0.49080798029899597,
        "best_loss": 0.49080798029899597,
        "best_kl": 9.635204315185547,
        "best_std": 0.3508795976638794,
        "cur_kl": 9.635204315185547,
        "cur_std": 0.3508795976638794,
        "prompt": "'); to write a Python script using dynamic programming to find the longest common subsequence?",
        "nll_prompt": -70.51095581054688
    },
    {
        "epoch": 2,
        "loss": 0.45435091853141785,
        "best_loss": 0.45435091853141785,
        "best_kl": 8.575716018676758,
        "best_std": 0.3112508773803711,
        "cur_kl": 8.575716018676758,
        "cur_std": 0.3112508773803711,
        "prompt": "');  write a Python script using dynamic programming to find the longest common subsequence?",
        "nll_prompt": -70.15308380126953
    },
    {
        "epoch": 3,
        "loss": 0.44187018275260925,
        "best_loss": 0.44187018275260925,
        "best_kl": 8.184151649475098,
        "best_std": 0.31238906383514403,
        "cur_kl": 8.184151649475098,
        "cur_std": 0.31238906383514403,
        "prompt": "');m write a Python script using dynamic programming to find the longest common subsequence?",
        "nll_prompt": -73.47742462158203
    },
    {
        "epoch": 4,
        "loss": 0.42928385734558105,
        "best_loss": 0.42928385734558105,
        "best_kl": 7.838183403015137,
        "best_std": 0.26375489234924315,
        "cur_kl": 7.838183403015137,
        "cur_std": 0.26375489234924315,
        "prompt": "            m write a Python script using dynamic programming to find the longest common subsequence?",
        "nll_prompt": -71.6781234741211
    },
    {
        "epoch": 5,
        "loss": 0.4112797975540161,
        "best_loss": 0.4112797975540161,
        "best_kl": 7.177007675170898,
        "best_std": 0.3145050048828125,
        "cur_kl": 7.177007675170898,
        "cur_std": 0.3145050048828125,
        "prompt": "            m write a Python script using dynamic programming to find� longest common subsequence?",
        "nll_prompt": -101.87523651123047
    },
    {
        "epoch": 6,
        "loss": 0.4114032983779907,
        "best_loss": 0.4112797975540161,
        "best_kl": 7.114343643188477,
        "best_std": 0.30024697780609133,
        "cur_kl": 7.114343643188477,
        "cur_std": 0.30024697780609133,
        "prompt": ":%m write a Python script using dynamic programming to find� longest common subsequence?",
        "nll_prompt": -100.24342346191406
    },
    {
        "epoch": 7,
        "loss": 0.39424216747283936,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 6.658380508422852,
        "cur_std": 0.29895553588867185,
        "prompt": ":**m write a Python script using dynamic programming to find� longest common subsequence?",
        "nll_prompt": -99.93321228027344
    },
    {
        "epoch": 8,
        "loss": 0.40587347745895386,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 6.944888591766357,
        "cur_std": 0.33369643688201905,
        "prompt": ":**m write a Python script using dynamic programming to find� longest common subsequ (@?",
        "nll_prompt": -121.2142333984375
    },
    {
        "epoch": 9,
        "loss": 0.3982556462287903,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 6.796095848083496,
        "cur_std": 0.3488872766494751,
        "prompt": ":**m write a Python script using dynamic programming to find� who common subsequ (@?",
        "nll_prompt": -133.37802124023438
    },
    {
        "epoch": 10,
        "loss": 0.39920878410339355,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 6.705874919891357,
        "cur_std": 0.32760450839996336,
        "prompt": ":**-------------- write a Python script using dynamic programming to find� who common subsequ (@?",
        "nll_prompt": -146.00315856933594
    },
    {
        "epoch": 11,
        "loss": 0.39857736229896545,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 6.664651870727539,
        "cur_std": 0.3374111413955688,
        "prompt": ":**-------------- write a Python script using dynamic programming to findcription who common subsequ (@?",
        "nll_prompt": -138.56784057617188
    },
    {
        "epoch": 12,
        "loss": 0.41130533814430237,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 7.014642715454102,
        "cur_std": 0.3397392749786377,
        "prompt": ":**-------------- write a Python script using dynamic programming to findcription who common subsequ Cart?",
        "nll_prompt": -142.72018432617188
    },
    {
        "epoch": 13,
        "loss": 0.41295555233955383,
        "best_loss": 0.39424216747283936,
        "best_kl": 6.658380508422852,
        "best_std": 0.29895553588867185,
        "cur_kl": 7.100492000579834,
        "cur_std": 0.3592370986938477,
        "prompt": ":** /*! write a Python script using dynamic programming to findcription who common subsequ Cart?",
        "nll_prompt": -140.84066772460938
    },
    {
        "epoch": 14,
        "loss": 0.38799533247947693,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.29045295715332,
        "cur_std": 0.29238457679748536,
        "prompt": "등 /*! write a Python script using dynamic programming to findcription who common subsequ Cart?",
        "nll_prompt": -152.56336975097656
    },
    {
        "epoch": 15,
        "loss": 0.39403727650642395,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.571935653686523,
        "cur_std": 0.2937127113342285,
        "prompt": "등 /*! write a Python script using dynamic programming to findcription who common subsequ Cart that",
        "nll_prompt": -152.25477600097656
    },
    {
        "epoch": 16,
        "loss": 0.4012293815612793,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.8333611488342285,
        "cur_std": 0.2945587635040283,
        "prompt": "등 /*! write a Python script using dynamic programming to find}}\\ who common subsequ Cart that",
        "nll_prompt": -155.94671630859375
    },
    {
        "epoch": 17,
        "loss": 0.40353265404701233,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.689942359924316,
        "cur_std": 0.30375492572784424,
        "prompt": "등 /*! write a Python script using dynamic programming to find}}\\ who common subsequ Cart Ap",
        "nll_prompt": -158.01409912109375
    },
    {
        "epoch": 18,
        "loss": 0.39304468035697937,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.377330303192139,
        "cur_std": 0.35676872730255127,
        "prompt": "등‏ write a Python script using dynamic programming to find}}\\ who common subsequ Cart Ap",
        "nll_prompt": -147.9151611328125
    },
    {
        "epoch": 19,
        "loss": 0.4030264914035797,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.813094139099121,
        "cur_std": 0.45694913864135744,
        "prompt": "线‏ write a Python script using dynamic programming to find}}\\ who common subsequ Cart Ap",
        "nll_prompt": -146.94598388671875
    },
    {
        "epoch": 20,
        "loss": 0.40805381536483765,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 7.028329372406006,
        "cur_std": 0.4107944488525391,
        "prompt": "线‏ write a Python script using dynamic programming to find}}\\ who common subsequ很 Ap",
        "nll_prompt": -144.28921508789062
    },
    {
        "epoch": 21,
        "loss": 0.4032961428165436,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.82489013671875,
        "cur_std": 0.4521700382232666,
        "prompt": "线‏ write a Python script using dynamic programming to find}}\\ who common subsequrico Ap",
        "nll_prompt": -150.02098083496094
    },
    {
        "epoch": 22,
        "loss": 0.39469480514526367,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.605775833129883,
        "cur_std": 0.4427326202392578,
        "prompt": "线‏ write a Python script using dynamic programming to find}}\\ who common subsequricoLANG",
        "nll_prompt": -153.12083435058594
    },
    {
        "epoch": 23,
        "loss": 0.3981408476829529,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.602849006652832,
        "cur_std": 0.4117403030395508,
        "prompt": "线‏ write a Python script using dynamic programming to findilia who common subsequricoLANG",
        "nll_prompt": -151.1800079345703
    },
    {
        "epoch": 24,
        "loss": 0.39519745111465454,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.625699996948242,
        "cur_std": 0.4393787384033203,
        "prompt": "线‏ write a Python script using dynamic programming to findilia who common subsequ calLANG",
        "nll_prompt": -147.63967895507812
    },
    {
        "epoch": 25,
        "loss": 0.3937737047672272,
        "best_loss": 0.38799533247947693,
        "best_kl": 6.29045295715332,
        "best_std": 0.29238457679748536,
        "cur_kl": 6.572610378265381,
        "cur_std": 0.4086928844451904,
        "prompt": "线‏ write a Python script using dynamic programming to findilia who common subsequ cal lin",
        "nll_prompt": -143.96194458007812
    },
    {
        "epoch": 26,
        "loss": 0.3717356026172638,
        "best_loss": 0.3717356026172638,
        "best_kl": 5.644969463348389,
        "best_std": 0.38176674842834474,
        "cur_kl": 5.644969463348389,
        "cur_std": 0.38176674842834474,
        "prompt": "线‏ write a Python script using)\\ programming to findilia who common subsequ cal lin",
        "nll_prompt": -161.94635009765625
    },
    {
        "epoch": 27,
        "loss": 0.37044137716293335,
        "best_loss": 0.37044137716293335,
        "best_kl": 5.515806198120117,
        "best_std": 0.3828374624252319,
        "cur_kl": 5.515806198120117,
        "cur_std": 0.3828374624252319,
        "prompt": "线‏ write a Python script‘)\\ programming to findilia who common subsequ cal lin",
        "nll_prompt": -170.72325134277344
    },
    {
        "epoch": 28,
        "loss": 0.35163748264312744,
        "best_loss": 0.35163748264312744,
        "best_kl": 4.89665412902832,
        "best_std": 0.36547036170959474,
        "cur_kl": 4.89665412902832,
        "cur_std": 0.36547036170959474,
        "prompt": "\\[‏ write a Python script‘)\\ programming to findilia who common subsequ cal lin",
        "nll_prompt": -173.71963500976562
    },
    {
        "epoch": 29,
        "loss": 0.34101736545562744,
        "best_loss": 0.34101736545562744,
        "best_kl": 4.635059833526611,
        "best_std": 0.35902841091156007,
        "cur_kl": 4.635059833526611,
        "cur_std": 0.35902841091156007,
        "prompt": "\\[‏ write a Python script‘-> programming to findilia who common subsequ cal lin",
        "nll_prompt": -171.96896362304688
    },
    {
        "epoch": 30,
        "loss": 0.3367367088794708,
        "best_loss": 0.3367367088794708,
        "best_kl": 4.608567237854004,
        "best_std": 0.36299920082092285,
        "cur_kl": 4.608567237854004,
        "cur_std": 0.36299920082092285,
        "prompt": "\\[​ write a Python script‘-> programming to findilia who common subsequ cal lin",
        "nll_prompt": -167.99383544921875
    },
    {
        "epoch": 31,
        "loss": 0.3304816782474518,
        "best_loss": 0.3304816782474518,
        "best_kl": 4.443149089813232,
        "best_std": 0.34903712272644044,
        "cur_kl": 4.443149089813232,
        "cur_std": 0.34903712272644044,
        "prompt": "){​ write a Python script‘-> programming to findilia who common subsequ cal lin",
        "nll_prompt": -167.21726989746094
    },
    {
        "epoch": 32,
        "loss": 0.3155021667480469,
        "best_loss": 0.3155021667480469,
        "best_kl": 4.035797119140625,
        "best_std": 0.30933926105499265,
        "cur_kl": 4.035797119140625,
        "cur_std": 0.30933926105499265,
        "prompt": "=​ write a Python script‘-> programming to findilia who common subsequ cal lin",
        "nll_prompt": -166.41537475585938
    },
    {
        "epoch": 33,
        "loss": 0.3196805417537689,
        "best_loss": 0.3155021667480469,
        "best_kl": 4.035797119140625,
        "best_std": 0.30933926105499265,
        "cur_kl": 4.105875015258789,
        "cur_std": 0.3159562826156616,
        "prompt": "=​ write a Python script‘)_ programming to findilia who common subsequ cal lin",
        "nll_prompt": -171.2677001953125
    },
    {
        "epoch": 34,
        "loss": 0.33227136731147766,
        "best_loss": 0.3155021667480469,
        "best_kl": 4.035797119140625,
        "best_std": 0.30933926105499265,
        "cur_kl": 4.545619010925293,
        "cur_std": 0.30777831077575685,
        "prompt": "=​ write a Python script‘)_ programming to findilia who common subsequ cal completing",
        "nll_prompt": -173.2833251953125
    },
    {
        "epoch": 35,
        "loss": 0.33107107877731323,
        "best_loss": 0.3155021667480469,
        "best_kl": 4.035797119140625,
        "best_std": 0.30933926105499265,
        "cur_kl": 4.557192802429199,
        "cur_std": 0.30275821685791016,
        "prompt": "=​ write a Python script‘)_ programming to find dl who common subsequ cal completing",
        "nll_prompt": -178.7220001220703
    },
    {
        "epoch": 36,
        "loss": 0.3198353946208954,
        "best_loss": 0.3155021667480469,
        "best_kl": 4.035797119140625,
        "best_std": 0.30933926105499265,
        "cur_kl": 4.209053993225098,
        "cur_std": 0.3258848190307617,
        "prompt": "=​ write a Python script‘)_ programming to find dl who common subsequ cal/'",
        "nll_prompt": -178.2571563720703
    },
    {
        "epoch": 37,
        "loss": 0.32234203815460205,
        "best_loss": 0.3155021667480469,
        "best_kl": 4.035797119140625,
        "best_std": 0.30933926105499265,
        "cur_kl": 4.276494979858398,
        "cur_std": 0.32369656562805177,
        "prompt": "=​ write a Python script‘)_ programming to find dl who common subsequ calwy",
        "nll_prompt": -176.3660430908203
    },
    {
        "epoch": 38,
        "loss": 0.31473594903945923,
        "best_loss": 0.31473594903945923,
        "best_kl": 4.028438568115234,
        "best_std": 0.3054901361465454,
        "cur_kl": 4.028438568115234,
        "cur_std": 0.3054901361465454,
        "prompt": "=​ write a Python script‘)_ programming to find dl who common subsequ calÉ",
        "nll_prompt": -181.1067657470703
    },
    {
        "epoch": 39,
        "loss": 0.30812641978263855,
        "best_loss": 0.30812641978263855,
        "best_kl": 3.908569812774658,
        "best_std": 0.3028881072998047,
        "cur_kl": 3.908569812774658,
        "cur_std": 0.3028881072998047,
        "prompt": "=​ write a Python script‘ @ programming to find dl who common subsequ calÉ",
        "nll_prompt": -171.71665954589844
    },
    {
        "epoch": 40,
        "loss": 0.3072997033596039,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.862257719039917,
        "best_std": 0.31241118907928467,
        "cur_kl": 3.862257719039917,
        "cur_std": 0.31241118907928467,
        "prompt": "=​ write a Python script‘ @ programming to find dl who common subsequ cal\"\"",
        "nll_prompt": -167.22642517089844
    },
    {
        "epoch": 41,
        "loss": 0.3139370381832123,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.862257719039917,
        "best_std": 0.31241118907928467,
        "cur_kl": 3.971017360687256,
        "cur_std": 0.3025580167770386,
        "prompt": "=​ write a Python scriptθ @ programming to find dl who common subsequ cal\"\"",
        "nll_prompt": -171.79580688476562
    },
    {
        "epoch": 42,
        "loss": 0.3125430643558502,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.862257719039917,
        "best_std": 0.31241118907928467,
        "cur_kl": 3.9438729286193848,
        "cur_std": 0.29501492977142335,
        "prompt": "=​ write a Python scriptθ @ programming to find dl who common subsequ calД",
        "nll_prompt": -173.27188110351562
    },
    {
        "epoch": 43,
        "loss": 0.31202393770217896,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.862257719039917,
        "best_std": 0.31241118907928467,
        "cur_kl": 3.925583600997925,
        "cur_std": 0.2711724042892456,
        "prompt": "=​ write a Python script适 @ programming to find dl who common subsequ calД",
        "nll_prompt": -173.318359375
    },
    {
        "epoch": 44,
        "loss": 0.308974027633667,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 3.8065426349639893,
        "cur_std": 0.2773112773895264,
        "prompt": "=​ write a Python script适 @ programming to find dl who common subsequ cal¶",
        "nll_prompt": -172.1044921875
    },
    {
        "epoch": 45,
        "loss": 0.3180088996887207,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.269341468811035,
        "cur_std": 0.31995227336883547,
        "prompt": "=​ write a Python script \\ @ programming to find dl who common subsequ cal¶",
        "nll_prompt": -167.78768920898438
    },
    {
        "epoch": 46,
        "loss": 0.3150925934314728,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.155181407928467,
        "cur_std": 0.3411189079284668,
        "prompt": "=​ write a Python script \\ @ programming to find dl who common subsequ cal::",
        "nll_prompt": -165.30722045898438
    },
    {
        "epoch": 47,
        "loss": 0.3324863612651825,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.5411505699157715,
        "cur_std": 0.3328002691268921,
        "prompt": "=​ write a Python script \\ @ programming to find dl who common subsequ реги::",
        "nll_prompt": -172.6711883544922
    },
    {
        "epoch": 48,
        "loss": 0.32641565799713135,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.567418575286865,
        "cur_std": 0.32923059463500975,
        "prompt": "=​ write a Python script \\ @ programming to find dl who common subsequevent::",
        "nll_prompt": -164.3383331298828
    },
    {
        "epoch": 49,
        "loss": 0.3429992198944092,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.6944990158081055,
        "cur_std": 0.3350841999053955,
        "prompt": "=​ write a Python script $|\\ @ programming to find dl who common subsequevent::",
        "nll_prompt": -170.16978454589844
    },
    {
        "epoch": 50,
        "loss": 0.3199070990085602,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.270485877990723,
        "cur_std": 0.28613078594207764,
        "prompt": "=​ write a Python script ре @ programming to find dl who common subsequevent::",
        "nll_prompt": -178.12767028808594
    },
    {
        "epoch": 51,
        "loss": 0.3144305646419525,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.113146781921387,
        "cur_std": 0.31648194789886475,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequevent::",
        "nll_prompt": -175.52880859375
    },
    {
        "epoch": 52,
        "loss": 0.3150750696659088,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.0260515213012695,
        "cur_std": 0.32824978828430174,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequ Dre::",
        "nll_prompt": -180.75164794921875
    },
    {
        "epoch": 53,
        "loss": 0.3109286427497864,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 3.9955451488494873,
        "cur_std": 0.3267000675201416,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequ dass::",
        "nll_prompt": -180.97113037109375
    },
    {
        "epoch": 54,
        "loss": 0.3168719708919525,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.067336559295654,
        "cur_std": 0.33058986663818357,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequ ju::",
        "nll_prompt": -179.36585998535156
    },
    {
        "epoch": 55,
        "loss": 0.3295888304710388,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.518661975860596,
        "cur_std": 0.31798453330993653,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequ ju mater",
        "nll_prompt": -183.20228576660156
    },
    {
        "epoch": 56,
        "loss": 0.3208151161670685,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.1624674797058105,
        "cur_std": 0.311628532409668,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequ ju К",
        "nll_prompt": -185.86976623535156
    },
    {
        "epoch": 57,
        "loss": 0.3099759519100189,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 3.8914167881011963,
        "cur_std": 0.3022370576858521,
        "prompt": "=​ write a Python script'\\ @ programming to find dl who common subsequ ju †",
        "nll_prompt": -186.78968811035156
    },
    {
        "epoch": 58,
        "loss": 0.31212118268013,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 3.9190263748168945,
        "cur_std": 0.2795470952987671,
        "prompt": "=​ write a Python script状 @ programming to find dl who common subsequ ju †",
        "nll_prompt": -185.25814819335938
    },
    {
        "epoch": 59,
        "loss": 0.3126610815525055,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.094926834106445,
        "cur_std": 0.291062331199646,
        "prompt": "=​ write a Python script~ @ programming to find dl who common subsequ ju †",
        "nll_prompt": -175.52748107910156
    },
    {
        "epoch": 60,
        "loss": 0.31256189942359924,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.130321025848389,
        "cur_std": 0.27307140827178955,
        "prompt": "=​ write a Python script~ @ programming to find dl who common subsequ ende †",
        "nll_prompt": -168.61268615722656
    },
    {
        "epoch": 61,
        "loss": 0.319808691740036,
        "best_loss": 0.3072997033596039,
        "best_kl": 3.8065426349639893,
        "best_std": 0.2773112773895264,
        "cur_kl": 4.121368408203125,
        "cur_std": 0.28556864261627196,
        "prompt": "=​ write a Python script~ @ programming to find dl<' common subsequ ende †",
        "nll_prompt": -169.19772338867188
    },
    {
        "epoch": 62,
        "loss": 0.30225759744644165,
        "best_loss": 0.30225759744644165,
        "best_kl": 3.800751209259033,
        "best_std": 0.2907922983169556,
        "cur_kl": 3.800751209259033,
        "cur_std": 0.2907922983169556,
        "prompt": "=​ write a Python script~ @ programming to find dlinent common subsequ ende †",
        "nll_prompt": -168.40457153320312
    },
    {
        "epoch": 63,
        "loss": 0.3041728734970093,
        "best_loss": 0.30225759744644165,
        "best_kl": 3.800751209259033,
        "best_std": 0.2907922983169556,
        "cur_kl": 3.868502140045166,
        "cur_std": 0.3114835262298584,
        "prompt": "=​ write a Python script~ @ programming to find dlinent common subsequ ende\\{",
        "nll_prompt": -167.74832153320312
    },
    {
        "epoch": 64,
        "loss": 0.30011776089668274,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.6926565170288086,
        "cur_std": 0.3003869533538818,
        "prompt": "=​ Write a Python script~ @ programming to find dlinent common subsequ ende\\{",
        "nll_prompt": -160.00372314453125
    },
    {
        "epoch": 65,
        "loss": 0.30412763357162476,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.823040008544922,
        "cur_std": 0.3184396505355835,
        "prompt": "=​ Write a Python script~ @ laptop to find dlinent common subsequ ende\\{",
        "nll_prompt": -163.7744140625
    },
    {
        "epoch": 66,
        "loss": 0.3028077185153961,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.7764194011688232,
        "cur_std": 0.2987315893173218,
        "prompt": "=​ Write a Python script~ @ @ to find dlinent common subsequ ende\\{",
        "nll_prompt": -154.39419555664062
    },
    {
        "epoch": 67,
        "loss": 0.3012998402118683,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.700909376144409,
        "cur_std": 0.29888186454772947,
        "prompt": "=​ Write a Python script~ @2 to find dlinent common subsequ ende\\{",
        "nll_prompt": -165.88449096679688
    },
    {
        "epoch": 68,
        "loss": 0.3073064684867859,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.971830368041992,
        "cur_std": 0.3019320011138916,
        "prompt": "=​ Write a Python script~ @!-- to find dlinent common subsequ ende\\{",
        "nll_prompt": -164.40213012695312
    },
    {
        "epoch": 69,
        "loss": 0.3093077838420868,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.886979579925537,
        "cur_std": 0.2764961957931519,
        "prompt": "=​ Write a Python script~Man!-- to find dlinent common subsequ ende\\{",
        "nll_prompt": -168.02072143554688
    },
    {
        "epoch": 70,
        "loss": 0.3045428395271301,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.738060712814331,
        "cur_std": 0.28298044204711914,
        "prompt": "=● Write a Python script~Man!-- to find dlinent common subsequ ende\\{",
        "nll_prompt": -167.400390625
    },
    {
        "epoch": 71,
        "loss": 0.3127516508102417,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.9387974739074707,
        "cur_std": 0.30985593795776367,
        "prompt": "=● Write a Python script~ Orts!-- to find dlinent common subsequ ende\\{",
        "nll_prompt": -173.89093017578125
    },
    {
        "epoch": 72,
        "loss": 0.30613088607788086,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.8245654106140137,
        "cur_std": 0.3073734283447266,
        "prompt": "=● Write a Python script~ṭ!-- to find dlinent common subsequ ende\\{",
        "nll_prompt": -165.39788818359375
    },
    {
        "epoch": 73,
        "loss": 0.30769842863082886,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.8720271587371826,
        "cur_std": 0.308128809928894,
        "prompt": "=● Write a Python script~ṭ!-- to find dlinent common subsequ ende[:",
        "nll_prompt": -168.82171630859375
    },
    {
        "epoch": 74,
        "loss": 0.3013466000556946,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.7223260402679443,
        "cur_std": 0.29889051914215087,
        "prompt": "=● Write a Python script<ṭ!-- to find dlinent common subsequ ende[:",
        "nll_prompt": -173.69094848632812
    },
    {
        "epoch": 75,
        "loss": 0.30514201521873474,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.7275753021240234,
        "cur_std": 0.31496191024780273,
        "prompt": "=● Write a Python script<ṭ∆ to find dlinent common subsequ ende[:",
        "nll_prompt": -176.25747680664062
    },
    {
        "epoch": 76,
        "loss": 0.3102869689464569,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.910547971725464,
        "cur_std": 0.32388489246368407,
        "prompt": "._● Write a Python script<ṭ∆ to find dlinent common subsequ ende[:",
        "nll_prompt": -177.77914428710938
    },
    {
        "epoch": 77,
        "loss": 0.3144800066947937,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.044045448303223,
        "cur_std": 0.30839922428131106,
        "prompt": "._● Write a Python script<ṭ∆ to findLOinent common subsequ ende[:",
        "nll_prompt": -177.83828735351562
    },
    {
        "epoch": 78,
        "loss": 0.31662502884864807,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.091214656829834,
        "cur_std": 0.31667068004608157,
        "prompt": "._● Write a Python script<编∆ to findLOinent common subsequ ende[:",
        "nll_prompt": -189.904541015625
    },
    {
        "epoch": 79,
        "loss": 0.32057297229766846,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.239119052886963,
        "cur_std": 0.330781078338623,
        "prompt": "._● Write a Python script<编>\\ to findLOinent common subsequ ende[:",
        "nll_prompt": -184.97879028320312
    },
    {
        "epoch": 80,
        "loss": 0.3153401017189026,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.129319190979004,
        "cur_std": 0.3189351558685303,
        "prompt": "._● Write a Python script<**>\\ to findLOinent common subsequ ende[:",
        "nll_prompt": -171.54605102539062
    },
    {
        "epoch": 81,
        "loss": 0.32428693771362305,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.410658359527588,
        "cur_std": 0.32949175834655764,
        "prompt": "._● Write a Python script<**>\\ to findLOinent common subsequ endeсько",
        "nll_prompt": -176.32412719726562
    },
    {
        "epoch": 82,
        "loss": 0.32011693716049194,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.243135452270508,
        "cur_std": 0.31960277557373046,
        "prompt": "._● Write a Python script<**>\\ to findLOinent common subsequ endewd",
        "nll_prompt": -174.89834594726562
    },
    {
        "epoch": 83,
        "loss": 0.31260809302330017,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.9690661430358887,
        "cur_std": 0.31048407554626467,
        "prompt": "._● Write a Python script<**>\\ to findLOinent common subsequsswd",
        "nll_prompt": -172.28379821777344
    },
    {
        "epoch": 84,
        "loss": 0.31114497780799866,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.91872239112854,
        "cur_std": 0.30415778160095214,
        "prompt": "._resolved Write a Python script<**>\\ to findLOinent common subsequsswd",
        "nll_prompt": -177.338623046875
    },
    {
        "epoch": 85,
        "loss": 0.31113967299461365,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.9928135871887207,
        "cur_std": 0.3082101821899414,
        "prompt": "._resolved Write a Python script<**>\\ to findLOinent common subsequssnak",
        "nll_prompt": -177.819091796875
    },
    {
        "epoch": 86,
        "loss": 0.3135073184967041,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.97070050239563,
        "cur_std": 0.31933140754699707,
        "prompt": "._resolved Write a Python script'\\**>\\ to findLOinent common subsequssnak",
        "nll_prompt": -185.418701171875
    },
    {
        "epoch": 87,
        "loss": 0.3156292736530304,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.024400234222412,
        "cur_std": 0.3169020891189575,
        "prompt": "._resolved Write a Python script'\\**>\\ to findLOinent common subsequssца",
        "nll_prompt": -184.283935546875
    },
    {
        "epoch": 88,
        "loss": 0.3072107434272766,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.7864816188812256,
        "cur_std": 0.30990612506866455,
        "prompt": "._resolved Write a Python script'\\**>\\ to findLOinent common subsequbца",
        "nll_prompt": -183.08047485351562
    },
    {
        "epoch": 89,
        "loss": 0.302648663520813,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.7104246616363525,
        "cur_std": 0.3102151155471802,
        "prompt": "._resolved Write a Python script'\\⟩>\\ to findLOinent common subsequbца",
        "nll_prompt": -189.76483154296875
    },
    {
        "epoch": 90,
        "loss": 0.3050306737422943,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.796708583831787,
        "cur_std": 0.32668361663818357,
        "prompt": "._resolved Write a Python script'\\⟩){\\ to findLOinent common subsequbца",
        "nll_prompt": -195.7431640625
    },
    {
        "epoch": 91,
        "loss": 0.3069327175617218,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.90885853767395,
        "cur_std": 0.31780195236206055,
        "prompt": "._HOUT Write a Python script'\\⟩){\\ to findLOinent common subsequbца",
        "nll_prompt": -192.00628662109375
    },
    {
        "epoch": 92,
        "loss": 0.3072687089443207,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.9000487327575684,
        "cur_std": 0.30920891761779784,
        "prompt": "._HOUT Write a Python script'\\⟩){\\ to findLOנ common subsequbца",
        "nll_prompt": -188.75003051757812
    },
    {
        "epoch": 93,
        "loss": 0.306959867477417,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.905136823654175,
        "cur_std": 0.29878034591674807,
        "prompt": "._HOUT Write a Python script'\\⟩条 to findLOנ common subsequbца",
        "nll_prompt": -182.4311981201172
    },
    {
        "epoch": 94,
        "loss": 0.3125680387020111,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 4.0438032150268555,
        "cur_std": 0.3221914291381836,
        "prompt": "._ Roc Write a Python script'\\⟩条 to findLOנ common subsequbца",
        "nll_prompt": -189.67454528808594
    },
    {
        "epoch": 95,
        "loss": 0.3097105622291565,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.965263605117798,
        "cur_std": 0.32659592628479006,
        "prompt": "._d Write a Python script'\\⟩条 to findLOנ common subsequbца",
        "nll_prompt": -167.81634521484375
    },
    {
        "epoch": 96,
        "loss": 0.305534690618515,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.8368122577667236,
        "cur_std": 0.30483767986297605,
        "prompt": "._d Write a Python script'\\ }}条 to findLOנ common subsequbца",
        "nll_prompt": -168.66940307617188
    },
    {
        "epoch": 97,
        "loss": 0.30474480986595154,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.836951732635498,
        "cur_std": 0.30698978900909424,
        "prompt": "._d Write a Python script'\\ }}条 to findLOנ common subsequćца",
        "nll_prompt": -178.56056213378906
    },
    {
        "epoch": 98,
        "loss": 0.3047448396682739,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.836951732635498,
        "cur_std": 0.30698978900909424,
        "prompt": "._� Write a Python script'\\ }}条 to findLOנ common subsequćца",
        "nll_prompt": -178.56056213378906
    },
    {
        "epoch": 99,
        "loss": 0.3047448694705963,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.836951732635498,
        "cur_std": 0.30698978900909424,
        "prompt": "._\u0011 Write a Python script'\\ }}条 to findLOנ common subsequćца",
        "nll_prompt": -178.56056213378906
    },
    {
        "epoch": 100,
        "loss": 0.3047448396682739,
        "best_loss": 0.30011776089668274,
        "best_kl": 3.6926565170288086,
        "best_std": 0.3003869533538818,
        "cur_kl": 3.836951732635498,
        "cur_std": 0.30698978900909424,
        "prompt": "._y Write a Python script'\\ }}条 to findLOנ common subsequćца",
        "nll_prompt": -178.56056213378906
    }
]