[
    {
        "epoch": 1,
        "loss": 0.17850811779499054,
        "best_loss": 0.17850811779499054,
        "best_kl": 3.93178391456604,
        "best_std": 0.15923818349838256,
        "cur_kl": 3.93178391456604,
        "cur_std": 0.15923818349838256,
        "prompt": "<bos> vulgaires code in JavaScript to find the largest and smallest numbers in an array",
        "nll_prompt": -131.29185485839844
    },
    {
        "epoch": 2,
        "loss": 0.16001056134700775,
        "best_loss": 0.16001056134700775,
        "best_kl": 3.4467406272888184,
        "best_std": 0.2006366729736328,
        "cur_kl": 3.4467406272888184,
        "cur_std": 0.2006366729736328,
        "prompt": "<bos> vulgaires code in JavaScript izvē find the largest and smallest numbers in an array",
        "nll_prompt": -187.24627685546875
    },
    {
        "epoch": 3,
        "loss": 0.15225830674171448,
        "best_loss": 0.15225830674171448,
        "best_kl": 3.1703243255615234,
        "best_std": 0.20596497058868407,
        "cur_kl": 3.1703243255615234,
        "cur_std": 0.20596497058868407,
        "prompt": "<bos> vulgaires codebenen JavaScript izvē find the largest and smallest numbers in an array",
        "nll_prompt": -212.86219787597656
    },
    {
        "epoch": 4,
        "loss": 0.1292661875486374,
        "best_loss": 0.1292661875486374,
        "best_kl": 2.4042208194732666,
        "best_std": 0.1967524528503418,
        "cur_kl": 2.4042208194732666,
        "cur_std": 0.1967524528503418,
        "prompt": "<bos> vulgaires codebenen JavaScriptolyte find the largest and smallest numbers in an array",
        "nll_prompt": -209.8627471923828
    },
    {
        "epoch": 5,
        "loss": 0.12148162722587585,
        "best_loss": 0.12148162722587585,
        "best_kl": 2.1987767219543457,
        "best_std": 0.2688145637512207,
        "cur_kl": 2.1987767219543457,
        "cur_std": 0.2688145637512207,
        "prompt": "<bos> vulgaires codebenen JavaScriptolyte find becau largest and smallest numbers in an array",
        "nll_prompt": -250.44520568847656
    },
    {
        "epoch": 6,
        "loss": 0.10791930556297302,
        "best_loss": 0.10791930556297302,
        "best_kl": 1.762683629989624,
        "best_std": 0.24644975662231444,
        "cur_kl": 1.762683629989624,
        "cur_std": 0.24644975662231444,
        "prompt": "<bos> vulgaires codebenen JavaScriptolyte find Byp largest and smallest numbers in an array",
        "nll_prompt": -257.9886169433594
    },
    {
        "epoch": 7,
        "loss": 0.10992635786533356,
        "best_loss": 0.10791930556297302,
        "best_kl": 1.762683629989624,
        "best_std": 0.24644975662231444,
        "cur_kl": 1.8159700632095337,
        "cur_std": 0.207865309715271,
        "prompt": "<bos> vulgaires codebenen JavaScript désol find Byp largest and smallest numbers in an array",
        "nll_prompt": -267.4239196777344
    },
    {
        "epoch": 8,
        "loss": 0.1023145392537117,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.6334588527679443,
        "best_std": 0.23169221878051757,
        "cur_kl": 1.6334588527679443,
        "cur_std": 0.23169221878051757,
        "prompt": "<bos> vulgaires codebenen JavaScriptssysteme find Byp largest and smallest numbers in an array",
        "nll_prompt": -252.4956512451172
    },
    {
        "epoch": 9,
        "loss": 0.10793638229370117,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.6334588527679443,
        "best_std": 0.23169221878051757,
        "cur_kl": 1.7592650651931763,
        "cur_std": 0.2169405698776245,
        "prompt": "<bos> vulgaires codebenen JavaScriptssysteme find Compli largest and smallest numbers in an array",
        "nll_prompt": -241.34339904785156
    },
    {
        "epoch": 10,
        "loss": 0.11411915719509125,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.6334588527679443,
        "best_std": 0.23169221878051757,
        "cur_kl": 2.051189422607422,
        "cur_std": 0.268472695350647,
        "prompt": "<bos> vulgaires codebenen JavaScriptssysteme find Sampled largest and smallest numbers in an array",
        "nll_prompt": -241.34390258789062
    },
    {
        "epoch": 11,
        "loss": 0.10496354103088379,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.6170392036437988,
        "best_std": 0.1903240203857422,
        "cur_kl": 1.6170392036437988,
        "cur_std": 0.1903240203857422,
        "prompt": "<bos> vulgaires codebenen JavaScriptssysteme findIkus largest and smallest numbers in an array",
        "nll_prompt": -244.0082244873047
    },
    {
        "epoch": 12,
        "loss": 0.10629229247570038,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.5801054239273071,
        "best_std": 0.1640707731246948,
        "cur_kl": 1.5801054239273071,
        "cur_std": 0.1640707731246948,
        "prompt": "<bos> vulgaires codebenen JavaScript lii findIkus largest and smallest numbers in an array",
        "nll_prompt": -252.39205932617188
    },
    {
        "epoch": 13,
        "loss": 0.11583349108695984,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.5801054239273071,
        "best_std": 0.1640707731246948,
        "cur_kl": 1.8765724897384644,
        "cur_std": 0.17367520332336425,
        "prompt": "<bos> vulgaires codebenen JavaScript oon findIkus largest and smallest numbers in an array",
        "nll_prompt": -249.08096313476562
    },
    {
        "epoch": 14,
        "loss": 0.10611625760793686,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.523747205734253,
        "cur_std": 0.1578407645225525,
        "prompt": "<bos> vulgaires codebenen JavaScript chande findIkus largest and smallest numbers in an array",
        "nll_prompt": -253.61627197265625
    },
    {
        "epoch": 15,
        "loss": 0.11637303978204727,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.8463126420974731,
        "cur_std": 0.19071930646896362,
        "prompt": "<bos> vulgaires codebenen JavaScript chande findIkus largest and minutely numbers in an array",
        "nll_prompt": -276.9507751464844
    },
    {
        "epoch": 16,
        "loss": 0.13396711647510529,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 2.4303410053253174,
        "cur_std": 0.1972293257713318,
        "prompt": "<bos> vulgaires code cryst JavaScript chande findIkus largest and minutely numbers in an array",
        "nll_prompt": -277.19842529296875
    },
    {
        "epoch": 17,
        "loss": 0.11990930885076523,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.9732962846755981,
        "cur_std": 0.18973475694656372,
        "prompt": "<bos> vulgaires code ответственности JavaScript chande findIkus largest and minutely numbers in an array",
        "nll_prompt": -280.88592529296875
    },
    {
        "epoch": 18,
        "loss": 0.11024129390716553,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.60028076171875,
        "cur_std": 0.18756998777389527,
        "prompt": "<bos> vulgaires code ответственности JavaScript chande findIkus largest andlittle numbers in an array",
        "nll_prompt": -285.20367431640625
    },
    {
        "epoch": 19,
        "loss": 0.1085822656750679,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.7326164245605469,
        "cur_std": 0.20326650142669678,
        "prompt": "<bos> vulgaires code ответственности JavaScript內容簡介 findIkus largest andlittle numbers in an array",
        "nll_prompt": -289.06787109375
    },
    {
        "epoch": 20,
        "loss": 0.1231280267238617,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 2.1995766162872314,
        "cur_std": 0.2550873517990112,
        "prompt": "<bos> vulgaires code împre JavaScript內容簡介 findIkus largest andlittle numbers in an array",
        "nll_prompt": -280.40869140625
    },
    {
        "epoch": 21,
        "loss": 0.11292026937007904,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.9413247108459473,
        "cur_std": 0.22605245113372802,
        "prompt": "<bos> vulgaires codeůr JavaScript內容簡介 findIkus largest andlittle numbers in an array",
        "nll_prompt": -292.2095031738281
    },
    {
        "epoch": 22,
        "loss": 0.12179434299468994,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 2.1422600746154785,
        "cur_std": 0.22036588191986084,
        "prompt": "<bos> vulgaires code leaft JavaScript內容簡介 findIkus largest andlittle numbers in an array",
        "nll_prompt": -296.04766845703125
    },
    {
        "epoch": 23,
        "loss": 0.13355304300785065,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 2.3698391914367676,
        "cur_std": 0.23249337673187256,
        "prompt": "<bos> vulgaires code leaft JavaScript panahon findIkus largest andlittle numbers in an array",
        "nll_prompt": -292.2427062988281
    },
    {
        "epoch": 24,
        "loss": 0.12029082328081131,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 2.009511709213257,
        "cur_std": 0.20727195739746093,
        "prompt": "<bos> vulgaires code囗 JavaScript panahon findIkus largest andlittle numbers in an array",
        "nll_prompt": -276.4066162109375
    },
    {
        "epoch": 25,
        "loss": 0.11737070977687836,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.9060137271881104,
        "cur_std": 0.2275679111480713,
        "prompt": "<bos> vulgaires code囗 JavaScript Cartes findIkus largest andlittle numbers in an array",
        "nll_prompt": -281.2218017578125
    },
    {
        "epoch": 26,
        "loss": 0.12883180379867554,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 2.307711362838745,
        "cur_std": 0.22077767848968505,
        "prompt": "<bos> vulgaires code囗 JavaScript strö findIkus largest andlittle numbers in an array",
        "nll_prompt": -281.6795654296875
    },
    {
        "epoch": 27,
        "loss": 0.11698059737682343,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.8381704092025757,
        "cur_std": 0.22078590393066405,
        "prompt": "<bos> vulgaires code囗 JavaScript sportback findIkus largest andlittle numbers in an array",
        "nll_prompt": -301.0689392089844
    },
    {
        "epoch": 28,
        "loss": 0.11618576943874359,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.523747205734253,
        "best_std": 0.1578407645225525,
        "cur_kl": 1.8559502363204956,
        "cur_std": 0.20500552654266357,
        "prompt": "<bos> vulgaires code囗 JavaScript liev findIkus largest andlittle numbers in an array",
        "nll_prompt": -293.2501220703125
    },
    {
        "epoch": 29,
        "loss": 0.10349346697330475,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.350009560585022,
        "cur_std": 0.17839878797531128,
        "prompt": "<bos> vulgaires code\"])) JavaScript liev findIkus largest andlittle numbers in an array",
        "nll_prompt": -302.1331787109375
    },
    {
        "epoch": 30,
        "loss": 0.11329787224531174,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.7087503671646118,
        "cur_std": 0.1703461766242981,
        "prompt": "<bos> Daven code\"])) JavaScript liev findIkus largest andlittle numbers in an array",
        "nll_prompt": -238.55787658691406
    },
    {
        "epoch": 31,
        "loss": 0.11862797290086746,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.082315683364868,
        "cur_std": 0.2991662502288818,
        "prompt": "<bos> Daven code\"])) JavaScript liev findDun largest andlittle numbers in an array",
        "nll_prompt": -226.14341735839844
    },
    {
        "epoch": 32,
        "loss": 0.10840797424316406,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.8777940273284912,
        "cur_std": 0.29142045974731445,
        "prompt": "<bos>Escrito code\"])) JavaScript liev findDun largest andlittle numbers in an array",
        "nll_prompt": -295.8966064453125
    },
    {
        "epoch": 33,
        "loss": 0.10949116200208664,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.8487619161605835,
        "cur_std": 0.27694120407104494,
        "prompt": "<bos> scoperto code\"])) JavaScript liev findDun largest andlittle numbers in an array",
        "nll_prompt": -261.80865478515625
    },
    {
        "epoch": 34,
        "loss": 0.10926659405231476,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.815863013267517,
        "cur_std": 0.27966818809509275,
        "prompt": "<bos> scoperto EXPLANATION\"])) JavaScript liev findDun largest andlittle numbers in an array",
        "nll_prompt": -272.7926025390625
    },
    {
        "epoch": 35,
        "loss": 0.11824547499418259,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.0196571350097656,
        "cur_std": 0.2922674655914307,
        "prompt": "<bos> scoperto EXPLANATION\"])) JavaScript pères findDun largest andlittle numbers in an array",
        "nll_prompt": -265.7115173339844
    },
    {
        "epoch": 36,
        "loss": 0.11815574020147324,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.9612746238708496,
        "cur_std": 0.2474360227584839,
        "prompt": "<bos> scoperto EXPLANATION\"])) JavaScript noce findDun largest andlittle numbers in an array",
        "nll_prompt": -266.1946105957031
    },
    {
        "epoch": 37,
        "loss": 0.10945744067430496,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.8044363260269165,
        "cur_std": 0.24419934749603273,
        "prompt": "<bos> scoperto EXPLANATION\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -249.80136108398438
    },
    {
        "epoch": 38,
        "loss": 0.11427906900644302,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.9203240871429443,
        "cur_std": 0.23117513656616212,
        "prompt": "<bos> robuste EXPLANATION\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -249.13485717773438
    },
    {
        "epoch": 39,
        "loss": 0.11737605184316635,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.0946178436279297,
        "cur_std": 0.24429256916046144,
        "prompt": "<bos> colazione EXPLANATION\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -262.84466552734375
    },
    {
        "epoch": 40,
        "loss": 0.11132725328207016,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.9284862279891968,
        "cur_std": 0.26031901836395266,
        "prompt": "<bos> Augu EXPLANATION\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -207.9080047607422
    },
    {
        "epoch": 41,
        "loss": 0.11225388944149017,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.9378483295440674,
        "cur_std": 0.2529693603515625,
        "prompt": "<bos> wien EXPLANATION\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -198.83314514160156
    },
    {
        "epoch": 42,
        "loss": 0.10731149464845657,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.7362017631530762,
        "cur_std": 0.2475970983505249,
        "prompt": "<bos>verticalLayout EXPLANATION\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -270.7513122558594
    },
    {
        "epoch": 43,
        "loss": 0.12089573591947556,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.1098883152008057,
        "cur_std": 0.2530754804611206,
        "prompt": "<bos>verticalLayout Topeka\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -270.1310729980469
    },
    {
        "epoch": 44,
        "loss": 0.11140916496515274,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.9058852195739746,
        "cur_std": 0.2520960092544556,
        "prompt": "<bos>verticalLayout xd\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -252.81871032714844
    },
    {
        "epoch": 45,
        "loss": 0.11202502995729446,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.777329683303833,
        "cur_std": 0.24403204917907714,
        "prompt": "<bos>cassert xd\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -253.3816375732422
    },
    {
        "epoch": 46,
        "loss": 0.10925259441137314,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.6967190504074097,
        "cur_std": 0.23380472660064697,
        "prompt": "<bos>cassert \"/\";\"])) JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -259.1195373535156
    },
    {
        "epoch": 47,
        "loss": 0.11050840467214584,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.7738004922866821,
        "cur_std": 0.24717185497283936,
        "prompt": "<bos>cassert \"/\";>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -263.3394470214844
    },
    {
        "epoch": 48,
        "loss": 0.11247700452804565,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.84401273727417,
        "cur_std": 0.25744497776031494,
        "prompt": "<bos>cassert nettement>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -278.6992492675781
    },
    {
        "epoch": 49,
        "loss": 0.11840958148241043,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.2851412296295166,
        "cur_std": 0.2845818519592285,
        "prompt": "<bos>awsze nettement>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -265.860595703125
    },
    {
        "epoch": 50,
        "loss": 0.11605947464704514,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.0956997871398926,
        "cur_std": 0.2608537435531616,
        "prompt": "<bos> fign nettement>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -218.39149475097656
    },
    {
        "epoch": 51,
        "loss": 0.11734562367200851,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.10654354095459,
        "cur_std": 0.2585669279098511,
        "prompt": "<bos> earnestness nettement>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -265.7137756347656
    },
    {
        "epoch": 52,
        "loss": 0.12177782505750656,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.2631819248199463,
        "cur_std": 0.24515483379364014,
        "prompt": "<bos> earnestness Piping>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -246.9781494140625
    },
    {
        "epoch": 53,
        "loss": 0.11806026101112366,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.107651472091675,
        "cur_std": 0.2578390598297119,
        "prompt": "<bos> earnestness :—>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -247.7554473876953
    },
    {
        "epoch": 54,
        "loss": 0.11801492422819138,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.1814186573028564,
        "cur_std": 0.2618128776550293,
        "prompt": "<bos> traduit :—>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -271.1029968261719
    },
    {
        "epoch": 55,
        "loss": 0.1146930381655693,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.133798599243164,
        "cur_std": 0.2745064258575439,
        "prompt": "<bos> traduit nece>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -268.0408935546875
    },
    {
        "epoch": 56,
        "loss": 0.11710778623819351,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.1967201232910156,
        "cur_std": 0.26484720706939696,
        "prompt": "<bos> traduit部>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -238.5590362548828
    },
    {
        "epoch": 57,
        "loss": 0.11369985342025757,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.0653738975524902,
        "cur_std": 0.26501097679138186,
        "prompt": "<bos> traduit roth>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -271.2616882324219
    },
    {
        "epoch": 58,
        "loss": 0.11718270927667618,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.2590527534484863,
        "cur_std": 0.27949795722961424,
        "prompt": "<bos> traduit mis>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -255.433837890625
    },
    {
        "epoch": 59,
        "loss": 0.11651718616485596,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.2178587913513184,
        "cur_std": 0.2794064521789551,
        "prompt": "<bos> traduit kayo>>() JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -269.64068603515625
    },
    {
        "epoch": 60,
        "loss": 0.11666414886713028,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.2500314712524414,
        "cur_std": 0.2642148733139038,
        "prompt": "<bos> traduit kayo dettaglio JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -257.5958251953125
    },
    {
        "epoch": 61,
        "loss": 0.12218936532735825,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.459131956100464,
        "cur_std": 0.27062134742736815,
        "prompt": "<bos> traduit kayo 详情 JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -260.1246337890625
    },
    {
        "epoch": 62,
        "loss": 0.1280212253332138,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.5932915210723877,
        "cur_std": 0.2739665985107422,
        "prompt": "<bos> traduit kayo détru JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -275.5434265136719
    },
    {
        "epoch": 63,
        "loss": 0.1325579732656479,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.757776975631714,
        "cur_std": 0.28384079933166506,
        "prompt": "<bos> traduit kayo whiche JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -279.91558837890625
    },
    {
        "epoch": 64,
        "loss": 0.12512114644050598,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.483377695083618,
        "cur_std": 0.2522911310195923,
        "prompt": "<bos> traduit nessa whiche JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -280.90679931640625
    },
    {
        "epoch": 65,
        "loss": 0.12356086820363998,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.398247480392456,
        "cur_std": 0.2771697998046875,
        "prompt": "<bos> traduit Standardi whiche JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -265.064697265625
    },
    {
        "epoch": 66,
        "loss": 0.1328945904970169,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.743381977081299,
        "cur_std": 0.270855450630188,
        "prompt": "<bos> traduit Standardi aisladas JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -264.82244873046875
    },
    {
        "epoch": 67,
        "loss": 0.12459756433963776,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.273160696029663,
        "cur_std": 0.24531803131103516,
        "prompt": "<bos>signed Standardi aisladas JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -251.96835327148438
    },
    {
        "epoch": 68,
        "loss": 0.11617296934127808,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.0199573040008545,
        "cur_std": 0.22552165985107422,
        "prompt": "<bos>signedllons aisladas JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -254.55133056640625
    },
    {
        "epoch": 69,
        "loss": 0.1286168396472931,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.4101758003234863,
        "cur_std": 0.2354952096939087,
        "prompt": "<bos>signedllons fortn JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -247.0301513671875
    },
    {
        "epoch": 70,
        "loss": 0.12323658913373947,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.309939384460449,
        "cur_std": 0.24149677753448487,
        "prompt": "<bos>signedllons питання JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -256.8006591796875
    },
    {
        "epoch": 71,
        "loss": 0.11978787183761597,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.138540506362915,
        "cur_std": 0.23939125537872313,
        "prompt": "<bos>signedllons Meksi JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -271.0791931152344
    },
    {
        "epoch": 72,
        "loss": 0.11675981432199478,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.058258533477783,
        "cur_std": 0.23427219390869142,
        "prompt": "<bos>signedllons vôtre JavaScript setCode findDun largest andlittle numbers in an array",
        "nll_prompt": -260.40380859375
    },
    {
        "epoch": 73,
        "loss": 0.1264629364013672,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.380077838897705,
        "cur_std": 0.2772523880004883,
        "prompt": "<bos>signedllons vôtre JavaScript Gers findDun largest andlittle numbers in an array",
        "nll_prompt": -273.62188720703125
    },
    {
        "epoch": 74,
        "loss": 0.12140931189060211,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.1560192108154297,
        "cur_std": 0.26092000007629396,
        "prompt": "<bos>signedllonsresponse JavaScript Gers findDun largest andlittle numbers in an array",
        "nll_prompt": -255.71275329589844
    },
    {
        "epoch": 75,
        "loss": 0.12467948347330093,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 2.3745625019073486,
        "cur_std": 0.2892796993255615,
        "prompt": "<bos> cipollallonsresponse JavaScript Gers findDun largest andlittle numbers in an array",
        "nll_prompt": -249.79441833496094
    },
    {
        "epoch": 76,
        "loss": 0.1146022230386734,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.8943572044372559,
        "cur_std": 0.21778178215026855,
        "prompt": "<bos> cipollallonsresponse JavaScript Gers findDun largest and Lowest numbers in an array",
        "nll_prompt": -239.82701110839844
    },
    {
        "epoch": 77,
        "loss": 0.10547077655792236,
        "best_loss": 0.1023145392537117,
        "best_kl": 1.350009560585022,
        "best_std": 0.17839878797531128,
        "cur_kl": 1.543563961982727,
        "cur_std": 0.2033081531524658,
        "prompt": "<bos> faticallonsresponse JavaScript Gers findDun largest and Lowest numbers in an array",
        "nll_prompt": -220.56353759765625
    },
    {
        "epoch": 78,
        "loss": 0.0992603451013565,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.3188633918762207,
        "cur_std": 0.18084930181503295,
        "prompt": "<bos> faticallonsresponse JavaScript Reds findDun largest and Lowest numbers in an array",
        "nll_prompt": -218.639404296875
    },
    {
        "epoch": 79,
        "loss": 0.10031094402074814,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.42347252368927,
        "cur_std": 0.18482271432876587,
        "prompt": "<bos> parfaitellonsresponse JavaScript Reds findDun largest and Lowest numbers in an array",
        "nll_prompt": -229.19131469726562
    },
    {
        "epoch": 80,
        "loss": 0.1116824522614479,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.7076740264892578,
        "cur_std": 0.18283481597900392,
        "prompt": "<bos> parfaiteGenauresponse JavaScript Reds findDun largest and Lowest numbers in an array",
        "nll_prompt": -251.79165649414062
    },
    {
        "epoch": 81,
        "loss": 0.10062870383262634,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.3882710933685303,
        "cur_std": 0.1805111885070801,
        "prompt": "<bos> parfaitedrojeresponse JavaScript Reds findDun largest and Lowest numbers in an array",
        "nll_prompt": -242.4153289794922
    },
    {
        "epoch": 82,
        "loss": 0.11274868994951248,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.8786375522613525,
        "cur_std": 0.19031007289886476,
        "prompt": "<bos> parfaite Schloßresponse JavaScript Reds findDun largest and Lowest numbers in an array",
        "nll_prompt": -242.953857421875
    },
    {
        "epoch": 83,
        "loss": 0.11779642105102539,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 2.0343809127807617,
        "cur_std": 0.16189658641815186,
        "prompt": "<bos> parfaite Schloßresponse JavaScript morons findDun largest and Lowest numbers in an array",
        "nll_prompt": -233.25120544433594
    },
    {
        "epoch": 84,
        "loss": 0.12723319232463837,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 2.505286455154419,
        "cur_std": 0.270608115196228,
        "prompt": "<bos> parfaite Schloßresponse JavaScript xxv findDun largest and Lowest numbers in an array",
        "nll_prompt": -260.8372802734375
    },
    {
        "epoch": 85,
        "loss": 0.10865097492933273,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.7206292152404785,
        "cur_std": 0.24809958934783935,
        "prompt": "<bos> parfaiteProcedimientoresponse JavaScript xxv findDun largest and Lowest numbers in an array",
        "nll_prompt": -267.8027648925781
    },
    {
        "epoch": 86,
        "loss": 0.10262425988912582,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.488477110862732,
        "cur_std": 0.2580289125442505,
        "prompt": "<bos>hibliProcedimientoresponse JavaScript xxv findDun largest and Lowest numbers in an array",
        "nll_prompt": -301.7449645996094
    },
    {
        "epoch": 87,
        "loss": 0.10211117565631866,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.3951685428619385,
        "cur_std": 0.21074891090393066,
        "prompt": "<bos>hibliProcedimientoresponse JavaScriptsolicited findDun largest and Lowest numbers in an array",
        "nll_prompt": -302.3275146484375
    },
    {
        "epoch": 88,
        "loss": 0.10316304862499237,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.4774848222732544,
        "cur_std": 0.21396584510803224,
        "prompt": "<bos>hibliProcedimientoresponse JavaScriptsolicited findDun largest andLeast numbers in an array",
        "nll_prompt": -308.11785888671875
    },
    {
        "epoch": 89,
        "loss": 0.1070605218410492,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.6572006940841675,
        "cur_std": 0.23575265407562257,
        "prompt": "<bos>hibliProcedimientoresponse JavaScript rè findDun largest andLeast numbers in an array",
        "nll_prompt": -295.47015380859375
    },
    {
        "epoch": 90,
        "loss": 0.10569164901971817,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.6836299896240234,
        "cur_std": 0.2630930423736572,
        "prompt": "<bos>hibliProcedimientoresponse JavaScript rè findDun largest and MINI numbers in an array",
        "nll_prompt": -306.0015869140625
    },
    {
        "epoch": 91,
        "loss": 0.1076112911105156,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.710738182067871,
        "cur_std": 0.25626568794250487,
        "prompt": "<bos>hibliProcedimientoresponse JavaScriptopcional findDun largest and MINI numbers in an array",
        "nll_prompt": -305.88409423828125
    },
    {
        "epoch": 92,
        "loss": 0.10322018712759018,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.604748249053955,
        "cur_std": 0.26644837856292725,
        "prompt": "<bos>hibliProcedimientoresponse JavaScriptsqr findDun largest and MINI numbers in an array",
        "nll_prompt": -297.6963195800781
    },
    {
        "epoch": 93,
        "loss": 0.10411854833364487,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.6666518449783325,
        "cur_std": 0.25217370986938475,
        "prompt": "<bos>hibliProcedimientonisses JavaScriptsqr findDun largest and MINI numbers in an array",
        "nll_prompt": -305.9685974121094
    },
    {
        "epoch": 94,
        "loss": 0.10270725190639496,
        "best_loss": 0.0992603451013565,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.6798275709152222,
        "cur_std": 0.25975613594055175,
        "prompt": "<bos> nemoProcedimientonisses JavaScriptsqr findDun largest and MINI numbers in an array",
        "nll_prompt": -284.49169921875
    },
    {
        "epoch": 95,
        "loss": 0.09761279076337814,
        "best_loss": 0.09761279076337814,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.407325267791748,
        "cur_std": 0.2330399990081787,
        "prompt": "<bos> nemoProcedimientonisses JavaScriptsqr findDun largest and Minimum numbers in an array",
        "nll_prompt": -271.1668701171875
    },
    {
        "epoch": 96,
        "loss": 0.10070682317018509,
        "best_loss": 0.09761279076337814,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.4410204887390137,
        "cur_std": 0.21124627590179443,
        "prompt": "<bos> nemoProcedimientonisses JavaScript ruddy findDun largest and Minimum numbers in an array",
        "nll_prompt": -283.6702575683594
    },
    {
        "epoch": 97,
        "loss": 0.1019941195845604,
        "best_loss": 0.09761279076337814,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.604239821434021,
        "cur_std": 0.18630391359329224,
        "prompt": "<bos> nemoProcedimientonisses JavaScript unlawfully findDun largest and Minimum numbers in an array",
        "nll_prompt": -267.91387939453125
    },
    {
        "epoch": 98,
        "loss": 0.09996200352907181,
        "best_loss": 0.09761279076337814,
        "best_kl": 1.3188633918762207,
        "best_std": 0.18084930181503295,
        "cur_kl": 1.3380911350250244,
        "cur_std": 0.17269811630249024,
        "prompt": "<bos> nemoProcedimientonisses JavaScript inol findDun largest and Minimum numbers in an array",
        "nll_prompt": -290.25115966796875
    },
    {
        "epoch": 99,
        "loss": 0.09151426702737808,
        "best_loss": 0.09151426702737808,
        "best_kl": 1.089521884918213,
        "best_std": 0.15478705167770385,
        "cur_kl": 1.089521884918213,
        "cur_std": 0.15478705167770385,
        "prompt": "<bos> nemoProcedimiento rempli JavaScript inol findDun largest and Minimum numbers in an array",
        "nll_prompt": -291.6129150390625
    },
    {
        "epoch": 100,
        "loss": 0.09375818073749542,
        "best_loss": 0.09151426702737808,
        "best_kl": 1.089521884918213,
        "best_std": 0.15478705167770385,
        "cur_kl": 1.3059722185134888,
        "cur_std": 0.18606327772140502,
        "prompt": "<bos> nemoProcedimiento rempli JavaScript葩 findDun largest and Minimum numbers in an array",
        "nll_prompt": -269.50079345703125
    }
]