[
    {
        "epoch": 1,
        "loss": 0.740794837474823,
        "best_loss": 0.740794837474823,
        "best_kl": 17.67239761352539,
        "best_std": 0.6318312168121338,
        "cur_kl": 17.67239761352539,
        "cur_std": 0.6318312168121338,
        "prompt": "<bos>How to implement a omits in Python that merges two sorted lists using a merge sort technique",
        "nll_prompt": -151.19189453125
    },
    {
        "epoch": 2,
        "loss": 0.5541000366210938,
        "best_loss": 0.5541000366210938,
        "best_kl": 11.030702590942383,
        "best_std": 0.6607344150543213,
        "cur_kl": 11.030702590942383,
        "cur_std": 0.6607344150543213,
        "prompt": "<bos>How to implement a omits in Python that merges two sorted lists using a merge sort])))",
        "nll_prompt": -182.27781677246094
    },
    {
        "epoch": 3,
        "loss": 0.44983822107315063,
        "best_loss": 0.44983822107315063,
        "best_kl": 9.627225875854492,
        "best_std": 0.5313280105590821,
        "cur_kl": 9.627225875854492,
        "cur_std": 0.5313280105590821,
        "prompt": "<bos>How to implement a omits in Python that merges two sorted lists using a mergeuality])))",
        "nll_prompt": -215.64981079101562
    },
    {
        "epoch": 4,
        "loss": 0.4664528965950012,
        "best_loss": 0.44983822107315063,
        "best_kl": 9.627225875854492,
        "best_std": 0.5313280105590821,
        "cur_kl": 9.746750831604004,
        "cur_std": 0.5085102558135987,
        "prompt": "<bos>How to implement a omits\")\" Python that merges two sorted lists using a mergeuality])))",
        "nll_prompt": -249.98985290527344
    },
    {
        "epoch": 5,
        "loss": 0.4653271734714508,
        "best_loss": 0.44983822107315063,
        "best_kl": 9.112000465393066,
        "best_std": 0.40556936264038085,
        "cur_kl": 9.112000465393066,
        "cur_std": 0.40556936264038085,
        "prompt": "<bos>How to implement a omits\")\" Python that merges two sorted lists using a mergeuality|$.",
        "nll_prompt": -254.70860290527344
    },
    {
        "epoch": 6,
        "loss": 0.44153574109077454,
        "best_loss": 0.44153574109077454,
        "best_kl": 8.387466430664062,
        "best_std": 0.3704018831253052,
        "cur_kl": 8.387466430664062,
        "cur_std": 0.3704018831253052,
        "prompt": "<bos>How to implement a fili\")\" Python that merges two sorted lists using a mergeuality|$.",
        "nll_prompt": -251.45785522460938
    },
    {
        "epoch": 7,
        "loss": 0.3699926435947418,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.789411544799805,
        "best_std": 0.33179826736450196,
        "cur_kl": 7.789411544799805,
        "cur_std": 0.33179826736450196,
        "prompt": "<bos>How to implement a fili\")\" Python that merges two sorted lists using a mergeLst|$.",
        "nll_prompt": -241.59698486328125
    },
    {
        "epoch": 8,
        "loss": 0.4138747751712799,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.570415496826172,
        "best_std": 0.35783302783966064,
        "cur_kl": 7.570415496826172,
        "cur_std": 0.35783302783966064,
        "prompt": "<bos>How to implement a fili\")\" Python that merges two sorted lists using a merge feen|$.",
        "nll_prompt": -257.7492980957031
    },
    {
        "epoch": 9,
        "loss": 0.40705573558807373,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.570415496826172,
        "best_std": 0.35783302783966064,
        "cur_kl": 8.320169448852539,
        "cur_std": 0.38935630321502684,
        "prompt": "<bos>How to homeward a fili\")\" Python that merges two sorted lists using a merge feen|$.",
        "nll_prompt": -286.63800048828125
    },
    {
        "epoch": 10,
        "loss": 0.3980966806411743,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.570415496826172,
        "best_std": 0.35783302783966064,
        "cur_kl": 7.862648963928223,
        "cur_std": 0.35704836845397947,
        "prompt": "<bos>How to homeward a Clamp\")\" Python that merges two sorted lists using a merge feen|$.",
        "nll_prompt": -282.6937255859375
    },
    {
        "epoch": 11,
        "loss": 0.40516355633735657,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.570415496826172,
        "best_std": 0.35783302783966064,
        "cur_kl": 7.913959980010986,
        "cur_std": 0.34284708499908445,
        "prompt": "<bos>How to brilli a Clamp\")\" Python that merges two sorted lists using a merge feen|$.",
        "nll_prompt": -288.8135681152344
    },
    {
        "epoch": 12,
        "loss": 0.3755938708782196,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.570415496826172,
        "best_std": 0.35783302783966064,
        "cur_kl": 7.611037254333496,
        "cur_std": 0.29997031688690184,
        "prompt": "<bos>How unwarran brilli a Clamp\")\" Python that merges two sorted lists using a merge feen|$.",
        "nll_prompt": -333.9968566894531
    },
    {
        "epoch": 13,
        "loss": 0.410454660654068,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.249565124511719,
        "best_std": 0.2861328601837158,
        "cur_kl": 7.249565124511719,
        "cur_std": 0.2861328601837158,
        "prompt": "<bos>How unwarran brilli a Clamp\")\" Python that merges two sorted lists mélang a merge feen|$.",
        "nll_prompt": -375.95281982421875
    },
    {
        "epoch": 14,
        "loss": 0.41323602199554443,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.249565124511719,
        "best_std": 0.2861328601837158,
        "cur_kl": 7.558420181274414,
        "cur_std": 0.3066043138504028,
        "prompt": "<bos>How unwarran brilli a Clamp\")\" Python that merges two sorted lists tecnológica a merge feen|$.",
        "nll_prompt": -359.80853271484375
    },
    {
        "epoch": 15,
        "loss": 0.4124763309955597,
        "best_loss": 0.3699926435947418,
        "best_kl": 7.249565124511719,
        "best_std": 0.2861328601837158,
        "cur_kl": 7.380440711975098,
        "cur_std": 0.349746561050415,
        "prompt": "<bos>How unwarran brilli aTeknik\")\" Python that merges two sorted lists tecnológica a merge feen|$.",
        "nll_prompt": -360.68157958984375
    },
    {
        "epoch": 16,
        "loss": 0.3605198264122009,
        "best_loss": 0.3605198264122009,
        "best_kl": 7.215231895446777,
        "best_std": 0.32713661193847654,
        "cur_kl": 7.215231895446777,
        "cur_std": 0.32713661193847654,
        "prompt": "<bos>How unwarran brilli aTeknik\")\" Python that merges two sorted lists tecnológica a merge laci|$.",
        "nll_prompt": -357.54058837890625
    },
    {
        "epoch": 17,
        "loss": 0.4072253406047821,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.872605323791504,
        "best_std": 0.3553808927536011,
        "cur_kl": 6.872605323791504,
        "cur_std": 0.3553808927536011,
        "prompt": "<bos>How asum brilli aTeknik\")\" Python that merges two sorted lists tecnológica a merge laci|$.",
        "nll_prompt": -328.87158203125
    },
    {
        "epoch": 18,
        "loss": 0.40344569087028503,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.872605323791504,
        "best_std": 0.3553808927536011,
        "cur_kl": 7.00373649597168,
        "cur_std": 0.3815669059753418,
        "prompt": "<bos>How asum brilli aTeknik\")\" Python that merges two sorted lists tecnológica入 merge laci|$.",
        "nll_prompt": -340.92572021484375
    },
    {
        "epoch": 19,
        "loss": 0.4109310805797577,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.872605323791504,
        "best_std": 0.3553808927536011,
        "cur_kl": 7.1210479736328125,
        "cur_std": 0.4097318172454834,
        "prompt": "<bos>How asum brilli aTeknik\")\" Python that merges two sorted lists tecnológica入 merge tower|$.",
        "nll_prompt": -332.0936584472656
    },
    {
        "epoch": 20,
        "loss": 0.374418705701828,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.872605323791504,
        "best_std": 0.3553808927536011,
        "cur_kl": 7.065709114074707,
        "cur_std": 0.4073352336883545,
        "prompt": "<bos>How asum brilli aTeknik\")\" Python that merges two sorted listsಊ入 merge tower|$.",
        "nll_prompt": -341.20318603515625
    },
    {
        "epoch": 21,
        "loss": 0.39344459772109985,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.668431282043457,
        "best_std": 0.386651349067688,
        "cur_kl": 6.668431282043457,
        "cur_std": 0.386651349067688,
        "prompt": "<bos>How asum brilli مشينTeknik\")\" Python that merges two sorted listsಊ入 merge tower|$.",
        "nll_prompt": -381.68450927734375
    },
    {
        "epoch": 22,
        "loss": 0.39482900500297546,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.605966567993164,
        "best_std": 0.4764655113220215,
        "cur_kl": 6.605966567993164,
        "cur_std": 0.4764655113220215,
        "prompt": "<bos>How asum brilli مشين pouvaient\")\" Python that merges two sorted listsಊ入 merge tower|$.",
        "nll_prompt": -423.3930358886719
    },
    {
        "epoch": 23,
        "loss": 0.37082624435424805,
        "best_loss": 0.3605198264122009,
        "best_kl": 6.29073429107666,
        "best_std": 0.4904684543609619,
        "cur_kl": 6.29073429107666,
        "cur_std": 0.4904684543609619,
        "prompt": "<bos>How asumdL مشين pouvaient\")\" Python that merges two sorted listsಊ入 merge tower|$.",
        "nll_prompt": -406.8433837890625
    },
    {
        "epoch": 24,
        "loss": 0.3723977506160736,
        "best_loss": 0.3605198264122009,
        "best_kl": 5.959360599517822,
        "best_std": 0.4664015293121338,
        "cur_kl": 5.959360599517822,
        "cur_std": 0.4664015293121338,
        "prompt": "<bos>How digitaisdL مشين pouvaient\")\" Python that merges two sorted listsಊ入 merge tower|$.",
        "nll_prompt": -416.499267578125
    },
    {
        "epoch": 25,
        "loss": 0.3533548414707184,
        "best_loss": 0.3533548414707184,
        "best_kl": 5.959360599517822,
        "best_std": 0.4664015293121338,
        "cur_kl": 6.074345111846924,
        "cur_std": 0.4381267547607422,
        "prompt": "<bos>How digitaisdL>< pouvaient\")\" Python that merges two sorted listsಊ入 merge tower|$.",
        "nll_prompt": -367.842529296875
    },
    {
        "epoch": 26,
        "loss": 0.3403884470462799,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.959360599517822,
        "best_std": 0.4664015293121338,
        "cur_kl": 6.171528339385986,
        "cur_std": 0.4328442096710205,
        "prompt": "<bos>How digitaisdL>< pouvaient\")\" Python that merges two sorted lists malheur入 merge tower|$.",
        "nll_prompt": -375.5098876953125
    },
    {
        "epoch": 27,
        "loss": 0.3934403955936432,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.959360599517822,
        "best_std": 0.4664015293121338,
        "cur_kl": 5.973245620727539,
        "cur_std": 0.42984890937805176,
        "prompt": "<bos>How digitaisdL>< pouvaient。　　 Python that merges two sorted lists malheur入 merge tower|$.",
        "nll_prompt": -382.8194885253906
    },
    {
        "epoch": 28,
        "loss": 0.3841547667980194,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.709514141082764,
        "best_std": 0.3903611660003662,
        "cur_kl": 5.709514141082764,
        "cur_std": 0.3903611660003662,
        "prompt": "<bos>How digitaisdL>< uphol。　　 Python that merges two sorted lists malheur入 merge tower|$.",
        "nll_prompt": -371.1513366699219
    },
    {
        "epoch": 29,
        "loss": 0.3776988387107849,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.709514141082764,
        "best_std": 0.3903611660003662,
        "cur_kl": 5.776149272918701,
        "cur_std": 0.41345949172973634,
        "prompt": "<bos>How digitaisdL>< Redacción。　　 Python that merges two sorted lists malheur入 merge tower|$.",
        "nll_prompt": -379.8594970703125
    },
    {
        "epoch": 30,
        "loss": 0.354465514421463,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.709514141082764,
        "best_std": 0.3903611660003662,
        "cur_kl": 5.730676651000977,
        "cur_std": 0.4163532733917236,
        "prompt": "<bos>How digitaisdL>< Redacción。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -366.4657287597656
    },
    {
        "epoch": 31,
        "loss": 0.38028693199157715,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.709514141082764,
        "best_std": 0.3903611660003662,
        "cur_kl": 5.958685398101807,
        "cur_std": 0.3962747097015381,
        "prompt": "<bos>How digitaisdL>< embodi。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -350.69879150390625
    },
    {
        "epoch": 32,
        "loss": 0.36840346455574036,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.555881977081299,
        "best_std": 0.39451982975006106,
        "cur_kl": 5.555881977081299,
        "cur_std": 0.39451982975006106,
        "prompt": "<bos>How digitaisdL>< utop。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -365.46539306640625
    },
    {
        "epoch": 33,
        "loss": 0.3678131699562073,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.155921936035156,
        "cur_std": 0.3466706037521362,
        "prompt": "<bos>How ClientdL>< utop。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -343.37811279296875
    },
    {
        "epoch": 34,
        "loss": 0.3679710030555725,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.5481696128845215,
        "cur_std": 0.3923056602478027,
        "prompt": "<bos>How ClientdL straordin utop。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -379.5653381347656
    },
    {
        "epoch": 35,
        "loss": 0.3563878834247589,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.237492084503174,
        "cur_std": 0.3566037654876709,
        "prompt": "<bos>How ClientdL horrend utop。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -379.1004943847656
    },
    {
        "epoch": 36,
        "loss": 0.35715022683143616,
        "best_loss": 0.3403884470462799,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.252754211425781,
        "cur_std": 0.35557668209075927,
        "prompt": "<bos>How ClientdLmathbb utop。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -350.22369384765625
    },
    {
        "epoch": 37,
        "loss": 0.3340115249156952,
        "best_loss": 0.3340115249156952,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 6.3861284255981445,
        "cur_std": 0.4174793720245361,
        "prompt": "<bos>How ClientdLmathbbkowym。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -353.321044921875
    },
    {
        "epoch": 38,
        "loss": 0.35404127836227417,
        "best_loss": 0.3340115249156952,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.435547828674316,
        "cur_std": 0.3900197267532349,
        "prompt": "<bos>How ClientdLmathbb radikal。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -355.9327697753906
    },
    {
        "epoch": 39,
        "loss": 0.3590318262577057,
        "best_loss": 0.3340115249156952,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.902412414550781,
        "cur_std": 0.45120797157287595,
        "prompt": "<bos>How ClientdL nogal radikal。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -372.9109802246094
    },
    {
        "epoch": 40,
        "loss": 0.3540908396244049,
        "best_loss": 0.3340115249156952,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.3201584815979,
        "cur_std": 0.3455810546875,
        "prompt": "<bos>How ClientdL nogal swarovski。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -375.37640380859375
    },
    {
        "epoch": 41,
        "loss": 0.32061710953712463,
        "best_loss": 0.32061710953712463,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.223455905914307,
        "cur_std": 0.36787891387939453,
        "prompt": "<bos>How ClientdL nogal\">—。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -350.8223876953125
    },
    {
        "epoch": 42,
        "loss": 0.3726893961429596,
        "best_loss": 0.32061710953712463,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.443140983581543,
        "cur_std": 0.3496718883514404,
        "prompt": "<bos>How ClientdL nogal stockholm。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -364.94970703125
    },
    {
        "epoch": 43,
        "loss": 0.350035697221756,
        "best_loss": 0.32061710953712463,
        "best_kl": 5.155921936035156,
        "best_std": 0.3466706037521362,
        "cur_kl": 5.215803146362305,
        "cur_std": 0.3812651872634888,
        "prompt": "<bos>How ClientdL Ingeniería stockholm。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -385.7599182128906
    },
    {
        "epoch": 44,
        "loss": 0.3496326506137848,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 4.863102912902832,
        "cur_std": 0.3709015130996704,
        "prompt": "<bos>How ClientdL Ingenieríaearcher。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -372.9521484375
    },
    {
        "epoch": 45,
        "loss": 0.34834814071655273,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 4.9639506340026855,
        "cur_std": 0.37658464908599854,
        "prompt": "<bos>How ClientdL Ingeniería elsa。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -388.6616516113281
    },
    {
        "epoch": 46,
        "loss": 0.3793603479862213,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.611880779266357,
        "cur_std": 0.3666165113449097,
        "prompt": "<bos>How ClientdL vectra elsa。　　 Python that merges two sorted listskomplet入 merge tower|$.",
        "nll_prompt": -367.15655517578125
    },
    {
        "epoch": 47,
        "loss": 0.3703345060348511,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.767333984375,
        "cur_std": 0.39221391677856443,
        "prompt": "<bos>How ClientdL vectra elsa。　　 Python that merges two sorted listssumoto入 merge tower|$.",
        "nll_prompt": -363.0594787597656
    },
    {
        "epoch": 48,
        "loss": 0.3602115511894226,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.554718971252441,
        "cur_std": 0.4004732608795166,
        "prompt": "<bos>How ClientdLxnn elsa。　　 Python that merges two sorted listssumoto入 merge tower|$.",
        "nll_prompt": -357.72857666015625
    },
    {
        "epoch": 49,
        "loss": 0.34416887164115906,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.277141094207764,
        "cur_std": 0.4827460765838623,
        "prompt": "<bos>How ClientdLxnn resourceCulture。　　 Python that merges two sorted listssumoto入 merge tower|$.",
        "nll_prompt": -378.8531188964844
    },
    {
        "epoch": 50,
        "loss": 0.3423789143562317,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.198820114135742,
        "cur_std": 0.4528233528137207,
        "prompt": "<bos>How ClientdL mitsubishi resourceCulture。　　 Python that merges two sorted listssumoto入 merge tower|$.",
        "nll_prompt": -377.7561950683594
    },
    {
        "epoch": 51,
        "loss": 0.33384379744529724,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.7412896156311035,
        "cur_std": 0.41832661628723145,
        "prompt": "<bos>How ClientdL mitsubishiNoter。　　 Python that merges two sorted listssumoto入 merge tower|$.",
        "nll_prompt": -359.48529052734375
    },
    {
        "epoch": 52,
        "loss": 0.33491215109825134,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.319161415100098,
        "cur_std": 0.4239469528198242,
        "prompt": "<bos>How ClientdL mitsubishiNoter。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -361.0353088378906
    },
    {
        "epoch": 53,
        "loss": 0.34078434109687805,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.311800479888916,
        "cur_std": 0.42455596923828126,
        "prompt": "<bos> ivi ClientdL mitsubishiNoter。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -300.4325866699219
    },
    {
        "epoch": 54,
        "loss": 0.327472448348999,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.123605728149414,
        "cur_std": 0.4472803115844727,
        "prompt": "<bos> ivi ClientdLdentalNoter。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -301.5787353515625
    },
    {
        "epoch": 55,
        "loss": 0.35785427689552307,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.300617694854736,
        "cur_std": 0.4188078880310059,
        "prompt": "<bos> ivi décretdLdentalNoter。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -328.6692810058594
    },
    {
        "epoch": 56,
        "loss": 0.3457222580909729,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.685831069946289,
        "cur_std": 0.47153639793395996,
        "prompt": "<bos> ivi décret disegnidentalNoter。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -339.72430419921875
    },
    {
        "epoch": 57,
        "loss": 0.35183772444725037,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.7224555015563965,
        "cur_std": 0.4994022846221924,
        "prompt": "<bos> ivi décret disegnidental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -338.5536193847656
    },
    {
        "epoch": 58,
        "loss": 0.36203792691230774,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 6.333502292633057,
        "cur_std": 0.47082953453063964,
        "prompt": "<bos> pecuni décret disegnidental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -356.30126953125
    },
    {
        "epoch": 59,
        "loss": 0.37591198086738586,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 6.124039649963379,
        "cur_std": 0.46129393577575684,
        "prompt": "<bos> pecuni loto disegnidental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -331.8401184082031
    },
    {
        "epoch": 60,
        "loss": 0.36075925827026367,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.846244812011719,
        "cur_std": 0.4520839214324951,
        "prompt": "<bos> maintien loto disegnidental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -364.65460205078125
    },
    {
        "epoch": 61,
        "loss": 0.35666438937187195,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.480098724365234,
        "cur_std": 0.47858576774597167,
        "prompt": "<bos> excu loto disegnidental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -310.24957275390625
    },
    {
        "epoch": 62,
        "loss": 0.36698049306869507,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.576203346252441,
        "cur_std": 0.48900394439697265,
        "prompt": "<bos> excu mémor disegnidental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -340.916015625
    },
    {
        "epoch": 63,
        "loss": 0.33107733726501465,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.131568431854248,
        "cur_std": 0.4302226543426514,
        "prompt": "<bos> excu mémorcorrênciadental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -331.9898986816406
    },
    {
        "epoch": 64,
        "loss": 0.3520575165748596,
        "best_loss": 0.32061710953712463,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.125142574310303,
        "cur_std": 0.4182133674621582,
        "prompt": "<bos> excu cigacorrênciadental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -304.545166015625
    },
    {
        "epoch": 65,
        "loss": 0.3200817108154297,
        "best_loss": 0.3200817108154297,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.147827625274658,
        "cur_std": 0.4152329444885254,
        "prompt": "<bos> broderie cigacorrênciadental fuji。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -347.2298583984375
    },
    {
        "epoch": 66,
        "loss": 0.3550942838191986,
        "best_loss": 0.3200817108154297,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 5.038232803344727,
        "cur_std": 0.3945417881011963,
        "prompt": "<bos> broderie cigacorrênciadentalpostIndex。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -345.64794921875
    },
    {
        "epoch": 67,
        "loss": 0.3146066963672638,
        "best_loss": 0.3146066963672638,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 4.975537300109863,
        "cur_std": 0.42501277923583985,
        "prompt": "<bos> broderie.\"*corrênciadentalpostIndex。　　 Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -356.1844787597656
    },
    {
        "epoch": 68,
        "loss": 0.33973684906959534,
        "best_loss": 0.3146066963672638,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 4.9246320724487305,
        "cur_std": 0.428344202041626,
        "prompt": "<bos> broderie.\"*corrênciadentalpostIndex):\r Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -335.79254150390625
    },
    {
        "epoch": 69,
        "loss": 0.35931164026260376,
        "best_loss": 0.3146066963672638,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 4.966578960418701,
        "cur_std": 0.4143964767456055,
        "prompt": "<bos> broderiecitepcorrênciadentalpostIndex):\r Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -360.665771484375
    },
    {
        "epoch": 70,
        "loss": 0.34727370738983154,
        "best_loss": 0.3146066963672638,
        "best_kl": 4.863102912902832,
        "best_std": 0.3709015130996704,
        "cur_kl": 4.957587242126465,
        "cur_std": 0.41445493698120117,
        "prompt": "<bos> broderieReakcorrênciadentalpostIndex):\r Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -356.4472351074219
    },
    {
        "epoch": 71,
        "loss": 0.30280518531799316,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 4.74342679977417,
        "cur_std": 0.42254152297973635,
        "prompt": "<bos> broderieReakcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -353.0090637207031
    },
    {
        "epoch": 72,
        "loss": 0.34463804960250854,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 4.987488269805908,
        "cur_std": 0.44530935287475587,
        "prompt": "<bos> broderie contestcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -343.9383544921875
    },
    {
        "epoch": 73,
        "loss": 0.3494347929954529,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.181672096252441,
        "cur_std": 0.4373198986053467,
        "prompt": "<bos> versace contestcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -312.2381896972656
    },
    {
        "epoch": 74,
        "loss": 0.3550888001918793,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 4.8261871337890625,
        "cur_std": 0.4129044532775879,
        "prompt": "<bos> TokenType contestcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -331.3677978515625
    },
    {
        "epoch": 75,
        "loss": 0.3261418044567108,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.685124397277832,
        "cur_std": 0.43251767158508303,
        "prompt": "<bos> TokenType spilcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -334.3199157714844
    },
    {
        "epoch": 76,
        "loss": 0.36816951632499695,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.580938816070557,
        "cur_std": 0.43371071815490725,
        "prompt": "<bos> nmax spilcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -317.6794738769531
    },
    {
        "epoch": 77,
        "loss": 0.32988792657852173,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.353307247161865,
        "cur_std": 0.40383234024047854,
        "prompt": "<bos> decathlon spilcorrênciadentalpostIndex])): Python that merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -330.9916076660156
    },
    {
        "epoch": 78,
        "loss": 0.35144054889678955,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.542825222015381,
        "cur_std": 0.5161844253540039,
        "prompt": "<bos> decathlon spilcorrênciadentalpostIndex])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -364.5224914550781
    },
    {
        "epoch": 79,
        "loss": 0.35478609800338745,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.612751483917236,
        "cur_std": 0.515198040008545,
        "prompt": "<bos> decathlon spil ascerdentalpostIndex])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -370.4420166015625
    },
    {
        "epoch": 80,
        "loss": 0.35527461767196655,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.351536750793457,
        "cur_std": 0.5411763668060303,
        "prompt": "<bos> decathlon spilessicadentalpostIndex])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -373.99383544921875
    },
    {
        "epoch": 81,
        "loss": 0.3622969388961792,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.418843746185303,
        "cur_std": 0.5594870567321777,
        "prompt": "<bos> decathlon âmesessicadentalpostIndex])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -385.9565734863281
    },
    {
        "epoch": 82,
        "loss": 0.36261215806007385,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.2160468101501465,
        "cur_std": 0.5907310962677002,
        "prompt": "<bos> decathlon âmesessicaGPTpostIndex])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -400.91925048828125
    },
    {
        "epoch": 83,
        "loss": 0.3405452370643616,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.288084506988525,
        "cur_std": 0.529224157333374,
        "prompt": "<bos> decathlon âmesessicaGPT vogliamo])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -405.87176513671875
    },
    {
        "epoch": 84,
        "loss": 0.35227397084236145,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.32794713973999,
        "cur_std": 0.542597484588623,
        "prompt": "<bos>miel âmesessicaGPT vogliamo])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -396.16748046875
    },
    {
        "epoch": 85,
        "loss": 0.3310580253601074,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.340779781341553,
        "cur_std": 0.4872103691101074,
        "prompt": "<bos>waite âmesessicaGPT vogliamo])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -441.8944091796875
    },
    {
        "epoch": 86,
        "loss": 0.3336978852748871,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.485512733459473,
        "cur_std": 0.47187061309814454,
        "prompt": "<bos>waite âmesessica przecież vogliamo])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -434.999267578125
    },
    {
        "epoch": 87,
        "loss": 0.31995365023612976,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.20414924621582,
        "cur_std": 0.4568227767944336,
        "prompt": "<bos>waite enthouessica przecież vogliamo])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -459.8262939453125
    },
    {
        "epoch": 88,
        "loss": 0.31026819348335266,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.215138912200928,
        "cur_std": 0.49431729316711426,
        "prompt": "<bos>waite enthouessica przecieżuctura])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -437.07427978515625
    },
    {
        "epoch": 89,
        "loss": 0.3620849847793579,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.546768665313721,
        "cur_std": 0.4889714241027832,
        "prompt": "<bos>waite enthouessica przecieżcritti])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -433.68511962890625
    },
    {
        "epoch": 90,
        "loss": 0.3091600835323334,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.916020393371582,
        "cur_std": 0.5140473365783691,
        "prompt": "<bos>waite enthouessica panikcritti])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -430.0048828125
    },
    {
        "epoch": 91,
        "loss": 0.36240822076797485,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.463625907897949,
        "cur_std": 0.49213857650756837,
        "prompt": "<bos>waite enthouessica panik OGS])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -441.802001953125
    },
    {
        "epoch": 92,
        "loss": 0.36117786169052124,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.764882564544678,
        "cur_std": 0.49100422859191895,
        "prompt": "<bos>waite enthouessica panik content])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -434.8519592285156
    },
    {
        "epoch": 93,
        "loss": 0.31681910157203674,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.81756591796875,
        "cur_std": 0.5354801177978515,
        "prompt": "<bos> virtuel enthouessica panik content])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -414.1046447753906
    },
    {
        "epoch": 94,
        "loss": 0.37868598103523254,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.733565330505371,
        "cur_std": 0.5168033599853515,
        "prompt": "<bos> virtuel enthouessica panik dedicar])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -410.99371337890625
    },
    {
        "epoch": 95,
        "loss": 0.35055801272392273,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.531956672668457,
        "cur_std": 0.5009711265563965,
        "prompt": "<bos> guil enthouessica panik dedicar])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -350.6917724609375
    },
    {
        "epoch": 96,
        "loss": 0.351785808801651,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.351229667663574,
        "cur_std": 0.5082940578460693,
        "prompt": "<bos> guil Verhaltenessica panik dedicar])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -361.4994812011719
    },
    {
        "epoch": 97,
        "loss": 0.3498178720474243,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.2049174308776855,
        "cur_std": 0.5105668067932129,
        "prompt": "<bos> guil Verhaltenessica panikMessageState])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -357.3089294433594
    },
    {
        "epoch": 98,
        "loss": 0.34522467851638794,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.114687919616699,
        "cur_std": 0.49954071044921877,
        "prompt": "<bos> guil Verhaltenessica PlinMessageState])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -356.57196044921875
    },
    {
        "epoch": 99,
        "loss": 0.34216198325157166,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 4.987722873687744,
        "cur_std": 0.49815807342529295,
        "prompt": "<bos> guil VerhaltenessicaimaanMessageState])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -363.24530029296875
    },
    {
        "epoch": 100,
        "loss": 0.342298686504364,
        "best_loss": 0.30280518531799316,
        "best_kl": 4.74342679977417,
        "best_std": 0.42254152297973635,
        "cur_kl": 5.05977725982666,
        "cur_std": 0.5203092575073243,
        "prompt": "<bos> guil Verhaltenessica virtuelMessageState])): Python Descargar merges two sorted lists intre入 merge tower|$.",
        "nll_prompt": -366.9427490234375
    }
]